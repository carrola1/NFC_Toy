
NFC_Toy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004058  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  08004118  08004118  00014118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004a28  08004a28  00014a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08004a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000398  20000068  08004a94  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000400  08004a94  00020400  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001dd19  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003a6d  00000000  00000000  0003dda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c6d5  00000000  00000000  00041816  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b68  00000000  00000000  0004def0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001030  00000000  00000000  0004ea58  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000816b  00000000  00000000  0004fa88  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003787  00000000  00000000  00057bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005b37a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002980  00000000  00000000  0005b3f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         0000009c  00000000  00000000  0005dd78  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000001b9  00000000  00000000  0005de14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004100 	.word	0x08004100

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08004100 	.word	0x08004100

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80003f4:	21fa      	movs	r1, #250	; 0xfa
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <HAL_InitTick+0x24>)
{
 80003f8:	b510      	push	{r4, lr}
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80003fa:	0089      	lsls	r1, r1, #2
{
 80003fc:	0004      	movs	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80003fe:	6818      	ldr	r0, [r3, #0]
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 f86e 	bl	80004e4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000408:	2001      	movs	r0, #1
 800040a:	2200      	movs	r2, #0
 800040c:	0021      	movs	r1, r4
 800040e:	4240      	negs	r0, r0
 8000410:	f000 f82e 	bl	8000470 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000414:	2000      	movs	r0, #0
 8000416:	bd10      	pop	{r4, pc}
 8000418:	20000000 	.word	0x20000000

0800041c <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800041c:	2340      	movs	r3, #64	; 0x40
 800041e:	4a06      	ldr	r2, [pc, #24]	; (8000438 <HAL_Init+0x1c>)
{
 8000420:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000422:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000424:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000426:	430b      	orrs	r3, r1
 8000428:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800042a:	f7ff ffe3 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 800042e:	f002 fdcb 	bl	8002fc8 <HAL_MspInit>
}
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	40022000 	.word	0x40022000

0800043c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800043c:	4a02      	ldr	r2, [pc, #8]	; (8000448 <HAL_IncTick+0xc>)
 800043e:	6813      	ldr	r3, [r2, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	6013      	str	r3, [r2, #0]
}
 8000444:	4770      	bx	lr
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	20000098 	.word	0x20000098

0800044c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800044c:	4b01      	ldr	r3, [pc, #4]	; (8000454 <HAL_GetTick+0x8>)
 800044e:	6818      	ldr	r0, [r3, #0]
}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	20000098 	.word	0x20000098

08000458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000458:	b513      	push	{r0, r1, r4, lr}
 800045a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 800045c:	f7ff fff6 	bl	800044c <HAL_GetTick>
 8000460:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000462:	f7ff fff3 	bl	800044c <HAL_GetTick>
 8000466:	9b01      	ldr	r3, [sp, #4]
 8000468:	1b00      	subs	r0, r0, r4
 800046a:	4298      	cmp	r0, r3
 800046c:	d3f9      	bcc.n	8000462 <HAL_Delay+0xa>
  {
  }
}
 800046e:	bd13      	pop	{r0, r1, r4, pc}

08000470 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000470:	b570      	push	{r4, r5, r6, lr}
 8000472:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000474:	2800      	cmp	r0, #0
 8000476:	da14      	bge.n	80004a2 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000478:	230f      	movs	r3, #15
 800047a:	b2c0      	uxtb	r0, r0
 800047c:	4003      	ands	r3, r0
 800047e:	3b08      	subs	r3, #8
 8000480:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <HAL_NVIC_SetPriority+0x58>)
 8000482:	089b      	lsrs	r3, r3, #2
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	189b      	adds	r3, r3, r2
 8000488:	2203      	movs	r2, #3
 800048a:	4010      	ands	r0, r2
 800048c:	4090      	lsls	r0, r2
 800048e:	32fc      	adds	r2, #252	; 0xfc
 8000490:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000492:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000494:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000496:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000498:	69dc      	ldr	r4, [r3, #28]
 800049a:	43ac      	bics	r4, r5
 800049c:	4321      	orrs	r1, r4
 800049e:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004a0:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004a2:	2503      	movs	r5, #3
 80004a4:	0883      	lsrs	r3, r0, #2
 80004a6:	4028      	ands	r0, r5
 80004a8:	40a8      	lsls	r0, r5
 80004aa:	35fc      	adds	r5, #252	; 0xfc
 80004ac:	002e      	movs	r6, r5
 80004ae:	4a07      	ldr	r2, [pc, #28]	; (80004cc <HAL_NVIC_SetPriority+0x5c>)
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	189b      	adds	r3, r3, r2
 80004b4:	22c0      	movs	r2, #192	; 0xc0
 80004b6:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004b8:	4029      	ands	r1, r5
 80004ba:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004bc:	0092      	lsls	r2, r2, #2
 80004be:	589c      	ldr	r4, [r3, r2]
 80004c0:	43b4      	bics	r4, r6
 80004c2:	4321      	orrs	r1, r4
 80004c4:	5099      	str	r1, [r3, r2]
 80004c6:	e7eb      	b.n	80004a0 <HAL_NVIC_SetPriority+0x30>
 80004c8:	e000ed00 	.word	0xe000ed00
 80004cc:	e000e100 	.word	0xe000e100

080004d0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004d0:	231f      	movs	r3, #31
 80004d2:	4018      	ands	r0, r3
 80004d4:	3b1e      	subs	r3, #30
 80004d6:	4083      	lsls	r3, r0
 80004d8:	4a01      	ldr	r2, [pc, #4]	; (80004e0 <HAL_NVIC_EnableIRQ+0x10>)
 80004da:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004dc:	4770      	bx	lr
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	e000e100 	.word	0xe000e100

080004e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004e4:	4a09      	ldr	r2, [pc, #36]	; (800050c <HAL_SYSTICK_Config+0x28>)
 80004e6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80004e8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d80d      	bhi.n	800050a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ee:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f2:	4808      	ldr	r0, [pc, #32]	; (8000514 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004f4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f6:	6a03      	ldr	r3, [r0, #32]
 80004f8:	0609      	lsls	r1, r1, #24
 80004fa:	021b      	lsls	r3, r3, #8
 80004fc:	0a1b      	lsrs	r3, r3, #8
 80004fe:	430b      	orrs	r3, r1
 8000500:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000502:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000504:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000506:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000508:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800050a:	4770      	bx	lr
 800050c:	00ffffff 	.word	0x00ffffff
 8000510:	e000e010 	.word	0xe000e010
 8000514:	e000ed00 	.word	0xe000ed00

08000518 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000518:	4b05      	ldr	r3, [pc, #20]	; (8000530 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800051a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800051c:	2804      	cmp	r0, #4
 800051e:	d102      	bne.n	8000526 <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000520:	4310      	orrs	r0, r2
 8000522:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000524:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000526:	2104      	movs	r1, #4
 8000528:	438a      	bics	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	e7fa      	b.n	8000524 <HAL_SYSTICK_CLKSourceConfig+0xc>
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	e000e010 	.word	0xe000e010

08000534 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000534:	4770      	bx	lr

08000536 <HAL_SYSTICK_IRQHandler>:
{
 8000536:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000538:	f7ff fffc 	bl	8000534 <HAL_SYSTICK_Callback>
}
 800053c:	bd10      	pop	{r4, pc}
	...

08000540 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000540:	0003      	movs	r3, r0
 8000542:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8000544:	2001      	movs	r0, #1
  if(hdma == NULL)
 8000546:	2b00      	cmp	r3, #0
 8000548:	d02a      	beq.n	80005a0 <HAL_DMA_Init+0x60>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 800054a:	1d98      	adds	r0, r3, #6
 800054c:	7fc2      	ldrb	r2, [r0, #31]
 800054e:	b2d2      	uxtb	r2, r2
 8000550:	2a00      	cmp	r2, #0
 8000552:	d101      	bne.n	8000558 <HAL_DMA_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8000554:	1d59      	adds	r1, r3, #5
 8000556:	77ca      	strb	r2, [r1, #31]
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000558:	2202      	movs	r2, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800055a:	6819      	ldr	r1, [r3, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800055c:	77c2      	strb	r2, [r0, #31]
  tmp = hdma->Instance->CCR;
 800055e:	680c      	ldr	r4, [r1, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000560:	4a34      	ldr	r2, [pc, #208]	; (8000634 <HAL_DMA_Init+0xf4>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000562:	68dd      	ldr	r5, [r3, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000564:	4014      	ands	r4, r2
  tmp |=  hdma->Init.Direction        |
 8000566:	689a      	ldr	r2, [r3, #8]
 8000568:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800056a:	691d      	ldr	r5, [r3, #16]
 800056c:	432a      	orrs	r2, r5
 800056e:	695d      	ldr	r5, [r3, #20]
 8000570:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000572:	699d      	ldr	r5, [r3, #24]
 8000574:	432a      	orrs	r2, r5
 8000576:	69dd      	ldr	r5, [r3, #28]
 8000578:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800057a:	6a1d      	ldr	r5, [r3, #32]
 800057c:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 800057e:	4322      	orrs	r2, r4

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000580:	600a      	str	r2, [r1, #0]
  
  /* Write to DMA channel selection register */
  if (hdma->Instance == DMA1_Channel1)
 8000582:	4a2d      	ldr	r2, [pc, #180]	; (8000638 <HAL_DMA_Init+0xf8>)
 8000584:	4291      	cmp	r1, r2
 8000586:	d10c      	bne.n	80005a2 <HAL_DMA_Init+0x62>
  {
    /*Reset request selection for DMA1 Channel1*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C1S;
 8000588:	240f      	movs	r4, #15
 800058a:	4a2c      	ldr	r2, [pc, #176]	; (800063c <HAL_DMA_Init+0xfc>)
 800058c:	6811      	ldr	r1, [r2, #0]
 800058e:	43a1      	bics	r1, r4
 8000590:	6011      	str	r1, [r2, #0]
    
    /* Configure request selection for DMA1 Channel1 */
    DMA1_CSELR->CSELR |= hdma->Init.Request;
 8000592:	6811      	ldr	r1, [r2, #0]
 8000594:	685b      	ldr	r3, [r3, #4]
  {
    /*Reset request selection for DMA1 Channel7*/
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
    
    /* Configure request selection for DMA1 Channel7 */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]
  }
#endif   
  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800059a:	2301      	movs	r3, #1
 800059c:	77c3      	strb	r3, [r0, #31]
  
  return HAL_OK;
 800059e:	2000      	movs	r0, #0
}  
 80005a0:	bd30      	pop	{r4, r5, pc}
  else if (hdma->Instance == DMA1_Channel2)
 80005a2:	4a27      	ldr	r2, [pc, #156]	; (8000640 <HAL_DMA_Init+0x100>)
 80005a4:	4291      	cmp	r1, r2
 80005a6:	d108      	bne.n	80005ba <HAL_DMA_Init+0x7a>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C2S;
 80005a8:	24f0      	movs	r4, #240	; 0xf0
 80005aa:	4a24      	ldr	r2, [pc, #144]	; (800063c <HAL_DMA_Init+0xfc>)
 80005ac:	6811      	ldr	r1, [r2, #0]
 80005ae:	43a1      	bics	r1, r4
 80005b0:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << 4U);
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	6811      	ldr	r1, [r2, #0]
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	e7ed      	b.n	8000596 <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel3)
 80005ba:	4a22      	ldr	r2, [pc, #136]	; (8000644 <HAL_DMA_Init+0x104>)
 80005bc:	4291      	cmp	r1, r2
 80005be:	d108      	bne.n	80005d2 <HAL_DMA_Init+0x92>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C3S;
 80005c0:	4a1e      	ldr	r2, [pc, #120]	; (800063c <HAL_DMA_Init+0xfc>)
 80005c2:	4c21      	ldr	r4, [pc, #132]	; (8000648 <HAL_DMA_Init+0x108>)
 80005c4:	6811      	ldr	r1, [r2, #0]
 80005c6:	4021      	ands	r1, r4
 80005c8:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 8U);
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	6811      	ldr	r1, [r2, #0]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	e7e1      	b.n	8000596 <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel4)
 80005d2:	4a1e      	ldr	r2, [pc, #120]	; (800064c <HAL_DMA_Init+0x10c>)
 80005d4:	4291      	cmp	r1, r2
 80005d6:	d108      	bne.n	80005ea <HAL_DMA_Init+0xaa>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C4S;
 80005d8:	4a18      	ldr	r2, [pc, #96]	; (800063c <HAL_DMA_Init+0xfc>)
 80005da:	4c1d      	ldr	r4, [pc, #116]	; (8000650 <HAL_DMA_Init+0x110>)
 80005dc:	6811      	ldr	r1, [r2, #0]
 80005de:	4021      	ands	r1, r4
 80005e0:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 12U);
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	6811      	ldr	r1, [r2, #0]
 80005e6:	031b      	lsls	r3, r3, #12
 80005e8:	e7d5      	b.n	8000596 <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel5)
 80005ea:	4a1a      	ldr	r2, [pc, #104]	; (8000654 <HAL_DMA_Init+0x114>)
 80005ec:	4291      	cmp	r1, r2
 80005ee:	d108      	bne.n	8000602 <HAL_DMA_Init+0xc2>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C5S;
 80005f0:	4a12      	ldr	r2, [pc, #72]	; (800063c <HAL_DMA_Init+0xfc>)
 80005f2:	4c19      	ldr	r4, [pc, #100]	; (8000658 <HAL_DMA_Init+0x118>)
 80005f4:	6811      	ldr	r1, [r2, #0]
 80005f6:	4021      	ands	r1, r4
 80005f8:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 16U);
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	6811      	ldr	r1, [r2, #0]
 80005fe:	041b      	lsls	r3, r3, #16
 8000600:	e7c9      	b.n	8000596 <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel6)
 8000602:	4a16      	ldr	r2, [pc, #88]	; (800065c <HAL_DMA_Init+0x11c>)
 8000604:	4291      	cmp	r1, r2
 8000606:	d108      	bne.n	800061a <HAL_DMA_Init+0xda>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C6S;
 8000608:	4a0c      	ldr	r2, [pc, #48]	; (800063c <HAL_DMA_Init+0xfc>)
 800060a:	4c15      	ldr	r4, [pc, #84]	; (8000660 <HAL_DMA_Init+0x120>)
 800060c:	6811      	ldr	r1, [r2, #0]
 800060e:	4021      	ands	r1, r4
 8000610:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 20U);
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	6811      	ldr	r1, [r2, #0]
 8000616:	051b      	lsls	r3, r3, #20
 8000618:	e7bd      	b.n	8000596 <HAL_DMA_Init+0x56>
  else if (hdma->Instance == DMA1_Channel7)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <HAL_DMA_Init+0x124>)
 800061c:	4291      	cmp	r1, r2
 800061e:	d1bc      	bne.n	800059a <HAL_DMA_Init+0x5a>
    DMA1_CSELR->CSELR &= ~DMA_CSELR_C7S;
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <HAL_DMA_Init+0xfc>)
 8000622:	4c11      	ldr	r4, [pc, #68]	; (8000668 <HAL_DMA_Init+0x128>)
 8000624:	6811      	ldr	r1, [r2, #0]
 8000626:	4021      	ands	r1, r4
 8000628:	6011      	str	r1, [r2, #0]
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << 24U);
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	6811      	ldr	r1, [r2, #0]
 800062e:	061b      	lsls	r3, r3, #24
 8000630:	e7b1      	b.n	8000596 <HAL_DMA_Init+0x56>
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	ffffc00f 	.word	0xffffc00f
 8000638:	40020008 	.word	0x40020008
 800063c:	400200a8 	.word	0x400200a8
 8000640:	4002001c 	.word	0x4002001c
 8000644:	40020030 	.word	0x40020030
 8000648:	fffff0ff 	.word	0xfffff0ff
 800064c:	40020044 	.word	0x40020044
 8000650:	ffff0fff 	.word	0xffff0fff
 8000654:	40020058 	.word	0x40020058
 8000658:	fff0ffff 	.word	0xfff0ffff
 800065c:	4002006c 	.word	0x4002006c
 8000660:	ff0fffff 	.word	0xff0fffff
 8000664:	40020080 	.word	0x40020080
 8000668:	f0ffffff 	.word	0xf0ffffff

0800066c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800066c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800066e:	2502      	movs	r5, #2
  /* Process locked */
  __HAL_LOCK(hdma);
 8000670:	1d47      	adds	r7, r0, #5
 8000672:	7ffe      	ldrb	r6, [r7, #31]
 8000674:	002c      	movs	r4, r5
 8000676:	2e01      	cmp	r6, #1
 8000678:	d01e      	beq.n	80006b8 <HAL_DMA_Start_IT+0x4c>
 800067a:	2601      	movs	r6, #1

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 800067c:	1d84      	adds	r4, r0, #6
  __HAL_LOCK(hdma);
 800067e:	77fe      	strb	r6, [r7, #31]
  hdma->State = HAL_DMA_STATE_BUSY;  
 8000680:	77e5      	strb	r5, [r4, #31]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000682:	6804      	ldr	r4, [r0, #0]
 8000684:	6825      	ldr	r5, [r4, #0]
 8000686:	43b5      	bics	r5, r6
 8000688:	6025      	str	r5, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800068a:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800068c:	6883      	ldr	r3, [r0, #8]
 800068e:	2b10      	cmp	r3, #16
 8000690:	d114      	bne.n	80006bc <HAL_DMA_Start_IT+0x50>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000692:	60a2      	str	r2, [r4, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000694:	60e1      	str	r1, [r4, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8000696:	2302      	movs	r3, #2
 8000698:	6822      	ldr	r2, [r4, #0]
 800069a:	4313      	orrs	r3, r2
 800069c:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 800069e:	2304      	movs	r3, #4
 80006a0:	6822      	ldr	r2, [r4, #0]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 80006a6:	2308      	movs	r3, #8
 80006a8:	6822      	ldr	r2, [r4, #0]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	6023      	str	r3, [r4, #0]
  __HAL_DMA_ENABLE(hdma);   
 80006ae:	2301      	movs	r3, #1
 80006b0:	6822      	ldr	r2, [r4, #0]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	6023      	str	r3, [r4, #0]
  return HAL_OK;    
 80006b6:	2400      	movs	r4, #0
} 
 80006b8:	0020      	movs	r0, r4
 80006ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80006bc:	60a1      	str	r1, [r4, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80006be:	60e2      	str	r2, [r4, #12]
 80006c0:	e7e9      	b.n	8000696 <HAL_DMA_Start_IT+0x2a>
	...

080006c4 <HAL_DMA_IRQHandler>:
{        
 80006c4:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80006c6:	6803      	ldr	r3, [r0, #0]
 80006c8:	4d5b      	ldr	r5, [pc, #364]	; (8000838 <HAL_DMA_IRQHandler+0x174>)
 80006ca:	4e5c      	ldr	r6, [pc, #368]	; (800083c <HAL_DMA_IRQHandler+0x178>)
{        
 80006cc:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80006ce:	6829      	ldr	r1, [r5, #0]
 80006d0:	2208      	movs	r2, #8
 80006d2:	42b3      	cmp	r3, r6
 80006d4:	d015      	beq.n	8000702 <HAL_DMA_IRQHandler+0x3e>
 80006d6:	485a      	ldr	r0, [pc, #360]	; (8000840 <HAL_DMA_IRQHandler+0x17c>)
 80006d8:	3278      	adds	r2, #120	; 0x78
 80006da:	4283      	cmp	r3, r0
 80006dc:	d011      	beq.n	8000702 <HAL_DMA_IRQHandler+0x3e>
 80006de:	4a59      	ldr	r2, [pc, #356]	; (8000844 <HAL_DMA_IRQHandler+0x180>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d100      	bne.n	80006e6 <HAL_DMA_IRQHandler+0x22>
 80006e4:	e084      	b.n	80007f0 <HAL_DMA_IRQHandler+0x12c>
 80006e6:	4a58      	ldr	r2, [pc, #352]	; (8000848 <HAL_DMA_IRQHandler+0x184>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d100      	bne.n	80006ee <HAL_DMA_IRQHandler+0x2a>
 80006ec:	e083      	b.n	80007f6 <HAL_DMA_IRQHandler+0x132>
 80006ee:	4a57      	ldr	r2, [pc, #348]	; (800084c <HAL_DMA_IRQHandler+0x188>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d100      	bne.n	80006f6 <HAL_DMA_IRQHandler+0x32>
 80006f4:	e082      	b.n	80007fc <HAL_DMA_IRQHandler+0x138>
 80006f6:	4a56      	ldr	r2, [pc, #344]	; (8000850 <HAL_DMA_IRQHandler+0x18c>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d100      	bne.n	80006fe <HAL_DMA_IRQHandler+0x3a>
 80006fc:	e081      	b.n	8000802 <HAL_DMA_IRQHandler+0x13e>
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0512      	lsls	r2, r2, #20
 8000702:	4211      	tst	r1, r2
 8000704:	d016      	beq.n	8000734 <HAL_DMA_IRQHandler+0x70>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000706:	2008      	movs	r0, #8
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	4201      	tst	r1, r0
 800070c:	d012      	beq.n	8000734 <HAL_DMA_IRQHandler+0x70>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800070e:	6819      	ldr	r1, [r3, #0]
 8000710:	4381      	bics	r1, r0
 8000712:	6019      	str	r1, [r3, #0]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000714:	2301      	movs	r3, #1
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000716:	606a      	str	r2, [r5, #4]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000718:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800071a:	4313      	orrs	r3, r2
      hdma->State = HAL_DMA_STATE_ERROR;    
 800071c:	2204      	movs	r2, #4
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800071e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma->State = HAL_DMA_STATE_ERROR;    
 8000720:	1da3      	adds	r3, r4, #6
 8000722:	77da      	strb	r2, [r3, #31]
      __HAL_UNLOCK(hdma); 
 8000724:	2200      	movs	r2, #0
 8000726:	1d63      	adds	r3, r4, #5
 8000728:	77da      	strb	r2, [r3, #31]
      if (hdma->XferErrorCallback != NULL)
 800072a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800072c:	4293      	cmp	r3, r2
 800072e:	d001      	beq.n	8000734 <HAL_DMA_IRQHandler+0x70>
        hdma->XferErrorCallback(hdma);
 8000730:	0020      	movs	r0, r4
 8000732:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8000734:	6823      	ldr	r3, [r4, #0]
 8000736:	6829      	ldr	r1, [r5, #0]
 8000738:	2204      	movs	r2, #4
 800073a:	42b3      	cmp	r3, r6
 800073c:	d011      	beq.n	8000762 <HAL_DMA_IRQHandler+0x9e>
 800073e:	4840      	ldr	r0, [pc, #256]	; (8000840 <HAL_DMA_IRQHandler+0x17c>)
 8000740:	323c      	adds	r2, #60	; 0x3c
 8000742:	4283      	cmp	r3, r0
 8000744:	d00d      	beq.n	8000762 <HAL_DMA_IRQHandler+0x9e>
 8000746:	4a3f      	ldr	r2, [pc, #252]	; (8000844 <HAL_DMA_IRQHandler+0x180>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d05d      	beq.n	8000808 <HAL_DMA_IRQHandler+0x144>
 800074c:	4a3e      	ldr	r2, [pc, #248]	; (8000848 <HAL_DMA_IRQHandler+0x184>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d05d      	beq.n	800080e <HAL_DMA_IRQHandler+0x14a>
 8000752:	4a3e      	ldr	r2, [pc, #248]	; (800084c <HAL_DMA_IRQHandler+0x188>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d05d      	beq.n	8000814 <HAL_DMA_IRQHandler+0x150>
 8000758:	4a3d      	ldr	r2, [pc, #244]	; (8000850 <HAL_DMA_IRQHandler+0x18c>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d05d      	beq.n	800081a <HAL_DMA_IRQHandler+0x156>
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	04d2      	lsls	r2, r2, #19
 8000762:	4211      	tst	r1, r2
 8000764:	d012      	beq.n	800078c <HAL_DMA_IRQHandler+0xc8>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000766:	2004      	movs	r0, #4
 8000768:	6819      	ldr	r1, [r3, #0]
 800076a:	4201      	tst	r1, r0
 800076c:	d00e      	beq.n	800078c <HAL_DMA_IRQHandler+0xc8>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	0689      	lsls	r1, r1, #26
 8000772:	d402      	bmi.n	800077a <HAL_DMA_IRQHandler+0xb6>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	4381      	bics	r1, r0
 8000778:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800077a:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 800077c:	2205      	movs	r2, #5
 800077e:	1da3      	adds	r3, r4, #6
 8000780:	77da      	strb	r2, [r3, #31]
      if(hdma->XferHalfCpltCallback != NULL)
 8000782:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <HAL_DMA_IRQHandler+0xc8>
        hdma->XferHalfCpltCallback(hdma);
 8000788:	0020      	movs	r0, r4
 800078a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 800078c:	6823      	ldr	r3, [r4, #0]
 800078e:	6829      	ldr	r1, [r5, #0]
 8000790:	2202      	movs	r2, #2
 8000792:	42b3      	cmp	r3, r6
 8000794:	d011      	beq.n	80007ba <HAL_DMA_IRQHandler+0xf6>
 8000796:	482a      	ldr	r0, [pc, #168]	; (8000840 <HAL_DMA_IRQHandler+0x17c>)
 8000798:	321e      	adds	r2, #30
 800079a:	4283      	cmp	r3, r0
 800079c:	d00d      	beq.n	80007ba <HAL_DMA_IRQHandler+0xf6>
 800079e:	4a29      	ldr	r2, [pc, #164]	; (8000844 <HAL_DMA_IRQHandler+0x180>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d03d      	beq.n	8000820 <HAL_DMA_IRQHandler+0x15c>
 80007a4:	4a28      	ldr	r2, [pc, #160]	; (8000848 <HAL_DMA_IRQHandler+0x184>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d03d      	beq.n	8000826 <HAL_DMA_IRQHandler+0x162>
 80007aa:	4a28      	ldr	r2, [pc, #160]	; (800084c <HAL_DMA_IRQHandler+0x188>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d03d      	beq.n	800082c <HAL_DMA_IRQHandler+0x168>
 80007b0:	4a27      	ldr	r2, [pc, #156]	; (8000850 <HAL_DMA_IRQHandler+0x18c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d03d      	beq.n	8000832 <HAL_DMA_IRQHandler+0x16e>
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	0492      	lsls	r2, r2, #18
 80007ba:	4211      	tst	r1, r2
 80007bc:	d017      	beq.n	80007ee <HAL_DMA_IRQHandler+0x12a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80007be:	2002      	movs	r0, #2
 80007c0:	6819      	ldr	r1, [r3, #0]
 80007c2:	4201      	tst	r1, r0
 80007c4:	d013      	beq.n	80007ee <HAL_DMA_IRQHandler+0x12a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80007c6:	6819      	ldr	r1, [r3, #0]
 80007c8:	0689      	lsls	r1, r1, #26
 80007ca:	d402      	bmi.n	80007d2 <HAL_DMA_IRQHandler+0x10e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	4381      	bics	r1, r0
 80007d0:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80007d2:	606a      	str	r2, [r5, #4]
      hdma->State = HAL_DMA_STATE_READY;    
 80007d4:	2201      	movs	r2, #1
      hdma->ErrorCode |= HAL_DMA_ERROR_NONE;
 80007d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007d8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma->State = HAL_DMA_STATE_READY;    
 80007da:	1da3      	adds	r3, r4, #6
 80007dc:	77da      	strb	r2, [r3, #31]
      __HAL_UNLOCK(hdma);
 80007de:	2200      	movs	r2, #0
 80007e0:	1d63      	adds	r3, r4, #5
 80007e2:	77da      	strb	r2, [r3, #31]
      if(hdma->XferCpltCallback != NULL)
 80007e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d001      	beq.n	80007ee <HAL_DMA_IRQHandler+0x12a>
        hdma->XferCpltCallback(hdma);
 80007ea:	0020      	movs	r0, r4
 80007ec:	4798      	blx	r3
}  
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	e785      	b.n	8000702 <HAL_DMA_IRQHandler+0x3e>
 80007f6:	2280      	movs	r2, #128	; 0x80
 80007f8:	0212      	lsls	r2, r2, #8
 80007fa:	e782      	b.n	8000702 <HAL_DMA_IRQHandler+0x3e>
 80007fc:	2280      	movs	r2, #128	; 0x80
 80007fe:	0312      	lsls	r2, r2, #12
 8000800:	e77f      	b.n	8000702 <HAL_DMA_IRQHandler+0x3e>
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	0412      	lsls	r2, r2, #16
 8000806:	e77c      	b.n	8000702 <HAL_DMA_IRQHandler+0x3e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	00d2      	lsls	r2, r2, #3
 800080c:	e7a9      	b.n	8000762 <HAL_DMA_IRQHandler+0x9e>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	01d2      	lsls	r2, r2, #7
 8000812:	e7a6      	b.n	8000762 <HAL_DMA_IRQHandler+0x9e>
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	02d2      	lsls	r2, r2, #11
 8000818:	e7a3      	b.n	8000762 <HAL_DMA_IRQHandler+0x9e>
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	03d2      	lsls	r2, r2, #15
 800081e:	e7a0      	b.n	8000762 <HAL_DMA_IRQHandler+0x9e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0092      	lsls	r2, r2, #2
 8000824:	e7c9      	b.n	80007ba <HAL_DMA_IRQHandler+0xf6>
 8000826:	2280      	movs	r2, #128	; 0x80
 8000828:	0192      	lsls	r2, r2, #6
 800082a:	e7c6      	b.n	80007ba <HAL_DMA_IRQHandler+0xf6>
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0292      	lsls	r2, r2, #10
 8000830:	e7c3      	b.n	80007ba <HAL_DMA_IRQHandler+0xf6>
 8000832:	2280      	movs	r2, #128	; 0x80
 8000834:	0392      	lsls	r2, r2, #14
 8000836:	e7c0      	b.n	80007ba <HAL_DMA_IRQHandler+0xf6>
 8000838:	40020000 	.word	0x40020000
 800083c:	40020008 	.word	0x40020008
 8000840:	4002001c 	.word	0x4002001c
 8000844:	40020030 	.word	0x40020030
 8000848:	40020044 	.word	0x40020044
 800084c:	40020058 	.word	0x40020058
 8000850:	4002006c 	.word	0x4002006c

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000856:	4a53      	ldr	r2, [pc, #332]	; (80009a4 <HAL_GPIO_Init+0x150>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000858:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800085a:	1882      	adds	r2, r0, r2
 800085c:	1e54      	subs	r4, r2, #1
 800085e:	41a2      	sbcs	r2, r4
{
 8000860:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000862:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000864:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000866:	3205      	adds	r2, #5
 8000868:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800086a:	9a01      	ldr	r2, [sp, #4]
 800086c:	40da      	lsrs	r2, r3
 800086e:	d101      	bne.n	8000874 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8000870:	b005      	add	sp, #20
 8000872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000874:	2501      	movs	r5, #1
 8000876:	409d      	lsls	r5, r3
 8000878:	9a01      	ldr	r2, [sp, #4]
 800087a:	402a      	ands	r2, r5
 800087c:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800087e:	d100      	bne.n	8000882 <HAL_GPIO_Init+0x2e>
 8000880:	e08d      	b.n	800099e <HAL_GPIO_Init+0x14a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000882:	684a      	ldr	r2, [r1, #4]
 8000884:	4694      	mov	ip, r2
 8000886:	2210      	movs	r2, #16
 8000888:	4664      	mov	r4, ip
 800088a:	4394      	bics	r4, r2
 800088c:	0022      	movs	r2, r4
 800088e:	3c01      	subs	r4, #1
 8000890:	2a02      	cmp	r2, #2
 8000892:	d11f      	bne.n	80008d4 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000894:	2407      	movs	r4, #7
 8000896:	270f      	movs	r7, #15
 8000898:	401c      	ands	r4, r3
 800089a:	00a4      	lsls	r4, r4, #2
 800089c:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800089e:	08da      	lsrs	r2, r3, #3
 80008a0:	0092      	lsls	r2, r2, #2
 80008a2:	1882      	adds	r2, r0, r2
 80008a4:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80008a6:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80008a8:	690f      	ldr	r7, [r1, #16]
 80008aa:	40a7      	lsls	r7, r4
 80008ac:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80008ae:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80008b0:	2403      	movs	r4, #3
 80008b2:	005e      	lsls	r6, r3, #1
 80008b4:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80008b6:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80008b8:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ba:	68cc      	ldr	r4, [r1, #12]
 80008bc:	40b4      	lsls	r4, r6
 80008be:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80008c0:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c2:	4662      	mov	r2, ip
 80008c4:	06d2      	lsls	r2, r2, #27
 80008c6:	0fd2      	lsrs	r2, r2, #31
 80008c8:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80008ca:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008cc:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008ce:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80008d0:	6042      	str	r2, [r0, #4]
 80008d2:	e001      	b.n	80008d8 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008d4:	2c01      	cmp	r4, #1
 80008d6:	d9eb      	bls.n	80008b0 <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008d8:	2603      	movs	r6, #3
 80008da:	0034      	movs	r4, r6
 80008dc:	005d      	lsls	r5, r3, #1
 80008de:	40ac      	lsls	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008e0:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008e2:	43e4      	mvns	r4, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008e4:	4032      	ands	r2, r6
 80008e6:	40aa      	lsls	r2, r5
      temp = GPIOx->MODER;
 80008e8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008ea:	4027      	ands	r7, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008ec:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80008ee:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80008f0:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008f2:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80008f4:	688a      	ldr	r2, [r1, #8]
 80008f6:	40aa      	lsls	r2, r5
 80008f8:	4314      	orrs	r4, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008fa:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 80008fc:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008fe:	00d2      	lsls	r2, r2, #3
 8000900:	d54d      	bpl.n	800099e <HAL_GPIO_Init+0x14a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2501      	movs	r5, #1
 8000904:	4c28      	ldr	r4, [pc, #160]	; (80009a8 <HAL_GPIO_Init+0x154>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000906:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000908:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800090a:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800090c:	001d      	movs	r5, r3
 800090e:	4035      	ands	r5, r6
 8000910:	00ad      	lsls	r5, r5, #2
 8000912:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000914:	6362      	str	r2, [r4, #52]	; 0x34
 8000916:	4a25      	ldr	r2, [pc, #148]	; (80009ac <HAL_GPIO_Init+0x158>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8000918:	089c      	lsrs	r4, r3, #2
 800091a:	00a4      	lsls	r4, r4, #2
 800091c:	18a4      	adds	r4, r4, r2
 800091e:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000920:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000922:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000924:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000926:	05ff      	lsls	r7, r7, #23
 8000928:	2200      	movs	r2, #0
 800092a:	42b8      	cmp	r0, r7
 800092c:	d00c      	beq.n	8000948 <HAL_GPIO_Init+0xf4>
 800092e:	4f20      	ldr	r7, [pc, #128]	; (80009b0 <HAL_GPIO_Init+0x15c>)
 8000930:	3201      	adds	r2, #1
 8000932:	42b8      	cmp	r0, r7
 8000934:	d008      	beq.n	8000948 <HAL_GPIO_Init+0xf4>
 8000936:	4f1f      	ldr	r7, [pc, #124]	; (80009b4 <HAL_GPIO_Init+0x160>)
 8000938:	3201      	adds	r2, #1
 800093a:	42b8      	cmp	r0, r7
 800093c:	d004      	beq.n	8000948 <HAL_GPIO_Init+0xf4>
 800093e:	4f1e      	ldr	r7, [pc, #120]	; (80009b8 <HAL_GPIO_Init+0x164>)
 8000940:	0032      	movs	r2, r6
 8000942:	42b8      	cmp	r0, r7
 8000944:	d000      	beq.n	8000948 <HAL_GPIO_Init+0xf4>
 8000946:	9a03      	ldr	r2, [sp, #12]
 8000948:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800094a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800094c:	9d02      	ldr	r5, [sp, #8]
 800094e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000950:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8000952:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <HAL_GPIO_Init+0x168>)
        temp &= ~((uint32_t)iocurrent);
 8000954:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000956:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8000958:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800095a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800095c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800095e:	03ff      	lsls	r7, r7, #15
 8000960:	d401      	bmi.n	8000966 <HAL_GPIO_Init+0x112>
        temp &= ~((uint32_t)iocurrent);
 8000962:	0035      	movs	r5, r6
 8000964:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000966:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8000968:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800096a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800096c:	9d00      	ldr	r5, [sp, #0]
 800096e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000970:	03bf      	lsls	r7, r7, #14
 8000972:	d401      	bmi.n	8000978 <HAL_GPIO_Init+0x124>
        temp &= ~((uint32_t)iocurrent);
 8000974:	0035      	movs	r5, r6
 8000976:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000978:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800097a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800097c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 800097e:	9d00      	ldr	r5, [sp, #0]
 8000980:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000982:	02ff      	lsls	r7, r7, #11
 8000984:	d401      	bmi.n	800098a <HAL_GPIO_Init+0x136>
        temp &= ~((uint32_t)iocurrent);
 8000986:	0035      	movs	r5, r6
 8000988:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800098a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800098c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800098e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000990:	9e00      	ldr	r6, [sp, #0]
 8000992:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000994:	02bf      	lsls	r7, r7, #10
 8000996:	d401      	bmi.n	800099c <HAL_GPIO_Init+0x148>
        temp &= ~((uint32_t)iocurrent);
 8000998:	4025      	ands	r5, r4
 800099a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800099c:	60d6      	str	r6, [r2, #12]
    position++;
 800099e:	3301      	adds	r3, #1
 80009a0:	e763      	b.n	800086a <HAL_GPIO_Init+0x16>
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	afffe400 	.word	0xafffe400
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010000 	.word	0x40010000
 80009b0:	50000400 	.word	0x50000400
 80009b4:	50000800 	.word	0x50000800
 80009b8:	50000c00 	.word	0x50000c00
 80009bc:	40010400 	.word	0x40010400

080009c0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;
  
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  
  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80009c0:	6900      	ldr	r0, [r0, #16]
 80009c2:	4008      	ands	r0, r1
 80009c4:	1e41      	subs	r1, r0, #1
 80009c6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80009c8:	b2c0      	uxtb	r0, r0
}
 80009ca:	4770      	bx	lr

080009cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009d0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80009d2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80009d4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80009d6:	e7fc      	b.n	80009d2 <HAL_GPIO_WritePin+0x6>

080009d8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80009d8:	6943      	ldr	r3, [r0, #20]
 80009da:	4059      	eors	r1, r3
 80009dc:	6141      	str	r1, [r0, #20]
}
 80009de:	4770      	bx	lr

080009e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 80009e4:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d03f      	beq.n	8000a6a <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80009ea:	0025      	movs	r5, r4
 80009ec:	3541      	adds	r5, #65	; 0x41
 80009ee:	782b      	ldrb	r3, [r5, #0]
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d105      	bne.n	8000a02 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80009f6:	0022      	movs	r2, r4
 80009f8:	3240      	adds	r2, #64	; 0x40
 80009fa:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80009fc:	0020      	movs	r0, r4
 80009fe:	f002 f979 	bl	8002cf4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a02:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000a04:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a06:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8000a08:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a0a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	68a6      	ldr	r6, [r4, #8]
 8000a10:	438a      	bics	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000a14:	6861      	ldr	r1, [r4, #4]
 8000a16:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <HAL_I2C_Init+0xa0>)
 8000a18:	400a      	ands	r2, r1
 8000a1a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000a1c:	6899      	ldr	r1, [r3, #8]
 8000a1e:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <HAL_I2C_Init+0xa4>)
 8000a20:	4011      	ands	r1, r2
 8000a22:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a24:	2801      	cmp	r0, #1
 8000a26:	d121      	bne.n	8000a6c <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0209      	lsls	r1, r1, #8
 8000a2c:	4331      	orrs	r1, r6
 8000a2e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000a30:	6858      	ldr	r0, [r3, #4]
 8000a32:	4915      	ldr	r1, [pc, #84]	; (8000a88 <HAL_I2C_Init+0xa8>)
 8000a34:	4301      	orrs	r1, r0
 8000a36:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a38:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a3a:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000a3c:	400a      	ands	r2, r1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000a40:	6961      	ldr	r1, [r4, #20]
 8000a42:	6922      	ldr	r2, [r4, #16]
 8000a44:	430a      	orrs	r2, r1
 8000a46:	69a1      	ldr	r1, [r4, #24]
 8000a48:	0209      	lsls	r1, r1, #8
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a4e:	6a21      	ldr	r1, [r4, #32]
 8000a50:	69e2      	ldr	r2, [r4, #28]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000a56:	2201      	movs	r2, #1
 8000a58:	6819      	ldr	r1, [r3, #0]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000a5e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a60:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000a62:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a64:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a66:	3442      	adds	r4, #66	; 0x42
 8000a68:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000a6c:	2184      	movs	r1, #132	; 0x84
 8000a6e:	0209      	lsls	r1, r1, #8
 8000a70:	4331      	orrs	r1, r6
 8000a72:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000a74:	2802      	cmp	r0, #2
 8000a76:	d1db      	bne.n	8000a30 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	0109      	lsls	r1, r1, #4
 8000a7c:	6059      	str	r1, [r3, #4]
 8000a7e:	e7d7      	b.n	8000a30 <HAL_I2C_Init+0x50>
 8000a80:	f0ffffff 	.word	0xf0ffffff
 8000a84:	ffff7fff 	.word	0xffff7fff
 8000a88:	02008000 	.word	0x02008000

08000a8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a8e:	0004      	movs	r4, r0
 8000a90:	3441      	adds	r4, #65	; 0x41
 8000a92:	7822      	ldrb	r2, [r4, #0]
{
 8000a94:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a96:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000a98:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000a9a:	2a20      	cmp	r2, #32
 8000a9c:	d118      	bne.n	8000ad0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8000a9e:	001d      	movs	r5, r3
 8000aa0:	3540      	adds	r5, #64	; 0x40
 8000aa2:	782e      	ldrb	r6, [r5, #0]
 8000aa4:	2e01      	cmp	r6, #1
 8000aa6:	d013      	beq.n	8000ad0 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8000aa8:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000aaa:	3022      	adds	r0, #34	; 0x22
 8000aac:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000aae:	681e      	ldr	r6, [r3, #0]
 8000ab0:	3823      	subs	r0, #35	; 0x23
 8000ab2:	4386      	bics	r6, r0
 8000ab4:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000ab6:	681e      	ldr	r6, [r3, #0]
 8000ab8:	4f06      	ldr	r7, [pc, #24]	; (8000ad4 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8000aba:	403e      	ands	r6, r7
 8000abc:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8000abe:	681e      	ldr	r6, [r3, #0]
 8000ac0:	4331      	orrs	r1, r6
 8000ac2:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000ac4:	6819      	ldr	r1, [r3, #0]
 8000ac6:	4308      	orrs	r0, r1
 8000ac8:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000aca:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000acc:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8000ace:	7028      	strb	r0, [r5, #0]
  }
}
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	ffffefff 	.word	0xffffefff

08000ad8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ada:	0005      	movs	r5, r0
 8000adc:	3541      	adds	r5, #65	; 0x41
 8000ade:	782a      	ldrb	r2, [r5, #0]
{
 8000ae0:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ae2:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000ae4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ae6:	2a20      	cmp	r2, #32
 8000ae8:	d117      	bne.n	8000b1a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8000aea:	001c      	movs	r4, r3
 8000aec:	3440      	adds	r4, #64	; 0x40
 8000aee:	7826      	ldrb	r6, [r4, #0]
 8000af0:	2e01      	cmp	r6, #1
 8000af2:	d012      	beq.n	8000b1a <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8000af4:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000af6:	3022      	adds	r0, #34	; 0x22
 8000af8:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000afa:	681e      	ldr	r6, [r3, #0]
 8000afc:	3823      	subs	r0, #35	; 0x23
 8000afe:	4386      	bics	r6, r0
 8000b00:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8000b02:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000b04:	4f05      	ldr	r7, [pc, #20]	; (8000b1c <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8000b06:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8000b08:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8000b0a:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8000b0c:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000b0e:	6819      	ldr	r1, [r3, #0]
 8000b10:	4308      	orrs	r0, r1
 8000b12:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8000b14:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000b16:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8000b18:	7020      	strb	r0, [r4, #0]
  }
}
 8000b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b1c:	fffff0ff 	.word	0xfffff0ff

08000b20 <HAL_I2S_Init>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000b20:	b570      	push	{r4, r5, r6, lr}
 8000b22:	0004      	movs	r4, r0
  uint32_t tmp = 0U, i2sclk = 0U, tmpreg = 0U;
  
  /* Check the I2S handle allocation */
  if(hi2s == NULL)
  {
    return HAL_ERROR;
 8000b24:	2001      	movs	r0, #1
  if(hi2s == NULL)
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d04f      	beq.n	8000bca <HAL_I2S_Init+0xaa>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));  
  
  if(hi2s->State == HAL_I2S_STATE_RESET)
 8000b2a:	0025      	movs	r5, r4
 8000b2c:	3535      	adds	r5, #53	; 0x35
 8000b2e:	782b      	ldrb	r3, [r5, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d105      	bne.n	8000b42 <HAL_I2S_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8000b36:	0022      	movs	r2, r4
 8000b38:	3234      	adds	r2, #52	; 0x34
 8000b3a:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8000b3c:	0020      	movs	r0, r4
 8000b3e:	f002 f91b 	bl	8002d78 <HAL_I2S_MspInit>
  }
  
  hi2s->State = HAL_I2S_STATE_BUSY;
 8000b42:	2302      	movs	r3, #2

  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(hi2s->Init.AudioFreq == I2S_AUDIOFREQ_DEFAULT)
 8000b44:	6960      	ldr	r0, [r4, #20]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8000b46:	702b      	strb	r3, [r5, #0]
  if(hi2s->Init.AudioFreq == I2S_AUDIOFREQ_DEFAULT)
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	d023      	beq.n	8000b94 <HAL_I2S_Init+0x74>
      packetlength = 1U;
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2U;
 8000b4c:	68e6      	ldr	r6, [r4, #12]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();    
 8000b4e:	f000 fb6b 	bl	8001228 <HAL_RCC_GetSysClockFreq>
      packetlength = 2U;
 8000b52:	1e73      	subs	r3, r6, #1
 8000b54:	419e      	sbcs	r6, r3

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000b56:	2380      	movs	r3, #128	; 0x80
 8000b58:	6922      	ldr	r2, [r4, #16]
      packetlength = 2U;
 8000b5a:	3601      	adds	r6, #1
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d114      	bne.n	8000b8c <HAL_I2S_Init+0x6c>
    {
      /* MCLK output is enabled */
      tmp = (uint32_t)(((((i2sclk / 256U) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8000b62:	0a00      	lsrs	r0, r0, #8
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / (32U * packetlength)) *10U ) / hi2s->Init.AudioFreq)) + 5U);
 8000b64:	230a      	movs	r3, #10
 8000b66:	6961      	ldr	r1, [r4, #20]
 8000b68:	4358      	muls	r0, r3
 8000b6a:	f7ff facd 	bl	8000108 <__udivsi3>
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;  
 8000b6e:	210a      	movs	r1, #10
      tmp = (uint32_t)(((((i2sclk / (32U * packetlength)) *10U ) / hi2s->Init.AudioFreq)) + 5U);
 8000b70:	3005      	adds	r0, #5
    tmp = tmp / 10U;  
 8000b72:	f7ff fac9 	bl	8000108 <__udivsi3>

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8000b76:	2301      	movs	r3, #1
 8000b78:	4003      	ands	r3, r0

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8000b7a:	1ac0      	subs	r0, r0, r3
 8000b7c:	0840      	lsrs	r0, r0, #1
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t) (i2sodd << 8U);
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000b7e:	1e82      	subs	r2, r0, #2
    i2sodd = (uint32_t) (i2sodd << 8U);
 8000b80:	021b      	lsls	r3, r3, #8
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000b82:	2afd      	cmp	r2, #253	; 0xfd
 8000b84:	d907      	bls.n	8000b96 <HAL_I2S_Init+0x76>
  {
    /* Set the default values */
    i2sdiv = 2U;
    i2sodd = 0U;
 8000b86:	2300      	movs	r3, #0
    i2sdiv = 2U;
 8000b88:	2002      	movs	r0, #2
 8000b8a:	e004      	b.n	8000b96 <HAL_I2S_Init+0x76>
      tmp = (uint32_t)(((((i2sclk / (32U * packetlength)) *10U ) / hi2s->Init.AudioFreq)) + 5U);
 8000b8c:	0171      	lsls	r1, r6, #5
 8000b8e:	f7ff fabb 	bl	8000108 <__udivsi3>
 8000b92:	e7e7      	b.n	8000b64 <HAL_I2S_Init+0x44>
    i2sodd = (uint32_t)0U;
 8000b94:	2300      	movs	r3, #0
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000b96:	4318      	orrs	r0, r3
 8000b98:	6923      	ldr	r3, [r4, #16]
 8000b9a:	6822      	ldr	r2, [r4, #0]
 8000b9c:	4318      	orrs	r0, r3
 8000b9e:	6210      	str	r0, [r2, #32]
  
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG( hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN |\
 8000ba0:	68a3      	ldr	r3, [r4, #8]
 8000ba2:	6860      	ldr	r0, [r4, #4]
 8000ba4:	69d1      	ldr	r1, [r2, #28]
 8000ba6:	4318      	orrs	r0, r3
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	4303      	orrs	r3, r0
 8000bae:	68e0      	ldr	r0, [r4, #12]
 8000bb0:	4303      	orrs	r3, r0
 8000bb2:	69a0      	ldr	r0, [r4, #24]
 8000bb4:	4303      	orrs	r3, r0
 8000bb6:	4805      	ldr	r0, [pc, #20]	; (8000bcc <HAL_I2S_Init+0xac>)
 8000bb8:	4001      	ands	r1, r0
 8000bba:	430b      	orrs	r3, r1
 8000bbc:	61d3      	str	r3, [r2, #28]
                                       (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode |\
                                        hi2s->Init.Standard | hi2s->Init.DataFormat |\
                                        hi2s->Init.CPOL));
										
  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;
 8000bbe:	69d3      	ldr	r3, [r2, #28]
#else
  /* Write to SPIx I2SCFGR */  
  hi2s->Instance->I2SCFGR = tmpreg;
#endif
									
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000bc0:	2000      	movs	r0, #0
  hi2s->Instance->I2SCFGR = tmpreg;
 8000bc2:	61d3      	str	r3, [r2, #28]
  hi2s->State= HAL_I2S_STATE_READY;
 8000bc4:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000bc6:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2s->State= HAL_I2S_STATE_READY;
 8000bc8:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8000bca:	bd70      	pop	{r4, r5, r6, pc}
 8000bcc:	fffff040 	.word	0xfffff040

08000bd0 <HAL_I2S_Transmit_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization 
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8000bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bd2:	0004      	movs	r4, r0
  if((pData == NULL) || (Size == 0U)) 
  {
    return  HAL_ERROR;
 8000bd4:	2001      	movs	r0, #1
  if((pData == NULL) || (Size == 0U)) 
 8000bd6:	2900      	cmp	r1, #0
 8000bd8:	d040      	beq.n	8000c5c <HAL_I2S_Transmit_DMA+0x8c>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	d03e      	beq.n	8000c5c <HAL_I2S_Transmit_DMA+0x8c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8000bde:	0025      	movs	r5, r4
 8000be0:	3534      	adds	r5, #52	; 0x34
 8000be2:	782b      	ldrb	r3, [r5, #0]
 8000be4:	1800      	adds	r0, r0, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d038      	beq.n	8000c5c <HAL_I2S_Transmit_DMA+0x8c>
 8000bea:	2301      	movs	r3, #1

  if(hi2s->State == HAL_I2S_STATE_READY)
 8000bec:	0026      	movs	r6, r4
  __HAL_LOCK(hi2s);
 8000bee:	702b      	strb	r3, [r5, #0]
  if(hi2s->State == HAL_I2S_STATE_READY)
 8000bf0:	3635      	adds	r6, #53	; 0x35
 8000bf2:	7837      	ldrb	r7, [r6, #0]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	2f01      	cmp	r7, #1
 8000bf8:	d131      	bne.n	8000c5e <HAL_I2S_Transmit_DMA+0x8e>
  {  
    hi2s->pTxBuffPtr = pData;
    hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000bfa:	3010      	adds	r0, #16
    hi2s->pTxBuffPtr = pData;
 8000bfc:	61e1      	str	r1, [r4, #28]
    hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8000bfe:	7030      	strb	r0, [r6, #0]
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;

    if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)||\
 8000c00:	6826      	ldr	r6, [r4, #0]
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000c02:	63a3      	str	r3, [r4, #56]	; 0x38
    if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)||\
 8000c04:	69f0      	ldr	r0, [r6, #28]
 8000c06:	3706      	adds	r7, #6
 8000c08:	4038      	ands	r0, r7
 8000c0a:	2803      	cmp	r0, #3
 8000c0c:	d003      	beq.n	8000c16 <HAL_I2S_Transmit_DMA+0x46>
      ((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_32B))
 8000c0e:	69f3      	ldr	r3, [r6, #28]
 8000c10:	403b      	ands	r3, r7
    if(((hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN)) == I2S_DATAFORMAT_24B)||\
 8000c12:	2b05      	cmp	r3, #5
 8000c14:	d101      	bne.n	8000c1a <HAL_I2S_Transmit_DMA+0x4a>
    {
      hi2s->TxXferSize = (Size << 1U);
 8000c16:	0052      	lsls	r2, r2, #1
 8000c18:	b292      	uxth	r2, r2
      hi2s->TxXferCount = (Size << 1U);
    }
    else
    {
      hi2s->TxXferSize = Size;
 8000c1a:	8422      	strh	r2, [r4, #32]
      hi2s->TxXferCount = Size;
 8000c1c:	8462      	strh	r2, [r4, #34]	; 0x22

    /* Set the DMA error callback */
    hi2s->hdmatx->XferErrorCallback = I2S_DMAError;

    /* Enable the Tx DMA Channel */
    HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8000c1e:	0032      	movs	r2, r6
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8000c20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_I2S_Transmit_DMA+0x94>)
    HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8000c24:	320c      	adds	r2, #12
    hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8000c26:	6303      	str	r3, [r0, #48]	; 0x30
    hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8000c28:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_I2S_Transmit_DMA+0x98>)
 8000c2a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_I2S_Transmit_DMA+0x9c>)
 8000c2e:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(hi2s->hdmatx, (uint32_t)hi2s->pTxBuffPtr, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8000c30:	8c23      	ldrh	r3, [r4, #32]
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	f7ff fd1a 	bl	800066c <HAL_DMA_Start_IT>

    /* Check if the I2S is already enabled */ 
    if(HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	6822      	ldr	r2, [r4, #0]
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	69d1      	ldr	r1, [r2, #28]
 8000c40:	4219      	tst	r1, r3
 8000c42:	d102      	bne.n	8000c4a <HAL_I2S_Transmit_DMA+0x7a>
    {
      /* Enable I2S peripheral */
      __HAL_I2S_ENABLE(hi2s);
 8000c44:	69d1      	ldr	r1, [r2, #28]
 8000c46:	430b      	orrs	r3, r1
 8000c48:	61d3      	str	r3, [r2, #28]
    }

    /* Check if the I2S Tx request is already enabled */ 
    if(HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	6851      	ldr	r1, [r2, #4]
 8000c4e:	4219      	tst	r1, r3
 8000c50:	d102      	bne.n	8000c58 <HAL_I2S_Transmit_DMA+0x88>
    {
      /* Enable Tx DMA Request */  
      SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000c52:	6851      	ldr	r1, [r2, #4]
 8000c54:	430b      	orrs	r3, r1
 8000c56:	6053      	str	r3, [r2, #4]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2s);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	7028      	strb	r0, [r5, #0]
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }
}
 8000c5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hi2s);
 8000c5e:	702b      	strb	r3, [r5, #0]
    return HAL_BUSY;
 8000c60:	e7fc      	b.n	8000c5c <HAL_I2S_Transmit_DMA+0x8c>
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	08000c73 	.word	0x08000c73
 8000c68:	08000c7f 	.word	0x08000c7f
 8000c6c:	08000cab 	.word	0x08000cab

08000c70 <HAL_I2S_TxHalfCpltCallback>:
 8000c70:	4770      	bx	lr

08000c72 <I2S_DMATxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8000c72:	b510      	push	{r4, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_I2S_TxHalfCpltCallback(hi2s);
 8000c74:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8000c76:	f7ff fffb 	bl	8000c70 <HAL_I2S_TxHalfCpltCallback>
}
 8000c7a:	bd10      	pop	{r4, pc}

08000c7c <HAL_I2S_TxCpltCallback>:
 8000c7c:	4770      	bx	lr

08000c7e <I2S_DMATxCplt>:
  if(HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8000c7e:	2120      	movs	r1, #32
 8000c80:	6802      	ldr	r2, [r0, #0]
{
 8000c82:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8000c84:	6812      	ldr	r2, [r2, #0]
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8000c86:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if(HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8000c88:	400a      	ands	r2, r1
 8000c8a:	d109      	bne.n	8000ca0 <I2S_DMATxCplt+0x22>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8000c8c:	2402      	movs	r4, #2
 8000c8e:	6818      	ldr	r0, [r3, #0]
 8000c90:	6841      	ldr	r1, [r0, #4]
 8000c92:	43a1      	bics	r1, r4
 8000c94:	6041      	str	r1, [r0, #4]
    hi2s->TxXferCount = 0U;
 8000c96:	845a      	strh	r2, [r3, #34]	; 0x22
    hi2s->State = HAL_I2S_STATE_READY;
 8000c98:	001a      	movs	r2, r3
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	3235      	adds	r2, #53	; 0x35
 8000c9e:	7011      	strb	r1, [r2, #0]
  HAL_I2S_TxCpltCallback(hi2s);
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f7ff ffeb 	bl	8000c7c <HAL_I2S_TxCpltCallback>
}
 8000ca6:	bd10      	pop	{r4, pc}

08000ca8 <HAL_I2S_ErrorCallback>:
}
 8000ca8:	4770      	bx	lr

08000caa <I2S_DMAError>:
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8000caa:	2103      	movs	r1, #3
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8000cac:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8000cae:	b510      	push	{r4, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8000cb0:	6802      	ldr	r2, [r0, #0]
 8000cb2:	6853      	ldr	r3, [r2, #4]
 8000cb4:	438b      	bics	r3, r1
 8000cb6:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	8443      	strh	r3, [r0, #34]	; 0x22
  hi2s->RxXferCount = 0U;
 8000cbc:	8543      	strh	r3, [r0, #42]	; 0x2a

  hi2s->State= HAL_I2S_STATE_READY;
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	3335      	adds	r3, #53	; 0x35
 8000cc4:	701a      	strb	r2, [r3, #0]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	6383      	str	r3, [r0, #56]	; 0x38
  HAL_I2S_ErrorCallback(hi2s);
 8000cce:	f7ff ffeb 	bl	8000ca8 <HAL_I2S_ErrorCallback>
}
 8000cd2:	bd10      	pop	{r4, pc}

08000cd4 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000cd4:	22f0      	movs	r2, #240	; 0xf0
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <RCC_SetFlashLatencyFromMSIRange+0x60>)
{
 8000cd8:	b530      	push	{r4, r5, lr}
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000cda:	68d9      	ldr	r1, [r3, #12]
 8000cdc:	4211      	tst	r1, r2
 8000cde:	d00b      	beq.n	8000cf8 <RCC_SetFlashLatencyFromMSIRange+0x24>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000ce0:	2300      	movs	r3, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4814      	ldr	r0, [pc, #80]	; (8000d38 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8000ce6:	6802      	ldr	r2, [r0, #0]
 8000ce8:	438a      	bics	r2, r1
 8000cea:	431a      	orrs	r2, r3
 8000cec:	6002      	str	r2, [r0, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000cee:	6800      	ldr	r0, [r0, #0]
 8000cf0:	4008      	ands	r0, r1
 8000cf2:	4058      	eors	r0, r3
 8000cf4:	4008      	ands	r0, r1
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000cf6:	bd30      	pop	{r4, r5, pc}
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	22c0      	movs	r2, #192	; 0xc0
 8000cfc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8000cfe:	0549      	lsls	r1, r1, #21
 8000d00:	4c0e      	ldr	r4, [pc, #56]	; (8000d3c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8000d02:	0152      	lsls	r2, r2, #5
 8000d04:	420d      	tst	r5, r1
 8000d06:	d00a      	beq.n	8000d1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000d08:	6823      	ldr	r3, [r4, #0]
 8000d0a:	401a      	ands	r2, r3
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000d0c:	23c0      	movs	r3, #192	; 0xc0
 8000d0e:	015b      	lsls	r3, r3, #5
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d1e5      	bne.n	8000ce0 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8000d16:	18c0      	adds	r0, r0, r3
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000d18:	4243      	negs	r3, r0
 8000d1a:	4143      	adcs	r3, r0
 8000d1c:	e7e1      	b.n	8000ce2 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8000d20:	4329      	orrs	r1, r5
 8000d22:	6399      	str	r1, [r3, #56]	; 0x38
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000d24:	6821      	ldr	r1, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d26:	4c07      	ldr	r4, [pc, #28]	; (8000d44 <RCC_SetFlashLatencyFromMSIRange+0x70>)
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000d28:	400a      	ands	r2, r1
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d2a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d2c:	4021      	ands	r1, r4
 8000d2e:	6399      	str	r1, [r3, #56]	; 0x38
 8000d30:	e7ec      	b.n	8000d0c <RCC_SetFlashLatencyFromMSIRange+0x38>
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	40007000 	.word	0x40007000
 8000d40:	ffff4000 	.word	0xffff4000
 8000d44:	efffffff 	.word	0xefffffff

08000d48 <HAL_RCC_OscConfig>:
{
 8000d48:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d4a:	6803      	ldr	r3, [r0, #0]
{
 8000d4c:	b085      	sub	sp, #20
 8000d4e:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d50:	07db      	lsls	r3, r3, #31
 8000d52:	d44e      	bmi.n	8000df2 <HAL_RCC_OscConfig+0xaa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d54:	6823      	ldr	r3, [r4, #0]
 8000d56:	079b      	lsls	r3, r3, #30
 8000d58:	d500      	bpl.n	8000d5c <HAL_RCC_OscConfig+0x14>
 8000d5a:	e09f      	b.n	8000e9c <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000d5c:	6823      	ldr	r3, [r4, #0]
 8000d5e:	06db      	lsls	r3, r3, #27
 8000d60:	d535      	bpl.n	8000dce <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000d62:	230c      	movs	r3, #12
 8000d64:	4dbc      	ldr	r5, [pc, #752]	; (8001058 <HAL_RCC_OscConfig+0x310>)
 8000d66:	68ea      	ldr	r2, [r5, #12]
 8000d68:	421a      	tst	r2, r3
 8000d6a:	d000      	beq.n	8000d6e <HAL_RCC_OscConfig+0x26>
 8000d6c:	e0e9      	b.n	8000f42 <HAL_RCC_OscConfig+0x1fa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000d6e:	682b      	ldr	r3, [r5, #0]
 8000d70:	059b      	lsls	r3, r3, #22
 8000d72:	d502      	bpl.n	8000d7a <HAL_RCC_OscConfig+0x32>
 8000d74:	69e3      	ldr	r3, [r4, #28]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d050      	beq.n	8000e1c <HAL_RCC_OscConfig+0xd4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d7a:	22e0      	movs	r2, #224	; 0xe0
 8000d7c:	686b      	ldr	r3, [r5, #4]
 8000d7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000d80:	0212      	lsls	r2, r2, #8
 8000d82:	4013      	ands	r3, r2
 8000d84:	4298      	cmp	r0, r3
 8000d86:	d800      	bhi.n	8000d8a <HAL_RCC_OscConfig+0x42>
 8000d88:	e0c9      	b.n	8000f1e <HAL_RCC_OscConfig+0x1d6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d8a:	f7ff ffa3 	bl	8000cd4 <RCC_SetFlashLatencyFromMSIRange>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d144      	bne.n	8000e1c <HAL_RCC_OscConfig+0xd4>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d92:	686b      	ldr	r3, [r5, #4]
 8000d94:	4ab1      	ldr	r2, [pc, #708]	; (800105c <HAL_RCC_OscConfig+0x314>)
 8000d96:	4013      	ands	r3, r2
 8000d98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d9e:	686a      	ldr	r2, [r5, #4]
 8000da0:	6a23      	ldr	r3, [r4, #32]
 8000da2:	0212      	lsls	r2, r2, #8
 8000da4:	061b      	lsls	r3, r3, #24
 8000da6:	0a12      	lsrs	r2, r2, #8
 8000da8:	4313      	orrs	r3, r2
 8000daa:	606b      	str	r3, [r5, #4]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000dae:	68ea      	ldr	r2, [r5, #12]
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000db0:	0b59      	lsrs	r1, r3, #13
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	3101      	adds	r1, #1
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	408b      	lsls	r3, r1
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000dba:	0612      	lsls	r2, r2, #24
 8000dbc:	49a8      	ldr	r1, [pc, #672]	; (8001060 <HAL_RCC_OscConfig+0x318>)
 8000dbe:	0f12      	lsrs	r2, r2, #28
 8000dc0:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000dc2:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000dc4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000dc6:	4aa7      	ldr	r2, [pc, #668]	; (8001064 <HAL_RCC_OscConfig+0x31c>)
 8000dc8:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000dca:	f7ff fb13 	bl	80003f4 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dce:	6823      	ldr	r3, [r4, #0]
 8000dd0:	071b      	lsls	r3, r3, #28
 8000dd2:	d500      	bpl.n	8000dd6 <HAL_RCC_OscConfig+0x8e>
 8000dd4:	e0ec      	b.n	8000fb0 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	075b      	lsls	r3, r3, #29
 8000dda:	d500      	bpl.n	8000dde <HAL_RCC_OscConfig+0x96>
 8000ddc:	e10f      	b.n	8000ffe <HAL_RCC_OscConfig+0x2b6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	069b      	lsls	r3, r3, #26
 8000de2:	d500      	bpl.n	8000de6 <HAL_RCC_OscConfig+0x9e>
 8000de4:	e190      	b.n	8001108 <HAL_RCC_OscConfig+0x3c0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000de6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000de8:	2900      	cmp	r1, #0
 8000dea:	d000      	beq.n	8000dee <HAL_RCC_OscConfig+0xa6>
 8000dec:	e1c0      	b.n	8001170 <HAL_RCC_OscConfig+0x428>
  return HAL_OK;
 8000dee:	2000      	movs	r0, #0
 8000df0:	e015      	b.n	8000e1e <HAL_RCC_OscConfig+0xd6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000df2:	210c      	movs	r1, #12
 8000df4:	4d98      	ldr	r5, [pc, #608]	; (8001058 <HAL_RCC_OscConfig+0x310>)
 8000df6:	68eb      	ldr	r3, [r5, #12]
 8000df8:	400b      	ands	r3, r1
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d008      	beq.n	8000e10 <HAL_RCC_OscConfig+0xc8>
 8000dfe:	2380      	movs	r3, #128	; 0x80
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e00:	68ea      	ldr	r2, [r5, #12]
 8000e02:	025b      	lsls	r3, r3, #9
 8000e04:	400a      	ands	r2, r1
 8000e06:	428a      	cmp	r2, r1
 8000e08:	d10b      	bne.n	8000e22 <HAL_RCC_OscConfig+0xda>
 8000e0a:	68ea      	ldr	r2, [r5, #12]
 8000e0c:	421a      	tst	r2, r3
 8000e0e:	d008      	beq.n	8000e22 <HAL_RCC_OscConfig+0xda>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	682b      	ldr	r3, [r5, #0]
 8000e12:	039b      	lsls	r3, r3, #14
 8000e14:	d59e      	bpl.n	8000d54 <HAL_RCC_OscConfig+0xc>
 8000e16:	6863      	ldr	r3, [r4, #4]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d19b      	bne.n	8000d54 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000e1c:	2001      	movs	r0, #1
}
 8000e1e:	b005      	add	sp, #20
 8000e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e22:	6862      	ldr	r2, [r4, #4]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d112      	bne.n	8000e4e <HAL_RCC_OscConfig+0x106>
 8000e28:	682a      	ldr	r2, [r5, #0]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fb0d 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e34:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	02b6      	lsls	r6, r6, #10
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	4233      	tst	r3, r6
 8000e3c:	d000      	beq.n	8000e40 <HAL_RCC_OscConfig+0xf8>
 8000e3e:	e789      	b.n	8000d54 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fb04 	bl	800044c <HAL_GetTick>
 8000e44:	1bc0      	subs	r0, r0, r7
 8000e46:	2864      	cmp	r0, #100	; 0x64
 8000e48:	d9f6      	bls.n	8000e38 <HAL_RCC_OscConfig+0xf0>
            return HAL_TIMEOUT;
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	e7e7      	b.n	8000e1e <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e4e:	21a0      	movs	r1, #160	; 0xa0
 8000e50:	02c9      	lsls	r1, r1, #11
 8000e52:	428a      	cmp	r2, r1
 8000e54:	d105      	bne.n	8000e62 <HAL_RCC_OscConfig+0x11a>
 8000e56:	2280      	movs	r2, #128	; 0x80
 8000e58:	6829      	ldr	r1, [r5, #0]
 8000e5a:	02d2      	lsls	r2, r2, #11
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	602a      	str	r2, [r5, #0]
 8000e60:	e7e2      	b.n	8000e28 <HAL_RCC_OscConfig+0xe0>
 8000e62:	6829      	ldr	r1, [r5, #0]
 8000e64:	4880      	ldr	r0, [pc, #512]	; (8001068 <HAL_RCC_OscConfig+0x320>)
 8000e66:	4001      	ands	r1, r0
 8000e68:	6029      	str	r1, [r5, #0]
 8000e6a:	6829      	ldr	r1, [r5, #0]
 8000e6c:	400b      	ands	r3, r1
 8000e6e:	9303      	str	r3, [sp, #12]
 8000e70:	9b03      	ldr	r3, [sp, #12]
 8000e72:	497e      	ldr	r1, [pc, #504]	; (800106c <HAL_RCC_OscConfig+0x324>)
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	400b      	ands	r3, r1
 8000e78:	602b      	str	r3, [r5, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d1d7      	bne.n	8000e2e <HAL_RCC_OscConfig+0xe6>
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fae5 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e82:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000e84:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	02b6      	lsls	r6, r6, #10
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	4233      	tst	r3, r6
 8000e8c:	d100      	bne.n	8000e90 <HAL_RCC_OscConfig+0x148>
 8000e8e:	e761      	b.n	8000d54 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e90:	f7ff fadc 	bl	800044c <HAL_GetTick>
 8000e94:	1bc0      	subs	r0, r0, r7
 8000e96:	2864      	cmp	r0, #100	; 0x64
 8000e98:	d9f6      	bls.n	8000e88 <HAL_RCC_OscConfig+0x140>
 8000e9a:	e7d6      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e9c:	210c      	movs	r1, #12
 8000e9e:	4d6e      	ldr	r5, [pc, #440]	; (8001058 <HAL_RCC_OscConfig+0x310>)
 8000ea0:	68ea      	ldr	r2, [r5, #12]
 8000ea2:	400a      	ands	r2, r1
 8000ea4:	2a04      	cmp	r2, #4
 8000ea6:	d006      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ea8:	68eb      	ldr	r3, [r5, #12]
 8000eaa:	400b      	ands	r3, r1
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d110      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x18a>
 8000eb0:	68eb      	ldr	r3, [r5, #12]
 8000eb2:	03db      	lsls	r3, r3, #15
 8000eb4:	d40d      	bmi.n	8000ed2 <HAL_RCC_OscConfig+0x18a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	075b      	lsls	r3, r3, #29
 8000eba:	d502      	bpl.n	8000ec2 <HAL_RCC_OscConfig+0x17a>
 8000ebc:	68e3      	ldr	r3, [r4, #12]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d1ac      	bne.n	8000e1c <HAL_RCC_OscConfig+0xd4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec2:	686a      	ldr	r2, [r5, #4]
 8000ec4:	6923      	ldr	r3, [r4, #16]
 8000ec6:	496a      	ldr	r1, [pc, #424]	; (8001070 <HAL_RCC_OscConfig+0x328>)
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	400a      	ands	r2, r1
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	606b      	str	r3, [r5, #4]
 8000ed0:	e744      	b.n	8000d5c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed2:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000ed4:	682b      	ldr	r3, [r5, #0]
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed6:	2a00      	cmp	r2, #0
 8000ed8:	d010      	beq.n	8000efc <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000eda:	2109      	movs	r1, #9
 8000edc:	438b      	bics	r3, r1
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000ee2:	f7ff fab3 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee6:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000ee8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eea:	682b      	ldr	r3, [r5, #0]
 8000eec:	4233      	tst	r3, r6
 8000eee:	d1e8      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x17a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ef0:	f7ff faac 	bl	800044c <HAL_GetTick>
 8000ef4:	1bc0      	subs	r0, r0, r7
 8000ef6:	2802      	cmp	r0, #2
 8000ef8:	d9f7      	bls.n	8000eea <HAL_RCC_OscConfig+0x1a2>
 8000efa:	e7a6      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI_DISABLE();
 8000efc:	2201      	movs	r2, #1
 8000efe:	4393      	bics	r3, r2
 8000f00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f02:	f7ff faa3 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f06:	2604      	movs	r6, #4
        tickstart = HAL_GetTick();
 8000f08:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0a:	682b      	ldr	r3, [r5, #0]
 8000f0c:	4233      	tst	r3, r6
 8000f0e:	d100      	bne.n	8000f12 <HAL_RCC_OscConfig+0x1ca>
 8000f10:	e724      	b.n	8000d5c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fa9b 	bl	800044c <HAL_GetTick>
 8000f16:	1bc0      	subs	r0, r0, r7
 8000f18:	2802      	cmp	r0, #2
 8000f1a:	d9f6      	bls.n	8000f0a <HAL_RCC_OscConfig+0x1c2>
 8000f1c:	e795      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f1e:	686b      	ldr	r3, [r5, #4]
 8000f20:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_RCC_OscConfig+0x314>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	4303      	orrs	r3, r0
 8000f26:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f28:	686a      	ldr	r2, [r5, #4]
 8000f2a:	6a23      	ldr	r3, [r4, #32]
 8000f2c:	0212      	lsls	r2, r2, #8
 8000f2e:	061b      	lsls	r3, r3, #24
 8000f30:	0a12      	lsrs	r2, r2, #8
 8000f32:	4313      	orrs	r3, r2
 8000f34:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f36:	f7ff fecd 	bl	8000cd4 <RCC_SetFlashLatencyFromMSIRange>
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d100      	bne.n	8000f40 <HAL_RCC_OscConfig+0x1f8>
 8000f3e:	e735      	b.n	8000dac <HAL_RCC_OscConfig+0x64>
 8000f40:	e76c      	b.n	8000e1c <HAL_RCC_OscConfig+0xd4>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f42:	69e3      	ldr	r3, [r4, #28]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d020      	beq.n	8000f8a <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_MSI_ENABLE();
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	682a      	ldr	r2, [r5, #0]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f52:	f7ff fa7b 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000f56:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000f58:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000f5a:	00b6      	lsls	r6, r6, #2
 8000f5c:	682b      	ldr	r3, [r5, #0]
 8000f5e:	4233      	tst	r3, r6
 8000f60:	d00d      	beq.n	8000f7e <HAL_RCC_OscConfig+0x236>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f62:	686b      	ldr	r3, [r5, #4]
 8000f64:	4a3d      	ldr	r2, [pc, #244]	; (800105c <HAL_RCC_OscConfig+0x314>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f6e:	686a      	ldr	r2, [r5, #4]
 8000f70:	6a23      	ldr	r3, [r4, #32]
 8000f72:	0212      	lsls	r2, r2, #8
 8000f74:	061b      	lsls	r3, r3, #24
 8000f76:	0a12      	lsrs	r2, r2, #8
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	606b      	str	r3, [r5, #4]
 8000f7c:	e727      	b.n	8000dce <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fa65 	bl	800044c <HAL_GetTick>
 8000f82:	1bc0      	subs	r0, r0, r7
 8000f84:	2802      	cmp	r0, #2
 8000f86:	d9e9      	bls.n	8000f5c <HAL_RCC_OscConfig+0x214>
 8000f88:	e75f      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_MSI_DISABLE();
 8000f8a:	682b      	ldr	r3, [r5, #0]
 8000f8c:	4a39      	ldr	r2, [pc, #228]	; (8001074 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000f8e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_MSI_DISABLE();
 8000f90:	4013      	ands	r3, r2
 8000f92:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f94:	f7ff fa5a 	bl	800044c <HAL_GetTick>
 8000f98:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000f9a:	00b6      	lsls	r6, r6, #2
 8000f9c:	682b      	ldr	r3, [r5, #0]
 8000f9e:	4233      	tst	r3, r6
 8000fa0:	d100      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x25c>
 8000fa2:	e714      	b.n	8000dce <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fa4:	f7ff fa52 	bl	800044c <HAL_GetTick>
 8000fa8:	1bc0      	subs	r0, r0, r7
 8000faa:	2802      	cmp	r0, #2
 8000fac:	d9f6      	bls.n	8000f9c <HAL_RCC_OscConfig+0x254>
 8000fae:	e74c      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fb0:	6962      	ldr	r2, [r4, #20]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	4d28      	ldr	r5, [pc, #160]	; (8001058 <HAL_RCC_OscConfig+0x310>)
 8000fb6:	2a00      	cmp	r2, #0
 8000fb8:	d010      	beq.n	8000fdc <HAL_RCC_OscConfig+0x294>
      __HAL_RCC_LSI_ENABLE();
 8000fba:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbc:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000fc2:	f7ff fa43 	bl	800044c <HAL_GetTick>
 8000fc6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000fca:	4233      	tst	r3, r6
 8000fcc:	d000      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x288>
 8000fce:	e702      	b.n	8000dd6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fa3c 	bl	800044c <HAL_GetTick>
 8000fd4:	1bc0      	subs	r0, r0, r7
 8000fd6:	2802      	cmp	r0, #2
 8000fd8:	d9f6      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x280>
 8000fda:	e736      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
      __HAL_RCC_LSI_DISABLE();
 8000fdc:	6d2a      	ldr	r2, [r5, #80]	; 0x50
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fde:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000fe0:	439a      	bics	r2, r3
 8000fe2:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000fe4:	f7ff fa32 	bl	800044c <HAL_GetTick>
 8000fe8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000fec:	4233      	tst	r3, r6
 8000fee:	d100      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x2aa>
 8000ff0:	e6f1      	b.n	8000dd6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fa2b 	bl	800044c <HAL_GetTick>
 8000ff6:	1bc0      	subs	r0, r0, r7
 8000ff8:	2802      	cmp	r0, #2
 8000ffa:	d9f6      	bls.n	8000fea <HAL_RCC_OscConfig+0x2a2>
 8000ffc:	e725      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ffe:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001000:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001002:	4d15      	ldr	r5, [pc, #84]	; (8001058 <HAL_RCC_OscConfig+0x310>)
 8001004:	055b      	lsls	r3, r3, #21
 8001006:	6baa      	ldr	r2, [r5, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001008:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800100a:	421a      	tst	r2, r3
 800100c:	d104      	bne.n	8001018 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001010:	4313      	orrs	r3, r2
 8001012:	63ab      	str	r3, [r5, #56]	; 0x38
      pwrclkchanged = SET;
 8001014:	2301      	movs	r3, #1
 8001016:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001018:	2780      	movs	r7, #128	; 0x80
 800101a:	4e17      	ldr	r6, [pc, #92]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 800101c:	007f      	lsls	r7, r7, #1
 800101e:	6833      	ldr	r3, [r6, #0]
 8001020:	423b      	tst	r3, r7
 8001022:	d008      	beq.n	8001036 <HAL_RCC_OscConfig+0x2ee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001024:	2280      	movs	r2, #128	; 0x80
 8001026:	68a3      	ldr	r3, [r4, #8]
 8001028:	0052      	lsls	r2, r2, #1
 800102a:	4293      	cmp	r3, r2
 800102c:	d126      	bne.n	800107c <HAL_RCC_OscConfig+0x334>
 800102e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8001030:	4313      	orrs	r3, r2
 8001032:	652b      	str	r3, [r5, #80]	; 0x50
 8001034:	e047      	b.n	80010c6 <HAL_RCC_OscConfig+0x37e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001036:	6833      	ldr	r3, [r6, #0]
 8001038:	433b      	orrs	r3, r7
 800103a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800103c:	f7ff fa06 	bl	800044c <HAL_GetTick>
 8001040:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001042:	6833      	ldr	r3, [r6, #0]
 8001044:	423b      	tst	r3, r7
 8001046:	d1ed      	bne.n	8001024 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001048:	f7ff fa00 	bl	800044c <HAL_GetTick>
 800104c:	9b01      	ldr	r3, [sp, #4]
 800104e:	1ac0      	subs	r0, r0, r3
 8001050:	2864      	cmp	r0, #100	; 0x64
 8001052:	d9f6      	bls.n	8001042 <HAL_RCC_OscConfig+0x2fa>
 8001054:	e6f9      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	40021000 	.word	0x40021000
 800105c:	ffff1fff 	.word	0xffff1fff
 8001060:	08004972 	.word	0x08004972
 8001064:	20000000 	.word	0x20000000
 8001068:	fffeffff 	.word	0xfffeffff
 800106c:	fffbffff 	.word	0xfffbffff
 8001070:	ffffe0ff 	.word	0xffffe0ff
 8001074:	fffffeff 	.word	0xfffffeff
 8001078:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107c:	2b00      	cmp	r3, #0
 800107e:	d116      	bne.n	80010ae <HAL_RCC_OscConfig+0x366>
 8001080:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001082:	4a60      	ldr	r2, [pc, #384]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001084:	2780      	movs	r7, #128	; 0x80
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001086:	4013      	ands	r3, r2
 8001088:	652b      	str	r3, [r5, #80]	; 0x50
 800108a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800108c:	4a5e      	ldr	r2, [pc, #376]	; (8001208 <HAL_RCC_OscConfig+0x4c0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108e:	00bf      	lsls	r7, r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001090:	4013      	ands	r3, r2
 8001092:	652b      	str	r3, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001094:	f7ff f9da 	bl	800044c <HAL_GetTick>
 8001098:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800109a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800109c:	423b      	tst	r3, r7
 800109e:	d02a      	beq.n	80010f6 <HAL_RCC_OscConfig+0x3ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010a0:	f7ff f9d4 	bl	800044c <HAL_GetTick>
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	1b80      	subs	r0, r0, r6
 80010a8:	4298      	cmp	r0, r3
 80010aa:	d9f6      	bls.n	800109a <HAL_RCC_OscConfig+0x352>
 80010ac:	e6cd      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ae:	21a0      	movs	r1, #160	; 0xa0
 80010b0:	00c9      	lsls	r1, r1, #3
 80010b2:	428b      	cmp	r3, r1
 80010b4:	d10d      	bne.n	80010d2 <HAL_RCC_OscConfig+0x38a>
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	6d29      	ldr	r1, [r5, #80]	; 0x50
 80010ba:	00db      	lsls	r3, r3, #3
 80010bc:	430b      	orrs	r3, r1
 80010be:	652b      	str	r3, [r5, #80]	; 0x50
 80010c0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80010c2:	431a      	orrs	r2, r3
 80010c4:	652a      	str	r2, [r5, #80]	; 0x50
      tickstart = HAL_GetTick();
 80010c6:	f7ff f9c1 	bl	800044c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ca:	2780      	movs	r7, #128	; 0x80
      tickstart = HAL_GetTick();
 80010cc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ce:	00bf      	lsls	r7, r7, #2
 80010d0:	e00e      	b.n	80010f0 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_RCC_OscConfig+0x4bc>)
 80010d6:	4013      	ands	r3, r2
 80010d8:	652b      	str	r3, [r5, #80]	; 0x50
 80010da:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80010dc:	4a4a      	ldr	r2, [pc, #296]	; (8001208 <HAL_RCC_OscConfig+0x4c0>)
 80010de:	4013      	ands	r3, r2
 80010e0:	e7a7      	b.n	8001032 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010e2:	f7ff f9b3 	bl	800044c <HAL_GetTick>
 80010e6:	4b49      	ldr	r3, [pc, #292]	; (800120c <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	1b80      	subs	r0, r0, r6
 80010ea:	4298      	cmp	r0, r3
 80010ec:	d900      	bls.n	80010f0 <HAL_RCC_OscConfig+0x3a8>
 80010ee:	e6ac      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80010f2:	423b      	tst	r3, r7
 80010f4:	d0f5      	beq.n	80010e2 <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 80010f6:	9b00      	ldr	r3, [sp, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d000      	beq.n	80010fe <HAL_RCC_OscConfig+0x3b6>
 80010fc:	e66f      	b.n	8000dde <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001100:	4a43      	ldr	r2, [pc, #268]	; (8001210 <HAL_RCC_OscConfig+0x4c8>)
 8001102:	4013      	ands	r3, r2
 8001104:	63ab      	str	r3, [r5, #56]	; 0x38
 8001106:	e66a      	b.n	8000dde <HAL_RCC_OscConfig+0x96>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001108:	69a1      	ldr	r1, [r4, #24]
 800110a:	2301      	movs	r3, #1
 800110c:	4d41      	ldr	r5, [pc, #260]	; (8001214 <HAL_RCC_OscConfig+0x4cc>)
 800110e:	4a42      	ldr	r2, [pc, #264]	; (8001218 <HAL_RCC_OscConfig+0x4d0>)
 8001110:	2900      	cmp	r1, #0
 8001112:	d018      	beq.n	8001146 <HAL_RCC_OscConfig+0x3fe>
        __HAL_RCC_HSI48_ENABLE();
 8001114:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001116:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_ENABLE();
 8001118:	4319      	orrs	r1, r3
 800111a:	60a9      	str	r1, [r5, #8]
 800111c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800111e:	430b      	orrs	r3, r1
 8001120:	636b      	str	r3, [r5, #52]	; 0x34
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	6a11      	ldr	r1, [r2, #32]
 8001126:	019b      	lsls	r3, r3, #6
 8001128:	430b      	orrs	r3, r1
 800112a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800112c:	f7ff f98e 	bl	800044c <HAL_GetTick>
 8001130:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001132:	68ab      	ldr	r3, [r5, #8]
 8001134:	4233      	tst	r3, r6
 8001136:	d000      	beq.n	800113a <HAL_RCC_OscConfig+0x3f2>
 8001138:	e655      	b.n	8000de6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800113a:	f7ff f987 	bl	800044c <HAL_GetTick>
 800113e:	1bc0      	subs	r0, r0, r7
 8001140:	2802      	cmp	r0, #2
 8001142:	d9f6      	bls.n	8001132 <HAL_RCC_OscConfig+0x3ea>
 8001144:	e681      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
        __HAL_RCC_HSI48_DISABLE();
 8001146:	68a9      	ldr	r1, [r5, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001148:	2602      	movs	r6, #2
        __HAL_RCC_HSI48_DISABLE();
 800114a:	4399      	bics	r1, r3
 800114c:	60a9      	str	r1, [r5, #8]
 800114e:	6a13      	ldr	r3, [r2, #32]
 8001150:	4932      	ldr	r1, [pc, #200]	; (800121c <HAL_RCC_OscConfig+0x4d4>)
 8001152:	400b      	ands	r3, r1
 8001154:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8001156:	f7ff f979 	bl	800044c <HAL_GetTick>
 800115a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800115c:	68ab      	ldr	r3, [r5, #8]
 800115e:	4233      	tst	r3, r6
 8001160:	d100      	bne.n	8001164 <HAL_RCC_OscConfig+0x41c>
 8001162:	e640      	b.n	8000de6 <HAL_RCC_OscConfig+0x9e>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001164:	f7ff f972 	bl	800044c <HAL_GetTick>
 8001168:	1bc0      	subs	r0, r0, r7
 800116a:	2802      	cmp	r0, #2
 800116c:	d9f6      	bls.n	800115c <HAL_RCC_OscConfig+0x414>
 800116e:	e66c      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001170:	220c      	movs	r2, #12
 8001172:	4d28      	ldr	r5, [pc, #160]	; (8001214 <HAL_RCC_OscConfig+0x4cc>)
      return HAL_ERROR;
 8001174:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001176:	68eb      	ldr	r3, [r5, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	4293      	cmp	r3, r2
 800117c:	d100      	bne.n	8001180 <HAL_RCC_OscConfig+0x438>
 800117e:	e64e      	b.n	8000e1e <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8001180:	682b      	ldr	r3, [r5, #0]
 8001182:	4a27      	ldr	r2, [pc, #156]	; (8001220 <HAL_RCC_OscConfig+0x4d8>)
 8001184:	4013      	ands	r3, r2
 8001186:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001188:	2902      	cmp	r1, #2
 800118a:	d12b      	bne.n	80011e4 <HAL_RCC_OscConfig+0x49c>
        tickstart = HAL_GetTick();
 800118c:	f7ff f95e 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001190:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001192:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001194:	04b6      	lsls	r6, r6, #18
 8001196:	682b      	ldr	r3, [r5, #0]
 8001198:	4233      	tst	r3, r6
 800119a:	d11d      	bne.n	80011d8 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800119c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800119e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011a0:	68ea      	ldr	r2, [r5, #12]
 80011a2:	430b      	orrs	r3, r1
 80011a4:	491f      	ldr	r1, [pc, #124]	; (8001224 <HAL_RCC_OscConfig+0x4dc>)
 80011a6:	400a      	ands	r2, r1
 80011a8:	4313      	orrs	r3, r2
 80011aa:	6b62      	ldr	r2, [r4, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ac:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ae:	4313      	orrs	r3, r2
 80011b0:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	682a      	ldr	r2, [r5, #0]
 80011b6:	045b      	lsls	r3, r3, #17
 80011b8:	4313      	orrs	r3, r2
 80011ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011bc:	f7ff f946 	bl	800044c <HAL_GetTick>
 80011c0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c2:	04a4      	lsls	r4, r4, #18
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	4223      	tst	r3, r4
 80011c8:	d000      	beq.n	80011cc <HAL_RCC_OscConfig+0x484>
 80011ca:	e610      	b.n	8000dee <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011cc:	f7ff f93e 	bl	800044c <HAL_GetTick>
 80011d0:	1b80      	subs	r0, r0, r6
 80011d2:	2802      	cmp	r0, #2
 80011d4:	d9f6      	bls.n	80011c4 <HAL_RCC_OscConfig+0x47c>
 80011d6:	e638      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011d8:	f7ff f938 	bl	800044c <HAL_GetTick>
 80011dc:	1bc0      	subs	r0, r0, r7
 80011de:	2802      	cmp	r0, #2
 80011e0:	d9d9      	bls.n	8001196 <HAL_RCC_OscConfig+0x44e>
 80011e2:	e632      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
        tickstart = HAL_GetTick();
 80011e4:	f7ff f932 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e8:	2480      	movs	r4, #128	; 0x80
        tickstart = HAL_GetTick();
 80011ea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ec:	04a4      	lsls	r4, r4, #18
 80011ee:	682b      	ldr	r3, [r5, #0]
 80011f0:	4223      	tst	r3, r4
 80011f2:	d100      	bne.n	80011f6 <HAL_RCC_OscConfig+0x4ae>
 80011f4:	e5fb      	b.n	8000dee <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011f6:	f7ff f929 	bl	800044c <HAL_GetTick>
 80011fa:	1b80      	subs	r0, r0, r6
 80011fc:	2802      	cmp	r0, #2
 80011fe:	d9f6      	bls.n	80011ee <HAL_RCC_OscConfig+0x4a6>
 8001200:	e623      	b.n	8000e4a <HAL_RCC_OscConfig+0x102>
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	fffffeff 	.word	0xfffffeff
 8001208:	fffffbff 	.word	0xfffffbff
 800120c:	00001388 	.word	0x00001388
 8001210:	efffffff 	.word	0xefffffff
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	ffffdfff 	.word	0xffffdfff
 8001220:	feffffff 	.word	0xfeffffff
 8001224:	ff02ffff 	.word	0xff02ffff

08001228 <HAL_RCC_GetSysClockFreq>:
  switch (tmpreg & RCC_CFGR_SWS)
 8001228:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800122a:	4b18      	ldr	r3, [pc, #96]	; (800128c <HAL_RCC_GetSysClockFreq+0x64>)
{
 800122c:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 800122e:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001230:	400a      	ands	r2, r1
 8001232:	2a08      	cmp	r2, #8
 8001234:	d026      	beq.n	8001284 <HAL_RCC_GetSysClockFreq+0x5c>
 8001236:	2a0c      	cmp	r2, #12
 8001238:	d006      	beq.n	8001248 <HAL_RCC_GetSysClockFreq+0x20>
 800123a:	2a04      	cmp	r2, #4
 800123c:	d11a      	bne.n	8001274 <HAL_RCC_GetSysClockFreq+0x4c>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	06db      	lsls	r3, r3, #27
 8001242:	d421      	bmi.n	8001288 <HAL_RCC_GetSysClockFreq+0x60>
        sysclockfreq =  HSI_VALUE;
 8001244:	4812      	ldr	r0, [pc, #72]	; (8001290 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001246:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001248:	028a      	lsls	r2, r1, #10
 800124a:	4812      	ldr	r0, [pc, #72]	; (8001294 <HAL_RCC_GetSysClockFreq+0x6c>)
 800124c:	0f12      	lsrs	r2, r2, #28
 800124e:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8001250:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001252:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
 8001254:	0f89      	lsrs	r1, r1, #30
 8001256:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001258:	03c0      	lsls	r0, r0, #15
 800125a:	d504      	bpl.n	8001266 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 800125c:	480e      	ldr	r0, [pc, #56]	; (8001298 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800125e:	4350      	muls	r0, r2
 8001260:	f7fe ff52 	bl	8000108 <__udivsi3>
 8001264:	e7ef      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	06db      	lsls	r3, r3, #27
 800126a:	d501      	bpl.n	8001270 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <HAL_RCC_GetSysClockFreq+0x74>)
 800126e:	e7f6      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8001270:	4807      	ldr	r0, [pc, #28]	; (8001290 <HAL_RCC_GetSysClockFreq+0x68>)
 8001272:	e7f4      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8001274:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8001276:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 8001278:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 800127a:	041b      	lsls	r3, r3, #16
 800127c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
 800127e:	3301      	adds	r3, #1
 8001280:	4098      	lsls	r0, r3
 8001282:	e7e0      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <HAL_RCC_GetSysClockFreq+0x70>)
 8001286:	e7de      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8001288:	4804      	ldr	r0, [pc, #16]	; (800129c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800128a:	e7dc      	b.n	8001246 <HAL_RCC_GetSysClockFreq+0x1e>
 800128c:	40021000 	.word	0x40021000
 8001290:	00f42400 	.word	0x00f42400
 8001294:	08004982 	.word	0x08004982
 8001298:	007a1200 	.word	0x007a1200
 800129c:	003d0900 	.word	0x003d0900

080012a0 <HAL_RCC_ClockConfig>:
{
 80012a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012a2:	2201      	movs	r2, #1
 80012a4:	4c53      	ldr	r4, [pc, #332]	; (80013f4 <HAL_RCC_ClockConfig+0x154>)
{
 80012a6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012a8:	6823      	ldr	r3, [r4, #0]
{
 80012aa:	9101      	str	r1, [sp, #4]
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80012ac:	4013      	ands	r3, r2
 80012ae:	428b      	cmp	r3, r1
 80012b0:	d328      	bcc.n	8001304 <HAL_RCC_ClockConfig+0x64>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b2:	6832      	ldr	r2, [r6, #0]
 80012b4:	0793      	lsls	r3, r2, #30
 80012b6:	d431      	bmi.n	800131c <HAL_RCC_ClockConfig+0x7c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012b8:	07d3      	lsls	r3, r2, #31
 80012ba:	d437      	bmi.n	800132c <HAL_RCC_ClockConfig+0x8c>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80012bc:	2301      	movs	r3, #1
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	9901      	ldr	r1, [sp, #4]
 80012c2:	401a      	ands	r2, r3
 80012c4:	4291      	cmp	r1, r2
 80012c6:	d200      	bcs.n	80012ca <HAL_RCC_ClockConfig+0x2a>
 80012c8:	e085      	b.n	80013d6 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012ca:	6832      	ldr	r2, [r6, #0]
 80012cc:	4c4a      	ldr	r4, [pc, #296]	; (80013f8 <HAL_RCC_ClockConfig+0x158>)
 80012ce:	0753      	lsls	r3, r2, #29
 80012d0:	d500      	bpl.n	80012d4 <HAL_RCC_ClockConfig+0x34>
 80012d2:	e087      	b.n	80013e4 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d4:	0713      	lsls	r3, r2, #28
 80012d6:	d506      	bpl.n	80012e6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012d8:	68e2      	ldr	r2, [r4, #12]
 80012da:	6933      	ldr	r3, [r6, #16]
 80012dc:	4947      	ldr	r1, [pc, #284]	; (80013fc <HAL_RCC_ClockConfig+0x15c>)
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	400a      	ands	r2, r1
 80012e2:	4313      	orrs	r3, r2
 80012e4:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012e6:	f7ff ff9f 	bl	8001228 <HAL_RCC_GetSysClockFreq>
 80012ea:	68e3      	ldr	r3, [r4, #12]
 80012ec:	4a44      	ldr	r2, [pc, #272]	; (8001400 <HAL_RCC_ClockConfig+0x160>)
 80012ee:	061b      	lsls	r3, r3, #24
 80012f0:	0f1b      	lsrs	r3, r3, #28
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	40d8      	lsrs	r0, r3
 80012f6:	4b43      	ldr	r3, [pc, #268]	; (8001404 <HAL_RCC_ClockConfig+0x164>)
 80012f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff f87a 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 8001300:	2000      	movs	r0, #0
 8001302:	e00a      	b.n	800131a <HAL_RCC_ClockConfig+0x7a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001304:	6823      	ldr	r3, [r4, #0]
 8001306:	9901      	ldr	r1, [sp, #4]
 8001308:	4393      	bics	r3, r2
 800130a:	430b      	orrs	r3, r1
 800130c:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	4013      	ands	r3, r2
 8001312:	9a01      	ldr	r2, [sp, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d0cc      	beq.n	80012b2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8001318:	2001      	movs	r0, #1
}
 800131a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800131c:	20f0      	movs	r0, #240	; 0xf0
 800131e:	4936      	ldr	r1, [pc, #216]	; (80013f8 <HAL_RCC_ClockConfig+0x158>)
 8001320:	68cb      	ldr	r3, [r1, #12]
 8001322:	4383      	bics	r3, r0
 8001324:	68b0      	ldr	r0, [r6, #8]
 8001326:	4303      	orrs	r3, r0
 8001328:	60cb      	str	r3, [r1, #12]
 800132a:	e7c5      	b.n	80012b8 <HAL_RCC_ClockConfig+0x18>
 800132c:	4d32      	ldr	r5, [pc, #200]	; (80013f8 <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800132e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001330:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001332:	2a02      	cmp	r2, #2
 8001334:	d119      	bne.n	800136a <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001336:	039b      	lsls	r3, r3, #14
 8001338:	d5ee      	bpl.n	8001318 <HAL_RCC_ClockConfig+0x78>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133a:	2103      	movs	r1, #3
 800133c:	68eb      	ldr	r3, [r5, #12]
 800133e:	438b      	bics	r3, r1
 8001340:	4313      	orrs	r3, r2
 8001342:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8001344:	f7ff f882 	bl	800044c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001348:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800134a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800134c:	2b02      	cmp	r3, #2
 800134e:	d119      	bne.n	8001384 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001350:	220c      	movs	r2, #12
 8001352:	68eb      	ldr	r3, [r5, #12]
 8001354:	4013      	ands	r3, r2
 8001356:	2b08      	cmp	r3, #8
 8001358:	d0b0      	beq.n	80012bc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800135a:	f7ff f877 	bl	800044c <HAL_GetTick>
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HAL_RCC_ClockConfig+0x168>)
 8001360:	1bc0      	subs	r0, r0, r7
 8001362:	4298      	cmp	r0, r3
 8001364:	d9f4      	bls.n	8001350 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001366:	2003      	movs	r0, #3
 8001368:	e7d7      	b.n	800131a <HAL_RCC_ClockConfig+0x7a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800136a:	2a03      	cmp	r2, #3
 800136c:	d102      	bne.n	8001374 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136e:	019b      	lsls	r3, r3, #6
 8001370:	d4e3      	bmi.n	800133a <HAL_RCC_ClockConfig+0x9a>
 8001372:	e7d1      	b.n	8001318 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001374:	2a01      	cmp	r2, #1
 8001376:	d102      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001378:	075b      	lsls	r3, r3, #29
 800137a:	d4de      	bmi.n	800133a <HAL_RCC_ClockConfig+0x9a>
 800137c:	e7cc      	b.n	8001318 <HAL_RCC_ClockConfig+0x78>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 800137e:	059b      	lsls	r3, r3, #22
 8001380:	d4db      	bmi.n	800133a <HAL_RCC_ClockConfig+0x9a>
 8001382:	e7c9      	b.n	8001318 <HAL_RCC_ClockConfig+0x78>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001384:	2b03      	cmp	r3, #3
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001388:	220c      	movs	r2, #12
 800138a:	68eb      	ldr	r3, [r5, #12]
 800138c:	4013      	ands	r3, r2
 800138e:	4293      	cmp	r3, r2
 8001390:	d100      	bne.n	8001394 <HAL_RCC_ClockConfig+0xf4>
 8001392:	e793      	b.n	80012bc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001394:	f7ff f85a 	bl	800044c <HAL_GetTick>
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <HAL_RCC_ClockConfig+0x168>)
 800139a:	1bc0      	subs	r0, r0, r7
 800139c:	4298      	cmp	r0, r3
 800139e:	d9f3      	bls.n	8001388 <HAL_RCC_ClockConfig+0xe8>
 80013a0:	e7e1      	b.n	8001366 <HAL_RCC_ClockConfig+0xc6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d011      	beq.n	80013ca <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80013a6:	220c      	movs	r2, #12
 80013a8:	68eb      	ldr	r3, [r5, #12]
 80013aa:	4213      	tst	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_RCC_ClockConfig+0x110>
 80013ae:	e785      	b.n	80012bc <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b0:	f7ff f84c 	bl	800044c <HAL_GetTick>
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_RCC_ClockConfig+0x168>)
 80013b6:	1bc0      	subs	r0, r0, r7
 80013b8:	4298      	cmp	r0, r3
 80013ba:	d9f4      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x106>
 80013bc:	e7d3      	b.n	8001366 <HAL_RCC_ClockConfig+0xc6>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013be:	f7ff f845 	bl	800044c <HAL_GetTick>
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_RCC_ClockConfig+0x168>)
 80013c4:	1bc0      	subs	r0, r0, r7
 80013c6:	4298      	cmp	r0, r3
 80013c8:	d8cd      	bhi.n	8001366 <HAL_RCC_ClockConfig+0xc6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ca:	220c      	movs	r2, #12
 80013cc:	68eb      	ldr	r3, [r5, #12]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d1f4      	bne.n	80013be <HAL_RCC_ClockConfig+0x11e>
 80013d4:	e772      	b.n	80012bc <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013d6:	6822      	ldr	r2, [r4, #0]
 80013d8:	439a      	bics	r2, r3
 80013da:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013dc:	6822      	ldr	r2, [r4, #0]
 80013de:	421a      	tst	r2, r3
 80013e0:	d19a      	bne.n	8001318 <HAL_RCC_ClockConfig+0x78>
 80013e2:	e772      	b.n	80012ca <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013e4:	68e3      	ldr	r3, [r4, #12]
 80013e6:	4909      	ldr	r1, [pc, #36]	; (800140c <HAL_RCC_ClockConfig+0x16c>)
 80013e8:	400b      	ands	r3, r1
 80013ea:	68f1      	ldr	r1, [r6, #12]
 80013ec:	430b      	orrs	r3, r1
 80013ee:	60e3      	str	r3, [r4, #12]
 80013f0:	e770      	b.n	80012d4 <HAL_RCC_ClockConfig+0x34>
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40022000 	.word	0x40022000
 80013f8:	40021000 	.word	0x40021000
 80013fc:	ffffc7ff 	.word	0xffffc7ff
 8001400:	08004972 	.word	0x08004972
 8001404:	20000000 	.word	0x20000000
 8001408:	00001388 	.word	0x00001388
 800140c:	fffff8ff 	.word	0xfffff8ff

08001410 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8001410:	4b01      	ldr	r3, [pc, #4]	; (8001418 <HAL_RCC_GetHCLKFreq+0x8>)
 8001412:	6818      	ldr	r0, [r3, #0]
}
 8001414:	4770      	bx	lr
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	20000000 	.word	0x20000000

0800141c <HAL_RCCEx_PeriphCLKConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 800141c:	6803      	ldr	r3, [r0, #0]
{
 800141e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001420:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8001422:	069b      	lsls	r3, r3, #26
 8001424:	d539      	bpl.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001426:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001428:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800142a:	4c5a      	ldr	r4, [pc, #360]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800142c:	055b      	lsls	r3, r3, #21
 800142e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8001430:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001432:	421a      	tst	r2, r3
 8001434:	d104      	bne.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001438:	4313      	orrs	r3, r2
 800143a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 800143c:	2301      	movs	r3, #1
 800143e:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	2780      	movs	r7, #128	; 0x80
 8001442:	4e55      	ldr	r6, [pc, #340]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8001444:	007f      	lsls	r7, r7, #1
 8001446:	6833      	ldr	r3, [r6, #0]
 8001448:	423b      	tst	r3, r7
 800144a:	d05f      	beq.n	800150c <HAL_RCCEx_PeriphCLKConfig+0xf0>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */ 
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800144c:	22c0      	movs	r2, #192	; 0xc0
 800144e:	21c0      	movs	r1, #192	; 0xc0
 8001450:	6820      	ldr	r0, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001452:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001454:	0392      	lsls	r2, r2, #14
 8001456:	4010      	ands	r0, r2
 8001458:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800145a:	401a      	ands	r2, r3
 800145c:	4290      	cmp	r0, r2
 800145e:	d166      	bne.n	800152e <HAL_RCCEx_PeriphCLKConfig+0x112>
        return HAL_ERROR; 
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001460:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001462:	400a      	ands	r2, r1
    
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001464:	d000      	beq.n	8001468 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001466:	e06d      	b.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x128>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001468:	6869      	ldr	r1, [r5, #4]
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	000a      	movs	r2, r1
 800146e:	029b      	lsls	r3, r3, #10
 8001470:	401a      	ands	r2, r3
 8001472:	429a      	cmp	r2, r3
 8001474:	d107      	bne.n	8001486 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	4848      	ldr	r0, [pc, #288]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800147a:	4003      	ands	r3, r0
 800147c:	20c0      	movs	r0, #192	; 0xc0
 800147e:	0380      	lsls	r0, r0, #14
 8001480:	4001      	ands	r1, r0
 8001482:	430b      	orrs	r3, r1
 8001484:	6023      	str	r3, [r4, #0]
 8001486:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001488:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800148a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800148c:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800148e:	2b01      	cmp	r3, #1
 8001490:	d103      	bne.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001494:	4a42      	ldr	r2, [pc, #264]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001496:	4013      	ands	r3, r2
 8001498:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }
  
#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800149a:	682b      	ldr	r3, [r5, #0]
 800149c:	07da      	lsls	r2, r3, #31
 800149e:	d506      	bpl.n	80014ae <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80014a0:	2003      	movs	r0, #3
 80014a2:	493c      	ldr	r1, [pc, #240]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80014a4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80014a6:	4382      	bics	r2, r0
 80014a8:	68a8      	ldr	r0, [r5, #8]
 80014aa:	4302      	orrs	r2, r0
 80014ac:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */
  
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80014ae:	079a      	lsls	r2, r3, #30
 80014b0:	d506      	bpl.n	80014c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80014b2:	200c      	movs	r0, #12
 80014b4:	4937      	ldr	r1, [pc, #220]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80014b6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80014b8:	4382      	bics	r2, r0
 80014ba:	68e8      	ldr	r0, [r5, #12]
 80014bc:	4302      	orrs	r2, r0
 80014be:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
  
  /*------------------------------ LPUART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80014c0:	075a      	lsls	r2, r3, #29
 80014c2:	d506      	bpl.n	80014d2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
    
    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80014c4:	4933      	ldr	r1, [pc, #204]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80014c6:	4837      	ldr	r0, [pc, #220]	; (80015a4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80014c8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80014ca:	4002      	ands	r2, r0
 80014cc:	6928      	ldr	r0, [r5, #16]
 80014ce:	4302      	orrs	r2, r0
 80014d0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80014d2:	071a      	lsls	r2, r3, #28
 80014d4:	d506      	bpl.n	80014e4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80014d6:	492f      	ldr	r1, [pc, #188]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80014d8:	4833      	ldr	r0, [pc, #204]	; (80015a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80014da:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80014dc:	4002      	ands	r2, r0
 80014de:	6968      	ldr	r0, [r5, #20]
 80014e0:	4302      	orrs	r2, r0
 80014e2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }  
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80014e4:	065a      	lsls	r2, r3, #25
 80014e6:	d506      	bpl.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80014e8:	492a      	ldr	r1, [pc, #168]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80014ea:	4830      	ldr	r0, [pc, #192]	; (80015ac <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80014ec:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80014ee:	4002      	ands	r2, r0
 80014f0:	69e8      	ldr	r0, [r5, #28]
 80014f2:	4302      	orrs	r2, r0
 80014f4:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 80014f6:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	d517      	bpl.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80014fc:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80014fe:	492c      	ldr	r1, [pc, #176]	; (80015b0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001500:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001502:	400b      	ands	r3, r1
 8001504:	69a9      	ldr	r1, [r5, #24]
 8001506:	430b      	orrs	r3, r1
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	e00f      	b.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x110>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150c:	6833      	ldr	r3, [r6, #0]
 800150e:	433b      	orrs	r3, r7
 8001510:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001512:	f7fe ff9b 	bl	800044c <HAL_GetTick>
 8001516:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	6833      	ldr	r3, [r6, #0]
 800151a:	423b      	tst	r3, r7
 800151c:	d196      	bne.n	800144c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151e:	f7fe ff95 	bl	800044c <HAL_GetTick>
 8001522:	9b01      	ldr	r3, [sp, #4]
 8001524:	1ac0      	subs	r0, r0, r3
 8001526:	2864      	cmp	r0, #100	; 0x64
 8001528:	d9f6      	bls.n	8001518 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          return HAL_TIMEOUT;
 800152a:	2003      	movs	r0, #3
}
 800152c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800152e:	001a      	movs	r2, r3
 8001530:	400a      	ands	r2, r1
 8001532:	428a      	cmp	r2, r1
 8001534:	d000      	beq.n	8001538 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8001536:	e793      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001538:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR; 
 800153a:	2001      	movs	r0, #1
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800153c:	0392      	lsls	r2, r2, #14
 800153e:	d400      	bmi.n	8001542 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8001540:	e78e      	b.n	8001460 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001542:	e7f3      	b.n	800152c <HAL_RCCEx_PeriphCLKConfig+0x110>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001544:	400b      	ands	r3, r1
 8001546:	429a      	cmp	r2, r3
 8001548:	d100      	bne.n	800154c <HAL_RCCEx_PeriphCLKConfig+0x130>
 800154a:	e78d      	b.n	8001468 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800154c:	682b      	ldr	r3, [r5, #0]
 800154e:	069b      	lsls	r3, r3, #26
 8001550:	d400      	bmi.n	8001554 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8001552:	e789      	b.n	8001468 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001554:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001556:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8001558:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800155a:	0312      	lsls	r2, r2, #12
 800155c:	4302      	orrs	r2, r0
 800155e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001560:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001564:	4814      	ldr	r0, [pc, #80]	; (80015b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001566:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001568:	4002      	ands	r2, r0
 800156a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800156c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800156e:	05cb      	lsls	r3, r1, #23
 8001570:	d400      	bmi.n	8001574 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001572:	e779      	b.n	8001468 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        tickstart = HAL_GetTick();
 8001574:	f7fe ff6a 	bl	800044c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001578:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800157a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157c:	00bf      	lsls	r7, r7, #2
 800157e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001580:	423b      	tst	r3, r7
 8001582:	d000      	beq.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001584:	e770      	b.n	8001468 <HAL_RCCEx_PeriphCLKConfig+0x4c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7fe ff61 	bl	800044c <HAL_GetTick>
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800158c:	1b80      	subs	r0, r0, r6
 800158e:	4298      	cmp	r0, r3
 8001590:	d9f5      	bls.n	800157e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8001592:	e7ca      	b.n	800152a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8001594:	40021000 	.word	0x40021000
 8001598:	40007000 	.word	0x40007000
 800159c:	ffcfffff 	.word	0xffcfffff
 80015a0:	efffffff 	.word	0xefffffff
 80015a4:	fffff3ff 	.word	0xfffff3ff
 80015a8:	ffffcfff 	.word	0xffffcfff
 80015ac:	fbffffff 	.word	0xfbffffff
 80015b0:	fff3ffff 	.word	0xfff3ffff
 80015b4:	fffcffff 	.word	0xfffcffff
 80015b8:	fff7ffff 	.word	0xfff7ffff
 80015bc:	00001388 	.word	0x00001388

080015c0 <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 80015c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015c2:	001d      	movs	r5, r3
 80015c4:	0004      	movs	r4, r0
 80015c6:	000e      	movs	r6, r1
 80015c8:	9201      	str	r2, [sp, #4]
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015ca:	f7fe ff3f 	bl	800044c <HAL_GetTick>

  /* Wait until flag is set */
  if(Status == RESET)
 80015ce:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80015d0:	0007      	movs	r7, r0
  if(Status == RESET)
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d035      	beq.n	8001642 <SPI_WaitOnFlagUntilTimeout+0x82>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	6893      	ldr	r3, [r2, #8]
 80015da:	4033      	ands	r3, r6
 80015dc:	429e      	cmp	r6, r3
 80015de:	d135      	bne.n	800164c <SPI_WaitOnFlagUntilTimeout+0x8c>
    {
      if(Timeout != HAL_MAX_DELAY)
 80015e0:	1c6b      	adds	r3, r5, #1
 80015e2:	d0f9      	beq.n	80015d8 <SPI_WaitOnFlagUntilTimeout+0x18>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015e4:	2d00      	cmp	r5, #0
 80015e6:	d009      	beq.n	80015fc <SPI_WaitOnFlagUntilTimeout+0x3c>
 80015e8:	f7fe ff30 	bl	800044c <HAL_GetTick>
 80015ec:	1bc0      	subs	r0, r0, r7
 80015ee:	4285      	cmp	r5, r0
 80015f0:	d2f1      	bcs.n	80015d6 <SPI_WaitOnFlagUntilTimeout+0x16>
 80015f2:	e003      	b.n	80015fc <SPI_WaitOnFlagUntilTimeout+0x3c>
      if(Timeout != HAL_MAX_DELAY)
 80015f4:	1c6b      	adds	r3, r5, #1
 80015f6:	d025      	beq.n	8001644 <SPI_WaitOnFlagUntilTimeout+0x84>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015f8:	2d00      	cmp	r5, #0
 80015fa:	d11d      	bne.n	8001638 <SPI_WaitOnFlagUntilTimeout+0x78>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (uint32_t)(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80015fc:	21e0      	movs	r1, #224	; 0xe0
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	438a      	bics	r2, r1
 8001604:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	39a0      	subs	r1, #160	; 0xa0
 800160a:	438a      	bics	r2, r1

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800160c:	2180      	movs	r1, #128	; 0x80
          __HAL_SPI_DISABLE(hspi);
 800160e:	601a      	str	r2, [r3, #0]
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001610:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001612:	0189      	lsls	r1, r1, #6
 8001614:	428a      	cmp	r2, r1
 8001616:	d106      	bne.n	8001626 <SPI_WaitOnFlagUntilTimeout+0x66>
          {
            SPI_RESET_CRC(hspi);
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <SPI_WaitOnFlagUntilTimeout+0x90>)
 800161c:	4001      	ands	r1, r0
 800161e:	6019      	str	r1, [r3, #0]
 8001620:	6819      	ldr	r1, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8001626:	0023      	movs	r3, r4
 8001628:	2201      	movs	r2, #1
 800162a:	3351      	adds	r3, #81	; 0x51
 800162c:	701a      	strb	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800162e:	2300      	movs	r3, #0
 8001630:	3450      	adds	r4, #80	; 0x50
 8001632:	7023      	strb	r3, [r4, #0]

          return HAL_TIMEOUT;
 8001634:	2003      	movs	r0, #3
 8001636:	e00a      	b.n	800164e <SPI_WaitOnFlagUntilTimeout+0x8e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001638:	f7fe ff08 	bl	800044c <HAL_GetTick>
 800163c:	1bc0      	subs	r0, r0, r7
 800163e:	4285      	cmp	r5, r0
 8001640:	d3dc      	bcc.n	80015fc <SPI_WaitOnFlagUntilTimeout+0x3c>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	6893      	ldr	r3, [r2, #8]
 8001646:	4033      	ands	r3, r6
 8001648:	429e      	cmp	r6, r3
 800164a:	d1d3      	bne.n	80015f4 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 800164c:	2000      	movs	r0, #0
}
 800164e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001650:	ffffdfff 	.word	0xffffdfff

08001654 <HAL_SPI_Init>:
{
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001658:	2001      	movs	r0, #1
  if(hspi == NULL)
 800165a:	2c00      	cmp	r4, #0
 800165c:	d037      	beq.n	80016ce <HAL_SPI_Init+0x7a>
  if(hspi->State == HAL_SPI_STATE_RESET)
 800165e:	0025      	movs	r5, r4
 8001660:	3551      	adds	r5, #81	; 0x51
 8001662:	782b      	ldrb	r3, [r5, #0]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d105      	bne.n	8001676 <HAL_SPI_Init+0x22>
    hspi->Lock = HAL_UNLOCKED;
 800166a:	0022      	movs	r2, r4
 800166c:	3250      	adds	r2, #80	; 0x50
 800166e:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8001670:	0020      	movs	r0, r4
 8001672:	f001 fc7d 	bl	8002f70 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001676:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001678:	2240      	movs	r2, #64	; 0x40
 800167a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800167c:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800167e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001680:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001682:	4393      	bics	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001686:	6863      	ldr	r3, [r4, #4]
 8001688:	69a2      	ldr	r2, [r4, #24]
 800168a:	4303      	orrs	r3, r0
 800168c:	68e0      	ldr	r0, [r4, #12]
 800168e:	4303      	orrs	r3, r0
 8001690:	6920      	ldr	r0, [r4, #16]
 8001692:	4303      	orrs	r3, r0
 8001694:	6960      	ldr	r0, [r4, #20]
 8001696:	4303      	orrs	r3, r0
 8001698:	69e0      	ldr	r0, [r4, #28]
 800169a:	4303      	orrs	r3, r0
 800169c:	6a20      	ldr	r0, [r4, #32]
 800169e:	4303      	orrs	r3, r0
 80016a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016a2:	4303      	orrs	r3, r0
 80016a4:	2080      	movs	r0, #128	; 0x80
 80016a6:	0080      	lsls	r0, r0, #2
 80016a8:	4010      	ands	r0, r2
 80016aa:	4303      	orrs	r3, r0
 80016ac:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016ae:	2304      	movs	r3, #4
 80016b0:	0c12      	lsrs	r2, r2, #16
 80016b2:	401a      	ands	r2, r3
 80016b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016b6:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016b8:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80016ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80016bc:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80016be:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016c0:	69cb      	ldr	r3, [r1, #28]
 80016c2:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <HAL_SPI_Init+0x7c>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80016c8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016ca:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80016cc:	702b      	strb	r3, [r5, #0]
}
 80016ce:	bd70      	pop	{r4, r5, r6, pc}
 80016d0:	fffff7ff 	.word	0xfffff7ff

080016d4 <HAL_SPI_TransmitReceive>:
{
 80016d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d6:	b085      	sub	sp, #20
 80016d8:	0004      	movs	r4, r0
  __IO uint16_t tmpreg = 0U;
 80016da:	a802      	add	r0, sp, #8
 80016dc:	3006      	adds	r0, #6
 80016de:	9001      	str	r0, [sp, #4]
 80016e0:	2000      	movs	r0, #0
 80016e2:	9d01      	ldr	r5, [sp, #4]
 80016e4:	8028      	strh	r0, [r5, #0]
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80016e6:	0025      	movs	r5, r4
 80016e8:	3551      	adds	r5, #81	; 0x51
 80016ea:	7828      	ldrb	r0, [r5, #0]
 80016ec:	2801      	cmp	r0, #1
 80016ee:	d004      	beq.n	80016fa <HAL_SPI_TransmitReceive+0x26>
 80016f0:	782e      	ldrb	r6, [r5, #0]
    return HAL_BUSY;
 80016f2:	2002      	movs	r0, #2
  if((hspi->State == HAL_SPI_STATE_READY) || (hspi->State == HAL_SPI_STATE_BUSY_RX))
 80016f4:	2e22      	cmp	r6, #34	; 0x22
 80016f6:	d000      	beq.n	80016fa <HAL_SPI_TransmitReceive+0x26>
 80016f8:	e083      	b.n	8001802 <HAL_SPI_TransmitReceive+0x12e>
      return  HAL_ERROR;
 80016fa:	2001      	movs	r0, #1
    if((pTxData == NULL ) || (pRxData == NULL ) || (Size == 0U))
 80016fc:	2900      	cmp	r1, #0
 80016fe:	d100      	bne.n	8001702 <HAL_SPI_TransmitReceive+0x2e>
 8001700:	e07f      	b.n	8001802 <HAL_SPI_TransmitReceive+0x12e>
 8001702:	2a00      	cmp	r2, #0
 8001704:	d100      	bne.n	8001708 <HAL_SPI_TransmitReceive+0x34>
 8001706:	e07c      	b.n	8001802 <HAL_SPI_TransmitReceive+0x12e>
 8001708:	2b00      	cmp	r3, #0
 800170a:	d07a      	beq.n	8001802 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_LOCK(hspi);
 800170c:	0026      	movs	r6, r4
 800170e:	3650      	adds	r6, #80	; 0x50
 8001710:	7830      	ldrb	r0, [r6, #0]
 8001712:	4684      	mov	ip, r0
 8001714:	4667      	mov	r7, ip
    return HAL_BUSY;
 8001716:	2002      	movs	r0, #2
    __HAL_LOCK(hspi);
 8001718:	2f01      	cmp	r7, #1
 800171a:	d072      	beq.n	8001802 <HAL_SPI_TransmitReceive+0x12e>
 800171c:	3801      	subs	r0, #1
 800171e:	7030      	strb	r0, [r6, #0]
    if(hspi->State == HAL_SPI_STATE_READY)
 8001720:	7828      	ldrb	r0, [r5, #0]
 8001722:	2801      	cmp	r0, #1
 8001724:	d101      	bne.n	800172a <HAL_SPI_TransmitReceive+0x56>
      hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001726:	3031      	adds	r0, #49	; 0x31
 8001728:	7028      	strb	r0, [r5, #0]
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800172a:	2000      	movs	r0, #0
    hspi->RxXferSize  = Size;
 800172c:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800172e:	6560      	str	r0, [r4, #84]	; 0x54
    hspi->TxXferSize  = Size; 
 8001730:	86a3      	strh	r3, [r4, #52]	; 0x34
    hspi->RxXferCount = Size;  
 8001732:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->TxXferCount = Size;
 8001734:	86e3      	strh	r3, [r4, #54]	; 0x36
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001736:	2380      	movs	r3, #128	; 0x80
    hspi->RxISR = 0U;
 8001738:	64a0      	str	r0, [r4, #72]	; 0x48
    hspi->TxISR = 0U;
 800173a:	64e0      	str	r0, [r4, #76]	; 0x4c
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800173c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    hspi->pRxBuffPtr  = pRxData;
 800173e:	63a2      	str	r2, [r4, #56]	; 0x38
    hspi->pTxBuffPtr  = pTxData;
 8001740:	6321      	str	r1, [r4, #48]	; 0x30
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001742:	019b      	lsls	r3, r3, #6
 8001744:	4298      	cmp	r0, r3
 8001746:	d107      	bne.n	8001758 <HAL_SPI_TransmitReceive+0x84>
      SPI_RESET_CRC(hspi);
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	4f9d      	ldr	r7, [pc, #628]	; (80019c0 <HAL_SPI_TransmitReceive+0x2ec>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	403a      	ands	r2, r7
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4302      	orrs	r2, r0
 8001756:	601a      	str	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4694      	mov	ip, r2
 800175e:	2240      	movs	r2, #64	; 0x40
 8001760:	4667      	mov	r7, ip
 8001762:	4217      	tst	r7, r2
 8001764:	d102      	bne.n	800176c <HAL_SPI_TransmitReceive+0x98>
      __HAL_SPI_ENABLE(hspi);
 8001766:	681f      	ldr	r7, [r3, #0]
 8001768:	433a      	orrs	r2, r7
 800176a:	601a      	str	r2, [r3, #0]
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	4694      	mov	ip, r2
 8001772:	68e7      	ldr	r7, [r4, #12]
 8001774:	6862      	ldr	r2, [r4, #4]
 8001776:	4567      	cmp	r7, ip
 8001778:	d000      	beq.n	800177c <HAL_SPI_TransmitReceive+0xa8>
 800177a:	e07e      	b.n	800187a <HAL_SPI_TransmitReceive+0x1a6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 800177c:	2a00      	cmp	r2, #0
 800177e:	d006      	beq.n	800178e <HAL_SPI_TransmitReceive+0xba>
 8001780:	2782      	movs	r7, #130	; 0x82
 8001782:	007f      	lsls	r7, r7, #1
 8001784:	42ba      	cmp	r2, r7
 8001786:	d10a      	bne.n	800179e <HAL_SPI_TransmitReceive+0xca>
 8001788:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800178a:	2a01      	cmp	r2, #1
 800178c:	d107      	bne.n	800179e <HAL_SPI_TransmitReceive+0xca>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800178e:	880a      	ldrh	r2, [r1, #0]
        hspi->pTxBuffPtr+=2U;
 8001790:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001792:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001794:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr+=2U;
 8001796:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001798:	3a01      	subs	r2, #1
 800179a:	b292      	uxth	r2, r2
 800179c:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 800179e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80017a0:	2a00      	cmp	r2, #0
 80017a2:	d162      	bne.n	800186a <HAL_SPI_TransmitReceive+0x196>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	0192      	lsls	r2, r2, #6
 80017a8:	4290      	cmp	r0, r2
 80017aa:	d104      	bne.n	80017b6 <HAL_SPI_TransmitReceive+0xe2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	6819      	ldr	r1, [r3, #0]
 80017b0:	0152      	lsls	r2, r2, #5
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80017b6:	2200      	movs	r2, #0
 80017b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80017ba:	2101      	movs	r1, #1
 80017bc:	0020      	movs	r0, r4
 80017be:	f7ff feff 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d11c      	bne.n	8001800 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80017c6:	6822      	ldr	r2, [r4, #0]
 80017c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80017ca:	68d2      	ldr	r2, [r2, #12]
 80017cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 80017ce:	3302      	adds	r3, #2
 80017d0:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 80017d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80017da:	2380      	movs	r3, #128	; 0x80
 80017dc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017de:	019b      	lsls	r3, r3, #6
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d000      	beq.n	80017e6 <HAL_SPI_TransmitReceive+0x112>
 80017e4:	e0c4      	b.n	8001970 <HAL_SPI_TransmitReceive+0x29c>
      if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80017e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017e8:	2200      	movs	r2, #0
 80017ea:	2101      	movs	r1, #1
 80017ec:	0020      	movs	r0, r4
 80017ee:	f7ff fee7 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d100      	bne.n	80017f8 <HAL_SPI_TransmitReceive+0x124>
 80017f6:	e0b4      	b.n	8001962 <HAL_SPI_TransmitReceive+0x28e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80017f8:	2302      	movs	r3, #2
 80017fa:	6d62      	ldr	r2, [r4, #84]	; 0x54
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80017fc:	4313      	orrs	r3, r2
 80017fe:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001800:	2003      	movs	r0, #3
}
 8001802:	b005      	add	sp, #20
 8001804:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8001806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001808:	2200      	movs	r2, #0
 800180a:	2102      	movs	r1, #2
 800180c:	0020      	movs	r0, r4
 800180e:	f7ff fed7 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 8001812:	2800      	cmp	r0, #0
 8001814:	d1f4      	bne.n	8001800 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8001816:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001818:	6822      	ldr	r2, [r4, #0]
 800181a:	8819      	ldrh	r1, [r3, #0]
          hspi->pTxBuffPtr+=2U;
 800181c:	3302      	adds	r3, #2
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 800181e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr+=2U;
 8001820:	6323      	str	r3, [r4, #48]	; 0x30
          hspi->TxXferCount--;
 8001822:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001824:	3b01      	subs	r3, #1
 8001826:	b29b      	uxth	r3, r3
 8001828:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800182a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10a      	bne.n	8001846 <HAL_SPI_TransmitReceive+0x172>
 8001830:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001832:	0019      	movs	r1, r3
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	019b      	lsls	r3, r3, #6
 8001838:	4299      	cmp	r1, r3
 800183a:	d104      	bne.n	8001846 <HAL_SPI_TransmitReceive+0x172>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800183c:	2180      	movs	r1, #128	; 0x80
 800183e:	6813      	ldr	r3, [r2, #0]
 8001840:	0149      	lsls	r1, r1, #5
 8001842:	430b      	orrs	r3, r1
 8001844:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001848:	2200      	movs	r2, #0
 800184a:	2101      	movs	r1, #1
 800184c:	0020      	movs	r0, r4
 800184e:	f7ff feb7 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 8001852:	2800      	cmp	r0, #0
 8001854:	d1d4      	bne.n	8001800 <HAL_SPI_TransmitReceive+0x12c>
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001856:	6822      	ldr	r2, [r4, #0]
 8001858:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800185a:	68d2      	ldr	r2, [r2, #12]
 800185c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr+=2U;
 800185e:	3302      	adds	r3, #2
 8001860:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->RxXferCount--;
 8001862:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001864:	3b01      	subs	r3, #1
 8001866:	b29b      	uxth	r3, r3
 8001868:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 800186a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1ca      	bne.n	8001806 <HAL_SPI_TransmitReceive+0x132>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 8001870:	6862      	ldr	r2, [r4, #4]
 8001872:	2a00      	cmp	r2, #0
 8001874:	d1b1      	bne.n	80017da <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001878:	e79f      	b.n	80017ba <HAL_SPI_TransmitReceive+0xe6>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->TxXferCount == 0x01U)))
 800187a:	2a00      	cmp	r2, #0
 800187c:	d006      	beq.n	800188c <HAL_SPI_TransmitReceive+0x1b8>
 800187e:	2782      	movs	r7, #130	; 0x82
 8001880:	007f      	lsls	r7, r7, #1
 8001882:	42ba      	cmp	r2, r7
 8001884:	d10a      	bne.n	800189c <HAL_SPI_TransmitReceive+0x1c8>
 8001886:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001888:	2a01      	cmp	r2, #1
 800188a:	d107      	bne.n	800189c <HAL_SPI_TransmitReceive+0x1c8>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 800188c:	1c4a      	adds	r2, r1, #1
 800188e:	6322      	str	r2, [r4, #48]	; 0x30
 8001890:	780a      	ldrb	r2, [r1, #0]
 8001892:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001894:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001896:	3a01      	subs	r2, #1
 8001898:	b292      	uxth	r2, r2
 800189a:	86e2      	strh	r2, [r4, #54]	; 0x36
      if(hspi->TxXferCount == 0U)
 800189c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800189e:	2a00      	cmp	r2, #0
 80018a0:	d149      	bne.n	8001936 <HAL_SPI_TransmitReceive+0x262>
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0192      	lsls	r2, r2, #6
 80018a6:	4290      	cmp	r0, r2
 80018a8:	d104      	bne.n	80018b4 <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	6819      	ldr	r1, [r3, #0]
 80018ae:	0152      	lsls	r2, r2, #5
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 80018b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018b6:	2200      	movs	r2, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	0020      	movs	r0, r4
 80018bc:	f7ff fe80 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d19d      	bne.n	8001800 <HAL_SPI_TransmitReceive+0x12c>
        (*hspi->pRxBuffPtr) = hspi->Instance->DR;
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	7013      	strb	r3, [r2, #0]
 80018cc:	e781      	b.n	80017d2 <HAL_SPI_TransmitReceive+0xfe>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80018ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018d0:	2200      	movs	r2, #0
 80018d2:	2102      	movs	r1, #2
 80018d4:	0020      	movs	r0, r4
 80018d6:	f7ff fe73 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 80018da:	2800      	cmp	r0, #0
 80018dc:	d000      	beq.n	80018e0 <HAL_SPI_TransmitReceive+0x20c>
 80018de:	e78f      	b.n	8001800 <HAL_SPI_TransmitReceive+0x12c>
          hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 80018e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80018e2:	6822      	ldr	r2, [r4, #0]
 80018e4:	1c59      	adds	r1, r3, #1
 80018e6:	6321      	str	r1, [r4, #48]	; 0x30
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount--;
 80018ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	86e3      	strh	r3, [r4, #54]	; 0x36
          if((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80018f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10a      	bne.n	8001910 <HAL_SPI_TransmitReceive+0x23c>
 80018fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018fc:	0019      	movs	r1, r3
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	4299      	cmp	r1, r3
 8001904:	d104      	bne.n	8001910 <HAL_SPI_TransmitReceive+0x23c>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	6813      	ldr	r3, [r2, #0]
 800190a:	0149      	lsls	r1, r1, #5
 800190c:	430b      	orrs	r3, r1
 800190e:	6013      	str	r3, [r2, #0]
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001912:	2200      	movs	r2, #0
 8001914:	2101      	movs	r1, #1
 8001916:	0020      	movs	r0, r4
 8001918:	f7ff fe52 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 800191c:	2800      	cmp	r0, #0
 800191e:	d000      	beq.n	8001922 <HAL_SPI_TransmitReceive+0x24e>
 8001920:	e76e      	b.n	8001800 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001922:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	63a2      	str	r2, [r4, #56]	; 0x38
 8001928:	6822      	ldr	r2, [r4, #0]
 800192a:	68d2      	ldr	r2, [r2, #12]
 800192c:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 800192e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001930:	3b01      	subs	r3, #1
 8001932:	b29b      	uxth	r3, r3
 8001934:	87e3      	strh	r3, [r4, #62]	; 0x3e
        while(hspi->TxXferCount > 0U)
 8001936:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1c8      	bne.n	80018ce <HAL_SPI_TransmitReceive+0x1fa>
        if(hspi->Init.Mode == SPI_MODE_SLAVE)
 800193c:	6862      	ldr	r2, [r4, #4]
 800193e:	2a00      	cmp	r2, #0
 8001940:	d000      	beq.n	8001944 <HAL_SPI_TransmitReceive+0x270>
 8001942:	e74a      	b.n	80017da <HAL_SPI_TransmitReceive+0x106>
          if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout) != HAL_OK)
 8001944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001946:	2101      	movs	r1, #1
 8001948:	0020      	movs	r0, r4
 800194a:	f7ff fe39 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 800194e:	2800      	cmp	r0, #0
 8001950:	d000      	beq.n	8001954 <HAL_SPI_TransmitReceive+0x280>
 8001952:	e755      	b.n	8001800 <HAL_SPI_TransmitReceive+0x12c>
          (*hspi->pRxBuffPtr++) = hspi->Instance->DR;
 8001954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	63a2      	str	r2, [r4, #56]	; 0x38
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	68d2      	ldr	r2, [r2, #12]
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	e737      	b.n	80017d2 <HAL_SPI_TransmitReceive+0xfe>
      tmpreg = hspi->Instance->DR;
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	9a01      	ldr	r2, [sp, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	b29b      	uxth	r3, r3
 800196a:	8013      	strh	r3, [r2, #0]
      UNUSED(tmpreg);		/* avoid warning on tmpreg affectation with stupid compiler */
 800196c:	0013      	movs	r3, r2
 800196e:	881b      	ldrh	r3, [r3, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8001970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001972:	2201      	movs	r2, #1
 8001974:	2180      	movs	r1, #128	; 0x80
 8001976:	0020      	movs	r0, r4
 8001978:	f7ff fe22 	bl	80015c0 <SPI_WaitOnFlagUntilTimeout>
 800197c:	2800      	cmp	r0, #0
 800197e:	d002      	beq.n	8001986 <HAL_SPI_TransmitReceive+0x2b2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001980:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001982:	2320      	movs	r3, #32
 8001984:	e73a      	b.n	80017fc <HAL_SPI_TransmitReceive+0x128>
    hspi->State = HAL_SPI_STATE_READY;
 8001986:	2701      	movs	r7, #1
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    hspi->State = HAL_SPI_STATE_READY;
 800198c:	702f      	strb	r7, [r5, #0]
    if((hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET))
 800198e:	019b      	lsls	r3, r3, #6
 8001990:	429a      	cmp	r2, r3
 8001992:	d111      	bne.n	80019b8 <HAL_SPI_TransmitReceive+0x2e4>
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	06c9      	lsls	r1, r1, #27
 800199a:	d50d      	bpl.n	80019b8 <HAL_SPI_TransmitReceive+0x2e4>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800199c:	2102      	movs	r1, #2
 800199e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80019a0:	4329      	orrs	r1, r5
 80019a2:	6561      	str	r1, [r4, #84]	; 0x54
      SPI_RESET_CRC(hspi);
 80019a4:	6819      	ldr	r1, [r3, #0]
 80019a6:	4c06      	ldr	r4, [pc, #24]	; (80019c0 <HAL_SPI_TransmitReceive+0x2ec>)
 80019a8:	4021      	ands	r1, r4
 80019aa:	6019      	str	r1, [r3, #0]
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hspi);
 80019b2:	7030      	strb	r0, [r6, #0]
      return HAL_ERROR; 
 80019b4:	0038      	movs	r0, r7
 80019b6:	e724      	b.n	8001802 <HAL_SPI_TransmitReceive+0x12e>
    __HAL_UNLOCK(hspi);
 80019b8:	2300      	movs	r3, #0
 80019ba:	7033      	strb	r3, [r6, #0]
    return HAL_OK;
 80019bc:	e721      	b.n	8001802 <HAL_SPI_TransmitReceive+0x12e>
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	ffffdfff 	.word	0xffffdfff

080019c4 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	if (SD_ff_hw.initialized)
 80019c4:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <disk_status+0xc>)
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	4243      	negs	r3, r0
 80019ca:	4158      	adcs	r0, r3
 80019cc:	b2c0      	uxtb	r0, r0
		return 0;

	return STA_NOINIT;
}
 80019ce:	4770      	bx	lr
 80019d0:	2000009c 	.word	0x2000009c

080019d4 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80019d4:	b510      	push	{r4, lr}
	if (hwif_init(&SD_ff_hw) == 0)
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <disk_initialize+0x10>)
 80019d8:	f000 fc64 	bl	80022a4 <hwif_init>
 80019dc:	1e43      	subs	r3, r0, #1
 80019de:	4198      	sbcs	r0, r3
		return 0;

	return STA_NOINIT;
}
 80019e0:	b2c0      	uxtb	r0, r0
 80019e2:	bd10      	pop	{r4, pc}
 80019e4:	2000009c 	.word	0x2000009c

080019e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	0014      	movs	r4, r2
 80019ec:	000d      	movs	r5, r1
 80019ee:	189e      	adds	r6, r3, r2
	int i;

	for (i=0; i<count; i++)
 80019f0:	42b4      	cmp	r4, r6
 80019f2:	d101      	bne.n	80019f8 <disk_read+0x10>
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
			return RES_ERROR;

	return RES_OK;
 80019f4:	2000      	movs	r0, #0
}
 80019f6:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_read(&SD_ff_hw, sector+i, buff+512*i) != 0)
 80019f8:	002a      	movs	r2, r5
 80019fa:	0021      	movs	r1, r4
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <disk_read+0x2c>)
 80019fe:	f000 fe59 	bl	80026b4 <sd_read>
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	3401      	adds	r4, #1
 8001a08:	18ed      	adds	r5, r5, r3
 8001a0a:	2800      	cmp	r0, #0
 8001a0c:	d0f0      	beq.n	80019f0 <disk_read+0x8>
			return RES_ERROR;
 8001a0e:	2001      	movs	r0, #1
 8001a10:	e7f1      	b.n	80019f6 <disk_read+0xe>
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	2000009c 	.word	0x2000009c

08001a18 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	0014      	movs	r4, r2
 8001a1c:	000d      	movs	r5, r1
 8001a1e:	189e      	adds	r6, r3, r2
	int i;

	for (i=0; i<count; i++)
 8001a20:	42b4      	cmp	r4, r6
 8001a22:	d101      	bne.n	8001a28 <disk_write+0x10>
		if (sd_write(&SD_ff_hw, sector+i, buff+512*i) != 0)
			return RES_ERROR;

	return RES_OK;
 8001a24:	2000      	movs	r0, #0
}
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
		if (sd_write(&SD_ff_hw, sector+i, buff+512*i) != 0)
 8001a28:	002a      	movs	r2, r5
 8001a2a:	0021      	movs	r1, r4
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <disk_write+0x2c>)
 8001a2e:	f000 fe69 	bl	8002704 <sd_write>
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	3401      	adds	r4, #1
 8001a38:	18ed      	adds	r5, r5, r3
 8001a3a:	2800      	cmp	r0, #0
 8001a3c:	d0f0      	beq.n	8001a20 <disk_write+0x8>
			return RES_ERROR;
 8001a3e:	2001      	movs	r0, #1
 8001a40:	e7f1      	b.n	8001a26 <disk_write+0xe>
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	2000009c 	.word	0x2000009c

08001a48 <crc7_one>:
	int i;
	const uint8_t g = 0x89;
	t ^= data;
	for (i=0; i<8; i++) {
		if (t & 0x80)
			t ^= g;
 8001a48:	2277      	movs	r2, #119	; 0x77
	t ^= data;
 8001a4a:	2308      	movs	r3, #8
 8001a4c:	4048      	eors	r0, r1
			t ^= g;
 8001a4e:	4252      	negs	r2, r2
		if (t & 0x80)
 8001a50:	b241      	sxtb	r1, r0
 8001a52:	2900      	cmp	r1, #0
 8001a54:	da01      	bge.n	8001a5a <crc7_one+0x12>
			t ^= g;
 8001a56:	4050      	eors	r0, r2
 8001a58:	b2c0      	uxtb	r0, r0
		t <<= 1;
 8001a5a:	0040      	lsls	r0, r0, #1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b2c0      	uxtb	r0, r0
	for (i=0; i<8; i++) {
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f5      	bne.n	8001a50 <crc7_one+0x8>
	}
	return t;
}
 8001a64:	4770      	bx	lr
	...

08001a68 <print_r1>:
	return 0x01;
}


static void print_r1(uint8_t r)
{
 8001a68:	b570      	push	{r4, r5, r6, lr}
	int i;
	printf("R1: %02x\n", r);
 8001a6a:	0001      	movs	r1, r0
{
 8001a6c:	0005      	movs	r5, r0
	printf("R1: %02x\n", r);
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <print_r1+0x2c>)
 8001a70:	f001 fc12 	bl	8003298 <iprintf>
	for (i=0; i<7; i++)
 8001a74:	2400      	movs	r4, #0
		if (r & (1<<i))
 8001a76:	2601      	movs	r6, #1
 8001a78:	002b      	movs	r3, r5
 8001a7a:	4123      	asrs	r3, r4
 8001a7c:	4233      	tst	r3, r6
 8001a7e:	d005      	beq.n	8001a8c <print_r1+0x24>
			printf("  %s\n", r1_strings[i]);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <print_r1+0x30>)
 8001a82:	00a2      	lsls	r2, r4, #2
 8001a84:	58d1      	ldr	r1, [r2, r3]
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <print_r1+0x34>)
 8001a88:	f001 fc06 	bl	8003298 <iprintf>
	for (i=0; i<7; i++)
 8001a8c:	3401      	adds	r4, #1
 8001a8e:	2c07      	cmp	r4, #7
 8001a90:	d1f2      	bne.n	8001a78 <print_r1+0x10>
}
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
 8001a94:	080045ed 	.word	0x080045ed
 8001a98:	08004600 	.word	0x08004600
 8001a9c:	080045f7 	.word	0x080045f7

08001aa0 <spi_txrx>:
{
 8001aa0:	b510      	push	{r4, lr}
	uint8_t out = 0;
 8001aa2:	2417      	movs	r4, #23
 8001aa4:	2300      	movs	r3, #0
{
 8001aa6:	b086      	sub	sp, #24
	uint8_t out = 0;
 8001aa8:	446c      	add	r4, sp
 8001aaa:	7023      	strb	r3, [r4, #0]
{
 8001aac:	210f      	movs	r1, #15
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), 0x1000);
 8001aae:	2380      	movs	r3, #128	; 0x80
{
 8001ab0:	4469      	add	r1, sp
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), 0x1000);
 8001ab2:	015b      	lsls	r3, r3, #5
{
 8001ab4:	7008      	strb	r0, [r1, #0]
	HAL_SPI_TransmitReceive(&FAT_SD_SPI, &data, &out, sizeof(data), 0x1000);
 8001ab6:	0022      	movs	r2, r4
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <spi_txrx+0x28>)
 8001abc:	2301      	movs	r3, #1
 8001abe:	f7ff fe09 	bl	80016d4 <HAL_SPI_TransmitReceive>
	return out;
 8001ac2:	7820      	ldrb	r0, [r4, #0]
}
 8001ac4:	b006      	add	sp, #24
 8001ac6:	bd10      	pop	{r4, pc}
 8001ac8:	200003a4 	.word	0x200003a4

08001acc <sd_cmd>:
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
	spi_txrx(0x40 | cmd);
 8001ace:	2540      	movs	r5, #64	; 0x40
 8001ad0:	4305      	orrs	r5, r0
 8001ad2:	0028      	movs	r0, r5
{
 8001ad4:	000c      	movs	r4, r1
	spi_txrx(0x40 | cmd);
 8001ad6:	f7ff ffe3 	bl	8001aa0 <spi_txrx>
	crc = crc7_one(crc, 0x40 | cmd);
 8001ada:	0029      	movs	r1, r5
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff ffb3 	bl	8001a48 <crc7_one>
 8001ae2:	0006      	movs	r6, r0
	spi_txrx(arg >> 24);
 8001ae4:	0e25      	lsrs	r5, r4, #24
 8001ae6:	0028      	movs	r0, r5
 8001ae8:	f7ff ffda 	bl	8001aa0 <spi_txrx>
	crc = crc7_one(crc, arg >> 24);
 8001aec:	0029      	movs	r1, r5
 8001aee:	0030      	movs	r0, r6
 8001af0:	f7ff ffaa 	bl	8001a48 <crc7_one>
 8001af4:	0006      	movs	r6, r0
	spi_txrx(arg >> 16);
 8001af6:	0c25      	lsrs	r5, r4, #16
 8001af8:	b2ed      	uxtb	r5, r5
 8001afa:	0028      	movs	r0, r5
 8001afc:	f7ff ffd0 	bl	8001aa0 <spi_txrx>
	crc = crc7_one(crc, arg >> 16);
 8001b00:	0029      	movs	r1, r5
 8001b02:	0030      	movs	r0, r6
 8001b04:	f7ff ffa0 	bl	8001a48 <crc7_one>
 8001b08:	0006      	movs	r6, r0
	spi_txrx(arg >> 8);
 8001b0a:	0a25      	lsrs	r5, r4, #8
 8001b0c:	b2ed      	uxtb	r5, r5
 8001b0e:	0028      	movs	r0, r5
 8001b10:	f7ff ffc6 	bl	8001aa0 <spi_txrx>
	crc = crc7_one(crc, arg >> 8);
 8001b14:	0029      	movs	r1, r5
 8001b16:	0030      	movs	r0, r6
 8001b18:	f7ff ff96 	bl	8001a48 <crc7_one>
 8001b1c:	0005      	movs	r5, r0
	spi_txrx(arg);
 8001b1e:	b2e4      	uxtb	r4, r4
 8001b20:	0020      	movs	r0, r4
 8001b22:	f7ff ffbd 	bl	8001aa0 <spi_txrx>
	crc = crc7_one(crc, arg);
 8001b26:	0021      	movs	r1, r4
 8001b28:	0028      	movs	r0, r5
 8001b2a:	f7ff ff8d 	bl	8001a48 <crc7_one>
 8001b2e:	0003      	movs	r3, r0
	spi_txrx(crc | 0x1);	/* crc7, for cmd0 */
 8001b30:	2001      	movs	r0, #1
 8001b32:	4318      	orrs	r0, r3
 8001b34:	b2c0      	uxtb	r0, r0
 8001b36:	f7ff ffb3 	bl	8001aa0 <spi_txrx>
}
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}

08001b3c <sd_get_r1>:
{
 8001b3c:	b510      	push	{r4, lr}
	while (tries--) {
 8001b3e:	4c05      	ldr	r4, [pc, #20]	; (8001b54 <sd_get_r1+0x18>)
 8001b40:	3c01      	subs	r4, #1
		r = spi_txrx(0xff);
 8001b42:	20ff      	movs	r0, #255	; 0xff
	while (tries--) {
 8001b44:	2c00      	cmp	r4, #0
 8001b46:	d003      	beq.n	8001b50 <sd_get_r1+0x14>
		r = spi_txrx(0xff);
 8001b48:	f7ff ffaa 	bl	8001aa0 <spi_txrx>
		if ((r & 0x80) == 0)
 8001b4c:	0603      	lsls	r3, r0, #24
 8001b4e:	d4f7      	bmi.n	8001b40 <sd_get_r1+0x4>
}
 8001b50:	bd10      	pop	{r4, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000003e9 	.word	0x000003e9

08001b58 <sd_nec>:
}

/* Nec (=Ncr? which is limited to [0,8]) dummy bytes before lowering CS,
 * as described in sandisk doc, 5.4. */
static void sd_nec()
{
 8001b58:	b510      	push	{r4, lr}
 8001b5a:	2408      	movs	r4, #8
	int i;
	for (i=0; i<8; i++)
		spi_txrx(0xff);
 8001b5c:	20ff      	movs	r0, #255	; 0xff
 8001b5e:	3c01      	subs	r4, #1
 8001b60:	f7ff ff9e 	bl	8001aa0 <spi_txrx>
	for (i=0; i<8; i++)
 8001b64:	2c00      	cmp	r4, #0
 8001b66:	d1f9      	bne.n	8001b5c <sd_nec+0x4>
}
 8001b68:	bd10      	pop	{r4, pc}

08001b6a <sd_get_r7>:
{
 8001b6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b6c:	0006      	movs	r6, r0
	r = sd_get_r1();
 8001b6e:	f7ff ffe5 	bl	8001b3c <sd_get_r1>
 8001b72:	0005      	movs	r5, r0
	if (r != 0x01)
 8001b74:	2801      	cmp	r0, #1
 8001b76:	d113      	bne.n	8001ba0 <sd_get_r7+0x36>
	r = spi_txrx(0xff) << 24;
 8001b78:	20ff      	movs	r0, #255	; 0xff
 8001b7a:	f7ff ff91 	bl	8001aa0 <spi_txrx>
 8001b7e:	0604      	lsls	r4, r0, #24
	r |= spi_txrx(0xff) << 16;
 8001b80:	20ff      	movs	r0, #255	; 0xff
 8001b82:	f7ff ff8d 	bl	8001aa0 <spi_txrx>
 8001b86:	0407      	lsls	r7, r0, #16
	r |= spi_txrx(0xff) << 8;
 8001b88:	20ff      	movs	r0, #255	; 0xff
 8001b8a:	f7ff ff89 	bl	8001aa0 <spi_txrx>
	r |= spi_txrx(0xff) << 16;
 8001b8e:	4327      	orrs	r7, r4
	r |= spi_txrx(0xff) << 8;
 8001b90:	0004      	movs	r4, r0
	r |= spi_txrx(0xff);
 8001b92:	20ff      	movs	r0, #255	; 0xff
 8001b94:	f7ff ff84 	bl	8001aa0 <spi_txrx>
	r |= spi_txrx(0xff) << 8;
 8001b98:	0224      	lsls	r4, r4, #8
 8001b9a:	4307      	orrs	r7, r0
	r |= spi_txrx(0xff);
 8001b9c:	433c      	orrs	r4, r7
	*r7 = r;
 8001b9e:	6034      	str	r4, [r6, #0]
}
 8001ba0:	0028      	movs	r0, r5
 8001ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001ba4 <sd_read_status.isra.2>:

static int sd_read_status(hwif *hw)
{
	uint16_t r2;

	spi_cs_low();
 8001ba4:	20a0      	movs	r0, #160	; 0xa0
static int sd_read_status(hwif *hw)
 8001ba6:	b570      	push	{r4, r5, r6, lr}
	spi_cs_low();
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2110      	movs	r1, #16
 8001bac:	05c0      	lsls	r0, r0, #23
 8001bae:	f7fe ff0d 	bl	80009cc <HAL_GPIO_WritePin>
	sd_cmd(13, 0);
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	200d      	movs	r0, #13
 8001bb6:	f7ff ff89 	bl	8001acc <sd_cmd>
 8001bba:	4d18      	ldr	r5, [pc, #96]	; (8001c1c <sd_read_status.isra.2+0x78>)
 8001bbc:	3d01      	subs	r5, #1
	while (tries--) {
 8001bbe:	2d00      	cmp	r5, #0
 8001bc0:	d11f      	bne.n	8001c02 <sd_read_status.isra.2+0x5e>
		return 0xff;
 8001bc2:	24ff      	movs	r4, #255	; 0xff
	r2 = sd_get_r2();
	sd_nec();
 8001bc4:	f7ff ffc8 	bl	8001b58 <sd_nec>
	spi_cs_high();
 8001bc8:	20a0      	movs	r0, #160	; 0xa0
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2110      	movs	r1, #16
 8001bce:	05c0      	lsls	r0, r0, #23
 8001bd0:	f7fe fefc 	bl	80009cc <HAL_GPIO_WritePin>
	if (r2 & 0x8000)
		return -1;
	if (r2)
 8001bd4:	2c00      	cmp	r4, #0
 8001bd6:	d012      	beq.n	8001bfe <sd_read_status.isra.2+0x5a>
	printf("R2: %04x\n", r);
 8001bd8:	0021      	movs	r1, r4
 8001bda:	4811      	ldr	r0, [pc, #68]	; (8001c20 <sd_read_status.isra.2+0x7c>)
 8001bdc:	f001 fb5c 	bl	8003298 <iprintf>
	for (i=0; i<15; i++)
 8001be0:	2500      	movs	r5, #0
		if (r & (1<<i))
 8001be2:	2601      	movs	r6, #1
 8001be4:	0023      	movs	r3, r4
 8001be6:	412b      	asrs	r3, r5
 8001be8:	4233      	tst	r3, r6
 8001bea:	d005      	beq.n	8001bf8 <sd_read_status.isra.2+0x54>
			printf("  %s\n", r2_strings[i]);
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <sd_read_status.isra.2+0x80>)
 8001bee:	00aa      	lsls	r2, r5, #2
 8001bf0:	58d1      	ldr	r1, [r2, r3]
 8001bf2:	480d      	ldr	r0, [pc, #52]	; (8001c28 <sd_read_status.isra.2+0x84>)
 8001bf4:	f001 fb50 	bl	8003298 <iprintf>
	for (i=0; i<15; i++)
 8001bf8:	3501      	adds	r5, #1
 8001bfa:	2d0f      	cmp	r5, #15
 8001bfc:	d1f2      	bne.n	8001be4 <sd_read_status.isra.2+0x40>
		print_r2(r2);

	return 0;
}
 8001bfe:	2000      	movs	r0, #0
 8001c00:	bd70      	pop	{r4, r5, r6, pc}
		r = spi_txrx(0xff);
 8001c02:	20ff      	movs	r0, #255	; 0xff
 8001c04:	f7ff ff4c 	bl	8001aa0 <spi_txrx>
 8001c08:	0004      	movs	r4, r0
		if ((r & 0x80) == 0)
 8001c0a:	0603      	lsls	r3, r0, #24
 8001c0c:	d4d6      	bmi.n	8001bbc <sd_read_status.isra.2+0x18>
	r = r<<8 | spi_txrx(0xff);
 8001c0e:	20ff      	movs	r0, #255	; 0xff
 8001c10:	f7ff ff46 	bl	8001aa0 <spi_txrx>
 8001c14:	0224      	lsls	r4, r4, #8
 8001c16:	4304      	orrs	r4, r0
 8001c18:	b2a4      	uxth	r4, r4
 8001c1a:	e7d3      	b.n	8001bc4 <sd_read_status.isra.2+0x20>
 8001c1c:	000003e9 	.word	0x000003e9
 8001c20:	080047b1 	.word	0x080047b1
 8001c24:	0800461c 	.word	0x0800461c
 8001c28:	080045f7 	.word	0x080045f7

08001c2c <sd_init.isra.1>:
	hw->capabilities = 0;
 8001c2c:	2300      	movs	r3, #0
static int sd_init(hwif *hw)
 8001c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
	hw->capabilities = 0;
 8001c30:	6003      	str	r3, [r0, #0]
static int sd_init(hwif *hw)
 8001c32:	0004      	movs	r4, r0
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8001c34:	48d7      	ldr	r0, [pc, #860]	; (8001f94 <sd_init.isra.1+0x368>)
 8001c36:	3328      	adds	r3, #40	; 0x28
static int sd_init(hwif *hw)
 8001c38:	b087      	sub	sp, #28
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8001c3a:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8001c3c:	f7ff fd0a 	bl	8001654 <HAL_SPI_Init>
	printf("cmd0 - reset.. ");
 8001c40:	48d5      	ldr	r0, [pc, #852]	; (8001f98 <sd_init.isra.1+0x36c>)
 8001c42:	f001 fb29 	bl	8003298 <iprintf>
	spi_cs_high();
 8001c46:	20a0      	movs	r0, #160	; 0xa0
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2110      	movs	r1, #16
 8001c4c:	05c0      	lsls	r0, r0, #23
 8001c4e:	f7fe febd 	bl	80009cc <HAL_GPIO_WritePin>
 8001c52:	250a      	movs	r5, #10
		spi_txrx(0xff);
 8001c54:	20ff      	movs	r0, #255	; 0xff
 8001c56:	3d01      	subs	r5, #1
 8001c58:	f7ff ff22 	bl	8001aa0 <spi_txrx>
	for (i=0; i<10; i++)
 8001c5c:	2d00      	cmp	r5, #0
 8001c5e:	d1f9      	bne.n	8001c54 <sd_init.isra.1+0x28>
	spi_cs_low();
 8001c60:	20a0      	movs	r0, #160	; 0xa0
 8001c62:	002a      	movs	r2, r5
 8001c64:	2110      	movs	r1, #16
 8001c66:	05c0      	lsls	r0, r0, #23
 8001c68:	f7fe feb0 	bl	80009cc <HAL_GPIO_WritePin>
	sd_cmd(0, 0);
 8001c6c:	0029      	movs	r1, r5
 8001c6e:	0028      	movs	r0, r5
 8001c70:	f7ff ff2c 	bl	8001acc <sd_cmd>
	r = sd_get_r1();
 8001c74:	f7ff ff62 	bl	8001b3c <sd_get_r1>
 8001c78:	0006      	movs	r6, r0
	sd_nec();
 8001c7a:	f7ff ff6d 	bl	8001b58 <sd_nec>
	spi_cs_high();
 8001c7e:	20a0      	movs	r0, #160	; 0xa0
 8001c80:	2201      	movs	r2, #1
 8001c82:	2110      	movs	r1, #16
 8001c84:	05c0      	lsls	r0, r0, #23
 8001c86:	f7fe fea1 	bl	80009cc <HAL_GPIO_WritePin>
	if (r == 0xff)
 8001c8a:	2eff      	cmp	r6, #255	; 0xff
 8001c8c:	d100      	bne.n	8001c90 <sd_init.isra.1+0x64>
 8001c8e:	e19f      	b.n	8001fd0 <sd_init.isra.1+0x3a4>
	if (r != 0x01) {
 8001c90:	2e01      	cmp	r6, #1
 8001c92:	d009      	beq.n	8001ca8 <sd_init.isra.1+0x7c>
		printf("fail\n");
 8001c94:	48c1      	ldr	r0, [pc, #772]	; (8001f9c <sd_init.isra.1+0x370>)
 8001c96:	f001 fb79 	bl	800338c <puts>
		print_r1(r);
 8001c9a:	0030      	movs	r0, r6
 8001c9c:	f7ff fee4 	bl	8001a68 <print_r1>
	return -2;
 8001ca0:	3d02      	subs	r5, #2
}
 8001ca2:	0028      	movs	r0, r5
 8001ca4:	b007      	add	sp, #28
 8001ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	printf("success\n");
 8001ca8:	4fbd      	ldr	r7, [pc, #756]	; (8001fa0 <sd_init.isra.1+0x374>)
 8001caa:	0038      	movs	r0, r7
 8001cac:	f001 fb6e 	bl	800338c <puts>
	printf("cmd8 - voltage.. ");
 8001cb0:	48bc      	ldr	r0, [pc, #752]	; (8001fa4 <sd_init.isra.1+0x378>)
 8001cb2:	f001 faf1 	bl	8003298 <iprintf>
	spi_cs_low();
 8001cb6:	20a0      	movs	r0, #160	; 0xa0
 8001cb8:	002a      	movs	r2, r5
 8001cba:	2110      	movs	r1, #16
 8001cbc:	05c0      	lsls	r0, r0, #23
 8001cbe:	f7fe fe85 	bl	80009cc <HAL_GPIO_WritePin>
	sd_cmd(8, 0x1aa /* VHS = 1 */);
 8001cc2:	21d5      	movs	r1, #213	; 0xd5
 8001cc4:	2008      	movs	r0, #8
 8001cc6:	0049      	lsls	r1, r1, #1
 8001cc8:	f7ff ff00 	bl	8001acc <sd_cmd>
	r = sd_get_r7(&r7);
 8001ccc:	a804      	add	r0, sp, #16
 8001cce:	f7ff ff4c 	bl	8001b6a <sd_get_r7>
 8001cd2:	0005      	movs	r5, r0
	sd_nec();
 8001cd4:	f7ff ff40 	bl	8001b58 <sd_nec>
	spi_cs_high();
 8001cd8:	20a0      	movs	r0, #160	; 0xa0
 8001cda:	0032      	movs	r2, r6
 8001cdc:	2110      	movs	r1, #16
 8001cde:	05c0      	lsls	r0, r0, #23
 8001ce0:	f7fe fe74 	bl	80009cc <HAL_GPIO_WritePin>
	hw->capabilities |= CAP_VER2_00;
 8001ce4:	0032      	movs	r2, r6
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	6022      	str	r2, [r4, #0]
	if (r == 0xff)
 8001cec:	2dff      	cmp	r5, #255	; 0xff
 8001cee:	d100      	bne.n	8001cf2 <sd_init.isra.1+0xc6>
 8001cf0:	e16e      	b.n	8001fd0 <sd_init.isra.1+0x3a4>
		printf("success, SD v2.x\n");
 8001cf2:	48ad      	ldr	r0, [pc, #692]	; (8001fa8 <sd_init.isra.1+0x37c>)
	if (r == 0x01)
 8001cf4:	2d01      	cmp	r5, #1
 8001cf6:	d004      	beq.n	8001d02 <sd_init.isra.1+0xd6>
	else if (r & 0x4) {
 8001cf8:	076a      	lsls	r2, r5, #29
 8001cfa:	d524      	bpl.n	8001d46 <sd_init.isra.1+0x11a>
		hw->capabilities &= ~CAP_VER2_00;
 8001cfc:	43b3      	bics	r3, r6
		printf("not implemented, SD v1.x\n");
 8001cfe:	48ab      	ldr	r0, [pc, #684]	; (8001fac <sd_init.isra.1+0x380>)
		hw->capabilities &= ~CAP_VER2_00;
 8001d00:	6023      	str	r3, [r4, #0]
		printf("not implemented, SD v1.x\n");
 8001d02:	f001 fb43 	bl	800338c <puts>
	printf("cmd58 - ocr.. ");
 8001d06:	48aa      	ldr	r0, [pc, #680]	; (8001fb0 <sd_init.isra.1+0x384>)
 8001d08:	f001 fac6 	bl	8003298 <iprintf>
	spi_cs_low();
 8001d0c:	20a0      	movs	r0, #160	; 0xa0
 8001d0e:	2200      	movs	r2, #0
 8001d10:	2110      	movs	r1, #16
 8001d12:	05c0      	lsls	r0, r0, #23
 8001d14:	f7fe fe5a 	bl	80009cc <HAL_GPIO_WritePin>
	sd_cmd(58, 0);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	203a      	movs	r0, #58	; 0x3a
 8001d1c:	f7ff fed6 	bl	8001acc <sd_cmd>
	r = sd_get_r3(&r3);
 8001d20:	a805      	add	r0, sp, #20
 8001d22:	f7ff ff22 	bl	8001b6a <sd_get_r7>
 8001d26:	0005      	movs	r5, r0
	sd_nec();
 8001d28:	f7ff ff16 	bl	8001b58 <sd_nec>
	spi_cs_high();
 8001d2c:	20a0      	movs	r0, #160	; 0xa0
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2110      	movs	r1, #16
 8001d32:	05c0      	lsls	r0, r0, #23
 8001d34:	f7fe fe4a 	bl	80009cc <HAL_GPIO_WritePin>
	if (r == 0xff)
 8001d38:	2dff      	cmp	r5, #255	; 0xff
 8001d3a:	d100      	bne.n	8001d3e <sd_init.isra.1+0x112>
 8001d3c:	e148      	b.n	8001fd0 <sd_init.isra.1+0x3a4>
	if (r != 0x01 && !(r & 0x4)) { /* allow it to not be implemented - old cards */
 8001d3e:	2d01      	cmp	r5, #1
 8001d40:	d009      	beq.n	8001d56 <sd_init.isra.1+0x12a>
 8001d42:	076b      	lsls	r3, r5, #29
 8001d44:	d407      	bmi.n	8001d56 <sd_init.isra.1+0x12a>
			printf("fail\n");
 8001d46:	4895      	ldr	r0, [pc, #596]	; (8001f9c <sd_init.isra.1+0x370>)
 8001d48:	f001 fb20 	bl	800338c <puts>
			print_r1(r);
 8001d4c:	0028      	movs	r0, r5
		print_r1(r);
 8001d4e:	f7ff fe8b 	bl	8001a68 <print_r1>
	return -2;
 8001d52:	2502      	movs	r5, #2
 8001d54:	e140      	b.n	8001fd8 <sd_init.isra.1+0x3ac>
			if (r3 & 1<<i)
 8001d56:	2504      	movs	r5, #4
 8001d58:	2201      	movs	r2, #1
 8001d5a:	9b05      	ldr	r3, [sp, #20]
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	40a9      	lsls	r1, r5
 8001d60:	420b      	tst	r3, r1
 8001d62:	d102      	bne.n	8001d6a <sd_init.isra.1+0x13e>
		for (i=4; i<=23; i++)
 8001d64:	3501      	adds	r5, #1
 8001d66:	2d18      	cmp	r5, #24
 8001d68:	d1f8      	bne.n	8001d5c <sd_init.isra.1+0x130>
		printf("Vdd voltage window: %i.%i-", (12+i)/10, (12+i)%10);
 8001d6a:	350c      	adds	r5, #12
 8001d6c:	0028      	movs	r0, r5
 8001d6e:	210a      	movs	r1, #10
 8001d70:	f7fe fb3a 	bl	80003e8 <__aeabi_idivmod>
 8001d74:	0028      	movs	r0, r5
 8001d76:	000e      	movs	r6, r1
 8001d78:	210a      	movs	r1, #10
 8001d7a:	f7fe fa4f 	bl	800021c <__divsi3>
 8001d7e:	0032      	movs	r2, r6
 8001d80:	0001      	movs	r1, r0
 8001d82:	488c      	ldr	r0, [pc, #560]	; (8001fb4 <sd_init.isra.1+0x388>)
 8001d84:	f001 fa88 	bl	8003298 <iprintf>
		for (i=23; i>=4; i--)
 8001d88:	2517      	movs	r5, #23
			if (r3 & 1<<i)
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	9e05      	ldr	r6, [sp, #20]
 8001d8e:	001a      	movs	r2, r3
 8001d90:	40aa      	lsls	r2, r5
 8001d92:	4216      	tst	r6, r2
 8001d94:	d102      	bne.n	8001d9c <sd_init.isra.1+0x170>
		for (i=23; i>=4; i--)
 8001d96:	3d01      	subs	r5, #1
 8001d98:	2d03      	cmp	r5, #3
 8001d9a:	d1f8      	bne.n	8001d8e <sd_init.isra.1+0x162>
		printf("%i.%iV, CCS:%li, power up status:%li\n",
 8001d9c:	2201      	movs	r2, #1
				r3>>30 & 1, r3>>31);
 8001d9e:	0fb3      	lsrs	r3, r6, #30
				(13+i)/10, (13+i)%10,
 8001da0:	350d      	adds	r5, #13
		printf("%i.%iV, CCS:%li, power up status:%li\n",
 8001da2:	401a      	ands	r2, r3
 8001da4:	210a      	movs	r1, #10
 8001da6:	0028      	movs	r0, r5
 8001da8:	9202      	str	r2, [sp, #8]
 8001daa:	f7fe fb1d 	bl	80003e8 <__aeabi_idivmod>
 8001dae:	0028      	movs	r0, r5
 8001db0:	9103      	str	r1, [sp, #12]
 8001db2:	210a      	movs	r1, #10
 8001db4:	f7fe fa32 	bl	800021c <__divsi3>
 8001db8:	0ff6      	lsrs	r6, r6, #31
 8001dba:	0001      	movs	r1, r0
 8001dbc:	9b02      	ldr	r3, [sp, #8]
 8001dbe:	9a03      	ldr	r2, [sp, #12]
 8001dc0:	9600      	str	r6, [sp, #0]
 8001dc2:	487d      	ldr	r0, [pc, #500]	; (8001fb8 <sd_init.isra.1+0x38c>)
 8001dc4:	f001 fa68 	bl	8003298 <iprintf>
		printf("success\n");
 8001dc8:	0038      	movs	r0, r7
 8001dca:	f001 fadf 	bl	800338c <puts>
	printf("acmd41 - hcs.. ");
 8001dce:	487b      	ldr	r0, [pc, #492]	; (8001fbc <sd_init.isra.1+0x390>)
 8001dd0:	f001 fa62 	bl	8003298 <iprintf>
	uint32_t hcs = 0;
 8001dd4:	2201      	movs	r2, #1
		spi_cs_low();
 8001dd6:	27a0      	movs	r7, #160	; 0xa0
	uint32_t hcs = 0;
 8001dd8:	6823      	ldr	r3, [r4, #0]
		spi_cs_low();
 8001dda:	05ff      	lsls	r7, r7, #23
	uint32_t hcs = 0;
 8001ddc:	4013      	ands	r3, r2
 8001dde:	079b      	lsls	r3, r3, #30
 8001de0:	9303      	str	r3, [sp, #12]
		hcs = 1<<30;
 8001de2:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <sd_init.isra.1+0x394>)
 8001de4:	9302      	str	r3, [sp, #8]
		spi_cs_low();
 8001de6:	2200      	movs	r2, #0
 8001de8:	2110      	movs	r1, #16
 8001dea:	0038      	movs	r0, r7
 8001dec:	f7fe fdee 	bl	80009cc <HAL_GPIO_WritePin>
		sd_cmd(55, 0);
 8001df0:	2100      	movs	r1, #0
 8001df2:	2037      	movs	r0, #55	; 0x37
 8001df4:	f7ff fe6a 	bl	8001acc <sd_cmd>
		r = sd_get_r1();
 8001df8:	f7ff fea0 	bl	8001b3c <sd_get_r1>
 8001dfc:	0005      	movs	r5, r0
		sd_nec();
 8001dfe:	f7ff feab 	bl	8001b58 <sd_nec>
		spi_cs_high();
 8001e02:	2201      	movs	r2, #1
 8001e04:	2110      	movs	r1, #16
 8001e06:	0038      	movs	r0, r7
 8001e08:	f7fe fde0 	bl	80009cc <HAL_GPIO_WritePin>
		if (r == 0xff)
 8001e0c:	2dff      	cmp	r5, #255	; 0xff
 8001e0e:	d100      	bne.n	8001e12 <sd_init.isra.1+0x1e6>
 8001e10:	e0de      	b.n	8001fd0 <sd_init.isra.1+0x3a4>
		if (r & 0xfe) {
 8001e12:	2601      	movs	r6, #1
 8001e14:	002a      	movs	r2, r5
 8001e16:	43b2      	bics	r2, r6
 8001e18:	b2d2      	uxtb	r2, r2
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	d193      	bne.n	8001d46 <sd_init.isra.1+0x11a>
		spi_cs_low();
 8001e1e:	2110      	movs	r1, #16
 8001e20:	0038      	movs	r0, r7
 8001e22:	f7fe fdd3 	bl	80009cc <HAL_GPIO_WritePin>
		sd_cmd(41, hcs);
 8001e26:	9903      	ldr	r1, [sp, #12]
 8001e28:	2029      	movs	r0, #41	; 0x29
 8001e2a:	f7ff fe4f 	bl	8001acc <sd_cmd>
		r = sd_get_r1();
 8001e2e:	f7ff fe85 	bl	8001b3c <sd_get_r1>
 8001e32:	0005      	movs	r5, r0
		sd_nec();
 8001e34:	f7ff fe90 	bl	8001b58 <sd_nec>
		spi_cs_high();
 8001e38:	0032      	movs	r2, r6
 8001e3a:	2110      	movs	r1, #16
 8001e3c:	0038      	movs	r0, r7
 8001e3e:	f7fe fdc5 	bl	80009cc <HAL_GPIO_WritePin>
		if (r == 0xff)
 8001e42:	2dff      	cmp	r5, #255	; 0xff
 8001e44:	d100      	bne.n	8001e48 <sd_init.isra.1+0x21c>
 8001e46:	e0c3      	b.n	8001fd0 <sd_init.isra.1+0x3a4>
		if (r & 0xfe) {
 8001e48:	002b      	movs	r3, r5
 8001e4a:	43b3      	bics	r3, r6
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d000      	beq.n	8001e54 <sd_init.isra.1+0x228>
 8001e52:	e778      	b.n	8001d46 <sd_init.isra.1+0x11a>
	} while (r != 0 && tries--);
 8001e54:	2d00      	cmp	r5, #0
 8001e56:	d100      	bne.n	8001e5a <sd_init.isra.1+0x22e>
 8001e58:	e0c0      	b.n	8001fdc <sd_init.isra.1+0x3b0>
 8001e5a:	9b02      	ldr	r3, [sp, #8]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	9302      	str	r3, [sp, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1c0      	bne.n	8001de6 <sd_init.isra.1+0x1ba>
		printf("timeouted\n");
 8001e64:	4857      	ldr	r0, [pc, #348]	; (8001fc4 <sd_init.isra.1+0x398>)
 8001e66:	f001 fa91 	bl	800338c <puts>
 8001e6a:	e772      	b.n	8001d52 <sd_init.isra.1+0x126>
				if (r3 & 1<<i)
 8001e6c:	0032      	movs	r2, r6
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	4211      	tst	r1, r2
 8001e72:	d102      	bne.n	8001e7a <sd_init.isra.1+0x24e>
			for (i=4; i<=23; i++)
 8001e74:	3301      	adds	r3, #1
 8001e76:	2b18      	cmp	r3, #24
 8001e78:	d1f8      	bne.n	8001e6c <sd_init.isra.1+0x240>
			printf("Vdd voltage window: %i.%i-", (12+i)/10, (12+i)%10);
 8001e7a:	330c      	adds	r3, #12
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	210a      	movs	r1, #10
 8001e80:	001e      	movs	r6, r3
 8001e82:	f7fe fab1 	bl	80003e8 <__aeabi_idivmod>
 8001e86:	0030      	movs	r0, r6
 8001e88:	000f      	movs	r7, r1
 8001e8a:	210a      	movs	r1, #10
 8001e8c:	f7fe f9c6 	bl	800021c <__divsi3>
 8001e90:	003a      	movs	r2, r7
 8001e92:	0001      	movs	r1, r0
 8001e94:	4847      	ldr	r0, [pc, #284]	; (8001fb4 <sd_init.isra.1+0x388>)
 8001e96:	f001 f9ff 	bl	8003298 <iprintf>
			for (i=23; i>=4; i--)
 8001e9a:	2617      	movs	r6, #23
				if (r3 & 1<<i)
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	9f05      	ldr	r7, [sp, #20]
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	40b2      	lsls	r2, r6
 8001ea4:	4217      	tst	r7, r2
 8001ea6:	d102      	bne.n	8001eae <sd_init.isra.1+0x282>
			for (i=23; i>=4; i--)
 8001ea8:	3e01      	subs	r6, #1
 8001eaa:	2e03      	cmp	r6, #3
 8001eac:	d1f8      	bne.n	8001ea0 <sd_init.isra.1+0x274>
			printf("%i.%iV, CCS:%li, power up status:%li\n",
 8001eae:	2201      	movs	r2, #1
					r3>>30 & 1, r3>>31);
 8001eb0:	0fbb      	lsrs	r3, r7, #30
					(13+i)/10, (13+i)%10,
 8001eb2:	360d      	adds	r6, #13
			printf("%i.%iV, CCS:%li, power up status:%li\n",
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	210a      	movs	r1, #10
 8001eb8:	0030      	movs	r0, r6
 8001eba:	9202      	str	r2, [sp, #8]
 8001ebc:	f7fe fa94 	bl	80003e8 <__aeabi_idivmod>
 8001ec0:	0030      	movs	r0, r6
 8001ec2:	9103      	str	r1, [sp, #12]
 8001ec4:	210a      	movs	r1, #10
 8001ec6:	f7fe f9a9 	bl	800021c <__divsi3>
 8001eca:	0ffb      	lsrs	r3, r7, #31
 8001ecc:	0001      	movs	r1, r0
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	9a03      	ldr	r2, [sp, #12]
 8001ed2:	9b02      	ldr	r3, [sp, #8]
 8001ed4:	4838      	ldr	r0, [pc, #224]	; (8001fb8 <sd_init.isra.1+0x38c>)
 8001ed6:	f001 f9df 	bl	8003298 <iprintf>
			if (r3>>30 & 1) {
 8001eda:	2201      	movs	r2, #1
 8001edc:	9b05      	ldr	r3, [sp, #20]
 8001ede:	0f9b      	lsrs	r3, r3, #30
 8001ee0:	4213      	tst	r3, r2
 8001ee2:	d003      	beq.n	8001eec <sd_init.isra.1+0x2c0>
				hw->capabilities |= CAP_SDHC;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	6822      	ldr	r2, [r4, #0]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	6023      	str	r3, [r4, #0]
			printf("success\n");
 8001eec:	482c      	ldr	r0, [pc, #176]	; (8001fa0 <sd_init.isra.1+0x374>)
 8001eee:	f001 fa4d 	bl	800338c <puts>
	if ((hw->capabilities & CAP_SDHC) == 0) {
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	6824      	ldr	r4, [r4, #0]
 8001ef6:	401c      	ands	r4, r3
 8001ef8:	d125      	bne.n	8001f46 <sd_init.isra.1+0x31a>
		printf("cmd16 - block length.. ");
 8001efa:	4833      	ldr	r0, [pc, #204]	; (8001fc8 <sd_init.isra.1+0x39c>)
 8001efc:	f001 f9cc 	bl	8003298 <iprintf>
		spi_cs_low();
 8001f00:	20a0      	movs	r0, #160	; 0xa0
 8001f02:	0022      	movs	r2, r4
 8001f04:	2110      	movs	r1, #16
 8001f06:	05c0      	lsls	r0, r0, #23
 8001f08:	f7fe fd60 	bl	80009cc <HAL_GPIO_WritePin>
		sd_cmd(16, 512);
 8001f0c:	2180      	movs	r1, #128	; 0x80
 8001f0e:	2010      	movs	r0, #16
 8001f10:	0089      	lsls	r1, r1, #2
 8001f12:	f7ff fddb 	bl	8001acc <sd_cmd>
		r = sd_get_r1();
 8001f16:	f7ff fe11 	bl	8001b3c <sd_get_r1>
 8001f1a:	0004      	movs	r4, r0
		sd_nec();
 8001f1c:	f7ff fe1c 	bl	8001b58 <sd_nec>
		spi_cs_high();
 8001f20:	20a0      	movs	r0, #160	; 0xa0
 8001f22:	2201      	movs	r2, #1
 8001f24:	2110      	movs	r1, #16
 8001f26:	05c0      	lsls	r0, r0, #23
 8001f28:	f7fe fd50 	bl	80009cc <HAL_GPIO_WritePin>
		if (r == 0xff)
 8001f2c:	2cff      	cmp	r4, #255	; 0xff
 8001f2e:	d04f      	beq.n	8001fd0 <sd_init.isra.1+0x3a4>
		if (r & 0xfe) {
 8001f30:	23fe      	movs	r3, #254	; 0xfe
 8001f32:	421c      	tst	r4, r3
 8001f34:	d004      	beq.n	8001f40 <sd_init.isra.1+0x314>
		printf("fail\n");
 8001f36:	4819      	ldr	r0, [pc, #100]	; (8001f9c <sd_init.isra.1+0x370>)
 8001f38:	f001 fa28 	bl	800338c <puts>
		print_r1(r);
 8001f3c:	0020      	movs	r0, r4
 8001f3e:	e706      	b.n	8001d4e <sd_init.isra.1+0x122>
		printf("success\n");
 8001f40:	4817      	ldr	r0, [pc, #92]	; (8001fa0 <sd_init.isra.1+0x374>)
 8001f42:	f001 fa23 	bl	800338c <puts>
	printf("cmd59 - enable crc.. ");
 8001f46:	4821      	ldr	r0, [pc, #132]	; (8001fcc <sd_init.isra.1+0x3a0>)
 8001f48:	f001 f9a6 	bl	8003298 <iprintf>
	spi_cs_low();
 8001f4c:	20a0      	movs	r0, #160	; 0xa0
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2110      	movs	r1, #16
 8001f52:	05c0      	lsls	r0, r0, #23
 8001f54:	f7fe fd3a 	bl	80009cc <HAL_GPIO_WritePin>
	sd_cmd(59, 0);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	203b      	movs	r0, #59	; 0x3b
 8001f5c:	f7ff fdb6 	bl	8001acc <sd_cmd>
	r = sd_get_r1();
 8001f60:	f7ff fdec 	bl	8001b3c <sd_get_r1>
 8001f64:	0004      	movs	r4, r0
	sd_nec();
 8001f66:	f7ff fdf7 	bl	8001b58 <sd_nec>
	spi_cs_high();
 8001f6a:	20a0      	movs	r0, #160	; 0xa0
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	2110      	movs	r1, #16
 8001f70:	05c0      	lsls	r0, r0, #23
 8001f72:	f7fe fd2b 	bl	80009cc <HAL_GPIO_WritePin>
	if (r == 0xff)
 8001f76:	2cff      	cmp	r4, #255	; 0xff
 8001f78:	d02a      	beq.n	8001fd0 <sd_init.isra.1+0x3a4>
	if (r & 0xfe) {
 8001f7a:	23fe      	movs	r3, #254	; 0xfe
 8001f7c:	421c      	tst	r4, r3
 8001f7e:	d1da      	bne.n	8001f36 <sd_init.isra.1+0x30a>
	printf("success\n");
 8001f80:	4807      	ldr	r0, [pc, #28]	; (8001fa0 <sd_init.isra.1+0x374>)
 8001f82:	f001 fa03 	bl	800338c <puts>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 8001f86:	2308      	movs	r3, #8
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <sd_init.isra.1+0x368>)
 8001f8a:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 8001f8c:	f7ff fb62 	bl	8001654 <HAL_SPI_Init>
 8001f90:	e687      	b.n	8001ca2 <sd_init.isra.1+0x76>
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	200003a4 	.word	0x200003a4
 8001f98:	08004680 	.word	0x08004680
 8001f9c:	08004690 	.word	0x08004690
 8001fa0:	08004695 	.word	0x08004695
 8001fa4:	0800469d 	.word	0x0800469d
 8001fa8:	080046af 	.word	0x080046af
 8001fac:	080046c0 	.word	0x080046c0
 8001fb0:	080046d9 	.word	0x080046d9
 8001fb4:	080046e8 	.word	0x080046e8
 8001fb8:	08004703 	.word	0x08004703
 8001fbc:	08004729 	.word	0x08004729
 8001fc0:	000003e9 	.word	0x000003e9
 8001fc4:	08004789 	.word	0x08004789
 8001fc8:	08004752 	.word	0x08004752
 8001fcc:	0800476a 	.word	0x0800476a
	printf("fail spi\n");
 8001fd0:	4819      	ldr	r0, [pc, #100]	; (8002038 <sd_init.isra.1+0x40c>)
 8001fd2:	f001 f9db 	bl	800338c <puts>
	return -1;
 8001fd6:	2501      	movs	r5, #1
	return -2;
 8001fd8:	426d      	negs	r5, r5
 8001fda:	e662      	b.n	8001ca2 <sd_init.isra.1+0x76>
	printf("success\n");
 8001fdc:	4817      	ldr	r0, [pc, #92]	; (800203c <sd_init.isra.1+0x410>)
 8001fde:	f001 f9d5 	bl	800338c <puts>
	if (hw->capabilities & CAP_VER2_00) {
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	4233      	tst	r3, r6
 8001fe6:	d084      	beq.n	8001ef2 <sd_init.isra.1+0x2c6>
		printf("cmd58 - ocr, 2nd time.. ");
 8001fe8:	4815      	ldr	r0, [pc, #84]	; (8002040 <sd_init.isra.1+0x414>)
 8001fea:	f001 f955 	bl	8003298 <iprintf>
		spi_cs_low();
 8001fee:	20a0      	movs	r0, #160	; 0xa0
 8001ff0:	002a      	movs	r2, r5
 8001ff2:	2110      	movs	r1, #16
 8001ff4:	05c0      	lsls	r0, r0, #23
 8001ff6:	f7fe fce9 	bl	80009cc <HAL_GPIO_WritePin>
		sd_cmd(58, 0);
 8001ffa:	0029      	movs	r1, r5
 8001ffc:	203a      	movs	r0, #58	; 0x3a
 8001ffe:	f7ff fd65 	bl	8001acc <sd_cmd>
		r = sd_get_r3(&r3);
 8002002:	a805      	add	r0, sp, #20
 8002004:	f7ff fdb1 	bl	8001b6a <sd_get_r7>
 8002008:	0007      	movs	r7, r0
		sd_nec();
 800200a:	f7ff fda5 	bl	8001b58 <sd_nec>
		spi_cs_high();
 800200e:	20a0      	movs	r0, #160	; 0xa0
 8002010:	0032      	movs	r2, r6
 8002012:	2110      	movs	r1, #16
 8002014:	05c0      	lsls	r0, r0, #23
 8002016:	f7fe fcd9 	bl	80009cc <HAL_GPIO_WritePin>
		if (r == 0xff)
 800201a:	2fff      	cmp	r7, #255	; 0xff
 800201c:	d0d8      	beq.n	8001fd0 <sd_init.isra.1+0x3a4>
		if (r & 0xfe) {
 800201e:	003a      	movs	r2, r7
 8002020:	43b2      	bics	r2, r6
 8002022:	b2d2      	uxtb	r2, r2
				if (r3 & 1<<i)
 8002024:	9905      	ldr	r1, [sp, #20]
 8002026:	2304      	movs	r3, #4
		if (r & 0xfe) {
 8002028:	2a00      	cmp	r2, #0
 800202a:	d100      	bne.n	800202e <sd_init.isra.1+0x402>
 800202c:	e71e      	b.n	8001e6c <sd_init.isra.1+0x240>
			printf("fail\n");
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <sd_init.isra.1+0x418>)
 8002030:	f001 f9ac 	bl	800338c <puts>
			print_r1(r);
 8002034:	0038      	movs	r0, r7
 8002036:	e68a      	b.n	8001d4e <sd_init.isra.1+0x122>
 8002038:	08004780 	.word	0x08004780
 800203c:	08004695 	.word	0x08004695
 8002040:	08004739 	.word	0x08004739
 8002044:	08004690 	.word	0x08004690

08002048 <crc16>:
{
 8002048:	b530      	push	{r4, r5, lr}
	crc ^= ((crc & 0xff) << 4) << 1;
 800204a:	24ff      	movs	r4, #255	; 0xff
	for (i=0; i<len; i++)
 800204c:	0002      	movs	r2, r0
	uint16_t crc = 0;
 800204e:	2300      	movs	r3, #0
	crc ^= ((crc & 0xff) << 4) << 1;
 8002050:	0164      	lsls	r4, r4, #5
	for (i=0; i<len; i++)
 8002052:	1a15      	subs	r5, r2, r0
 8002054:	42a9      	cmp	r1, r5
 8002056:	dc01      	bgt.n	800205c <crc16+0x14>
}
 8002058:	0018      	movs	r0, r3
 800205a:	bd30      	pop	{r4, r5, pc}
	crc ^= ser_data;
 800205c:	7815      	ldrb	r5, [r2, #0]
 800205e:	ba5b      	rev16	r3, r3
 8002060:	406b      	eors	r3, r5
 8002062:	b29b      	uxth	r3, r3
	crc ^= (uint8_t)(crc & 0xff) >> 4;
 8002064:	b2dd      	uxtb	r5, r3
 8002066:	092d      	lsrs	r5, r5, #4
 8002068:	405d      	eors	r5, r3
	crc ^= (crc << 8) << 4;
 800206a:	032b      	lsls	r3, r5, #12
 800206c:	406b      	eors	r3, r5
 800206e:	b21b      	sxth	r3, r3
	crc ^= ((crc & 0xff) << 4) << 1;
 8002070:	015d      	lsls	r5, r3, #5
 8002072:	4025      	ands	r5, r4
 8002074:	406b      	eors	r3, r5
 8002076:	3201      	adds	r2, #1
		crc = crc16_ccitt(crc, p[i]);
 8002078:	b29b      	uxth	r3, r3
 800207a:	e7ea      	b.n	8002052 <crc16+0xa>

0800207c <sd_get_data.isra.3>:

/* 0xfe marks data start, then len bytes of data and crc16 */
static int sd_get_data(hwif *hw, uint8_t *buf, int len)
 800207c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800207e:	0006      	movs	r6, r0
 8002080:	000d      	movs	r5, r1
 8002082:	4c17      	ldr	r4, [pc, #92]	; (80020e0 <sd_get_data.isra.3+0x64>)
 8002084:	3c01      	subs	r4, #1
	uint8_t r;
	uint16_t _crc16;
	uint16_t calc_crc;
	int i;

	while (tries--) {
 8002086:	2c00      	cmp	r4, #0
 8002088:	d102      	bne.n	8002090 <sd_get_data.isra.3+0x14>
	_crc16 |= spi_txrx(0xff);

	calc_crc = crc16(buf, len);
	if (_crc16 != calc_crc) {
		printf("%s, crcs differ: %04x vs. %04x, len:%i\n", __func__, _crc16, calc_crc, len);
		return -1;
 800208a:	2001      	movs	r0, #1
 800208c:	4240      	negs	r0, r0
	}

	return 0;
}
 800208e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		r = spi_txrx(0xff);
 8002090:	20ff      	movs	r0, #255	; 0xff
 8002092:	f7ff fd05 	bl	8001aa0 <spi_txrx>
		if (r == 0xfe)
 8002096:	28fe      	cmp	r0, #254	; 0xfe
 8002098:	d1f4      	bne.n	8002084 <sd_get_data.isra.3+0x8>
 800209a:	0034      	movs	r4, r6
	for (i=0; i<len; i++)
 800209c:	1ba3      	subs	r3, r4, r6
		buf[i] = spi_txrx(0xff);
 800209e:	20ff      	movs	r0, #255	; 0xff
	for (i=0; i<len; i++)
 80020a0:	429d      	cmp	r5, r3
 80020a2:	dc17      	bgt.n	80020d4 <sd_get_data.isra.3+0x58>
	_crc16 = spi_txrx(0xff) << 8;
 80020a4:	f7ff fcfc 	bl	8001aa0 <spi_txrx>
 80020a8:	0200      	lsls	r0, r0, #8
 80020aa:	b284      	uxth	r4, r0
	_crc16 |= spi_txrx(0xff);
 80020ac:	20ff      	movs	r0, #255	; 0xff
 80020ae:	f7ff fcf7 	bl	8001aa0 <spi_txrx>
	calc_crc = crc16(buf, len);
 80020b2:	0029      	movs	r1, r5
	_crc16 |= spi_txrx(0xff);
 80020b4:	4304      	orrs	r4, r0
	calc_crc = crc16(buf, len);
 80020b6:	0030      	movs	r0, r6
 80020b8:	f7ff ffc6 	bl	8002048 <crc16>
	_crc16 |= spi_txrx(0xff);
 80020bc:	b2a4      	uxth	r4, r4
	calc_crc = crc16(buf, len);
 80020be:	0003      	movs	r3, r0
	return 0;
 80020c0:	2000      	movs	r0, #0
	if (_crc16 != calc_crc) {
 80020c2:	429c      	cmp	r4, r3
 80020c4:	d0e3      	beq.n	800208e <sd_get_data.isra.3+0x12>
		printf("%s, crcs differ: %04x vs. %04x, len:%i\n", __func__, _crc16, calc_crc, len);
 80020c6:	9500      	str	r5, [sp, #0]
 80020c8:	0022      	movs	r2, r4
 80020ca:	4906      	ldr	r1, [pc, #24]	; (80020e4 <sd_get_data.isra.3+0x68>)
 80020cc:	4806      	ldr	r0, [pc, #24]	; (80020e8 <sd_get_data.isra.3+0x6c>)
 80020ce:	f001 f8e3 	bl	8003298 <iprintf>
 80020d2:	e7da      	b.n	800208a <sd_get_data.isra.3+0xe>
		buf[i] = spi_txrx(0xff);
 80020d4:	f7ff fce4 	bl	8001aa0 <spi_txrx>
 80020d8:	7020      	strb	r0, [r4, #0]
 80020da:	3401      	adds	r4, #1
 80020dc:	e7de      	b.n	800209c <sd_get_data.isra.3+0x20>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	00004e21 	.word	0x00004e21
 80020e4:	08004218 	.word	0x08004218
 80020e8:	08004658 	.word	0x08004658

080020ec <sd_readsector.isra.5>:

	return 0;
}


static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 80020ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ee:	0005      	movs	r5, r0
{
	int r;

	spi_cs_low();
 80020f0:	20a0      	movs	r0, #160	; 0xa0
static int sd_readsector(hwif *hw, uint32_t address, uint8_t *buf)
 80020f2:	000c      	movs	r4, r1
 80020f4:	9201      	str	r2, [sp, #4]
	spi_cs_low();
 80020f6:	2110      	movs	r1, #16
 80020f8:	2200      	movs	r2, #0
 80020fa:	05c0      	lsls	r0, r0, #23
 80020fc:	f7fe fc66 	bl	80009cc <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 8002100:	682b      	ldr	r3, [r5, #0]
		sd_cmd(17, address); /* read single block */
 8002102:	0021      	movs	r1, r4
	if (hw->capabilities & CAP_SDHC)
 8002104:	079b      	lsls	r3, r3, #30
 8002106:	d400      	bmi.n	800210a <sd_readsector.isra.5+0x1e>
	else
		sd_cmd(17, address*512); /* read single block */
 8002108:	0261      	lsls	r1, r4, #9
 800210a:	2011      	movs	r0, #17
 800210c:	f7ff fcde 	bl	8001acc <sd_cmd>

	r = sd_get_r1();
 8002110:	f7ff fd14 	bl	8001b3c <sd_get_r1>
 8002114:	0006      	movs	r6, r0
	if (r == 0xff) {
 8002116:	28ff      	cmp	r0, #255	; 0xff
 8002118:	d108      	bne.n	800212c <sd_readsector.isra.5+0x40>
		spi_cs_high();
 800211a:	20a0      	movs	r0, #160	; 0xa0
 800211c:	2201      	movs	r2, #1
 800211e:	2110      	movs	r1, #16
 8002120:	05c0      	lsls	r0, r0, #23
 8002122:	f7fe fc53 	bl	80009cc <HAL_GPIO_WritePin>
		r = -1;
 8002126:	2501      	movs	r5, #1

	r = sd_get_data(hw, buf, 512);
	sd_nec();
	spi_cs_high();
	if (r == -1) {
		r = -3;
 8002128:	426d      	negs	r5, r5
 800212a:	e012      	b.n	8002152 <sd_readsector.isra.5+0x66>
	if (r & 0xfe) {
 800212c:	2501      	movs	r5, #1
 800212e:	0007      	movs	r7, r0
 8002130:	43af      	bics	r7, r5
 8002132:	b2ff      	uxtb	r7, r7
 8002134:	2f00      	cmp	r7, #0
 8002136:	d013      	beq.n	8002160 <sd_readsector.isra.5+0x74>
		spi_cs_high();
 8002138:	20a0      	movs	r0, #160	; 0xa0
 800213a:	002a      	movs	r2, r5
 800213c:	2110      	movs	r1, #16
 800213e:	05c0      	lsls	r0, r0, #23
 8002140:	f7fe fc44 	bl	80009cc <HAL_GPIO_WritePin>
		printf("%s\n", __func__);
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <sd_readsector.isra.5+0x9c>)
 8002146:	f001 f921 	bl	800338c <puts>
		print_r1(r);
 800214a:	0030      	movs	r0, r6
 800214c:	f7ff fc8c 	bl	8001a68 <print_r1>
		r = -2;
 8002150:	3d03      	subs	r5, #3
		goto fail;
	}

	return 0;
 fail:
	printf("failed to read sector %li, err:%i\n", address, r);
 8002152:	002a      	movs	r2, r5
 8002154:	0021      	movs	r1, r4
 8002156:	480d      	ldr	r0, [pc, #52]	; (800218c <sd_readsector.isra.5+0xa0>)
 8002158:	f001 f89e 	bl	8003298 <iprintf>
	return r;
}
 800215c:	0028      	movs	r0, r5
 800215e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	r = sd_get_data(hw, buf, 512);
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	9801      	ldr	r0, [sp, #4]
 8002164:	0089      	lsls	r1, r1, #2
 8002166:	f7ff ff89 	bl	800207c <sd_get_data.isra.3>
 800216a:	0006      	movs	r6, r0
	sd_nec();
 800216c:	f7ff fcf4 	bl	8001b58 <sd_nec>
	spi_cs_high();
 8002170:	20a0      	movs	r0, #160	; 0xa0
 8002172:	002a      	movs	r2, r5
 8002174:	2110      	movs	r1, #16
 8002176:	05c0      	lsls	r0, r0, #23
 8002178:	f7fe fc28 	bl	80009cc <HAL_GPIO_WritePin>
	return 0;
 800217c:	003d      	movs	r5, r7
	if (r == -1) {
 800217e:	1c73      	adds	r3, r6, #1
 8002180:	d1ec      	bne.n	800215c <sd_readsector.isra.5+0x70>
		r = -3;
 8002182:	2503      	movs	r5, #3
 8002184:	e7d0      	b.n	8002128 <sd_readsector.isra.5+0x3c>
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	0800423c 	.word	0x0800423c
 800218c:	080047bb 	.word	0x080047bb

08002190 <sd_writesector.isra.7>:

static int sd_writesector(hwif *hw, uint32_t address, const uint8_t *buf)
 8002190:	b570      	push	{r4, r5, r6, lr}
 8002192:	0006      	movs	r6, r0
{
	int r;

	spi_cs_low();
 8002194:	20a0      	movs	r0, #160	; 0xa0
static int sd_writesector(hwif *hw, uint32_t address, const uint8_t *buf)
 8002196:	000d      	movs	r5, r1
 8002198:	0014      	movs	r4, r2
	spi_cs_low();
 800219a:	2110      	movs	r1, #16
 800219c:	2200      	movs	r2, #0
 800219e:	05c0      	lsls	r0, r0, #23
 80021a0:	f7fe fc14 	bl	80009cc <HAL_GPIO_WritePin>
	if (hw->capabilities & CAP_SDHC)
 80021a4:	6833      	ldr	r3, [r6, #0]
		sd_cmd(24, address); /* write block */
 80021a6:	0029      	movs	r1, r5
	if (hw->capabilities & CAP_SDHC)
 80021a8:	079b      	lsls	r3, r3, #30
 80021aa:	d400      	bmi.n	80021ae <sd_writesector.isra.7+0x1e>
	else
		sd_cmd(24, address*512); /* write block */
 80021ac:	0269      	lsls	r1, r5, #9
 80021ae:	2018      	movs	r0, #24
 80021b0:	f7ff fc8c 	bl	8001acc <sd_cmd>

	r = sd_get_r1();
 80021b4:	f7ff fcc2 	bl	8001b3c <sd_get_r1>
	if (r == 0xff) {
		spi_cs_high();
 80021b8:	2201      	movs	r2, #1
	r = sd_get_r1();
 80021ba:	0006      	movs	r6, r0
	if (r == 0xff) {
 80021bc:	28ff      	cmp	r0, #255	; 0xff
 80021be:	d10d      	bne.n	80021dc <sd_writesector.isra.7+0x4c>
		spi_cs_high();
 80021c0:	20a0      	movs	r0, #160	; 0xa0
 80021c2:	2110      	movs	r1, #16
 80021c4:	05c0      	lsls	r0, r0, #23
 80021c6:	f7fe fc01 	bl	80009cc <HAL_GPIO_WritePin>
		r = -1;
 80021ca:	2401      	movs	r4, #1
	r = sd_put_data(hw, buf, 512);
	sd_nec();
	spi_cs_high();
	if (r != 0) {
		printf("sd_put_data returned: %i\n", r);
		r = -3;
 80021cc:	4264      	negs	r4, r4
	/* efsl code is weird shit, 0 is error in there?
	 * not that it's properly handled or anything,
	 * and the return type is char, fucking efsl */
	return 0;
 fail:
	printf("failed to write sector %li, err:%i\n", address, r);
 80021ce:	0022      	movs	r2, r4
 80021d0:	0029      	movs	r1, r5
 80021d2:	4830      	ldr	r0, [pc, #192]	; (8002294 <sd_writesector.isra.7+0x104>)
 80021d4:	f001 f860 	bl	8003298 <iprintf>
	return r;
}
 80021d8:	0020      	movs	r0, r4
 80021da:	bd70      	pop	{r4, r5, r6, pc}
	if (r & 0xfe) {
 80021dc:	0003      	movs	r3, r0
 80021de:	4393      	bics	r3, r2
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <sd_writesector.isra.7+0x70>
		spi_cs_high();
 80021e6:	20a0      	movs	r0, #160	; 0xa0
 80021e8:	2110      	movs	r1, #16
 80021ea:	05c0      	lsls	r0, r0, #23
 80021ec:	f7fe fbee 	bl	80009cc <HAL_GPIO_WritePin>
		printf("%s\n", __func__);
 80021f0:	4829      	ldr	r0, [pc, #164]	; (8002298 <sd_writesector.isra.7+0x108>)
 80021f2:	f001 f8cb 	bl	800338c <puts>
		print_r1(r);
 80021f6:	0030      	movs	r0, r6
 80021f8:	f7ff fc36 	bl	8001a68 <print_r1>
		r = -2;
 80021fc:	2402      	movs	r4, #2
 80021fe:	e7e5      	b.n	80021cc <sd_writesector.isra.7+0x3c>
	spi_txrx(0xff); /* Nwr (>= 1) high bytes */
 8002200:	20ff      	movs	r0, #255	; 0xff
 8002202:	f7ff fc4d 	bl	8001aa0 <spi_txrx>
	spi_txrx(0xfe); /* data start */
 8002206:	20fe      	movs	r0, #254	; 0xfe
 8002208:	f7ff fc4a 	bl	8001aa0 <spi_txrx>
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	18e6      	adds	r6, r4, r3
	while (len--)
 8002212:	42a6      	cmp	r6, r4
 8002214:	d122      	bne.n	800225c <sd_writesector.isra.7+0xcc>
	crc = crc16(buf, len);
 8002216:	2101      	movs	r1, #1
 8002218:	0030      	movs	r0, r6
 800221a:	4249      	negs	r1, r1
 800221c:	f7ff ff14 	bl	8002048 <crc16>
 8002220:	0004      	movs	r4, r0
	spi_txrx(crc>>8);
 8002222:	0a00      	lsrs	r0, r0, #8
 8002224:	b2c0      	uxtb	r0, r0
 8002226:	f7ff fc3b 	bl	8001aa0 <spi_txrx>
	spi_txrx(crc);
 800222a:	b2e0      	uxtb	r0, r4
 800222c:	f7ff fc38 	bl	8001aa0 <spi_txrx>
 8002230:	260b      	movs	r6, #11
 8002232:	3e01      	subs	r6, #1
	while (tries--) {
 8002234:	2e00      	cmp	r6, #0
 8002236:	d116      	bne.n	8002266 <sd_writesector.isra.7+0xd6>
		return -1;
 8002238:	2401      	movs	r4, #1
		return -2;
 800223a:	4264      	negs	r4, r4
	sd_nec();
 800223c:	f7ff fc8c 	bl	8001b58 <sd_nec>
	spi_cs_high();
 8002240:	20a0      	movs	r0, #160	; 0xa0
 8002242:	2201      	movs	r2, #1
 8002244:	2110      	movs	r1, #16
 8002246:	05c0      	lsls	r0, r0, #23
 8002248:	f7fe fbc0 	bl	80009cc <HAL_GPIO_WritePin>
	if (r != 0) {
 800224c:	2c00      	cmp	r4, #0
 800224e:	d0c3      	beq.n	80021d8 <sd_writesector.isra.7+0x48>
		printf("sd_put_data returned: %i\n", r);
 8002250:	0021      	movs	r1, r4
 8002252:	4812      	ldr	r0, [pc, #72]	; (800229c <sd_writesector.isra.7+0x10c>)
 8002254:	f001 f820 	bl	8003298 <iprintf>
		r = -3;
 8002258:	2403      	movs	r4, #3
 800225a:	e7b7      	b.n	80021cc <sd_writesector.isra.7+0x3c>
		spi_txrx(*buf++);
 800225c:	7820      	ldrb	r0, [r4, #0]
 800225e:	f7ff fc1f 	bl	8001aa0 <spi_txrx>
 8002262:	3401      	adds	r4, #1
 8002264:	e7d5      	b.n	8002212 <sd_writesector.isra.7+0x82>
		b[bi++] = r = spi_txrx(0xff);
 8002266:	20ff      	movs	r0, #255	; 0xff
 8002268:	f7ff fc1a 	bl	8001aa0 <spi_txrx>
 800226c:	0004      	movs	r4, r0
		if (r != 0xff)
 800226e:	28ff      	cmp	r0, #255	; 0xff
 8002270:	d0df      	beq.n	8002232 <sd_writesector.isra.7+0xa2>
 8002272:	4e0b      	ldr	r6, [pc, #44]	; (80022a0 <sd_writesector.isra.7+0x110>)
 8002274:	3e01      	subs	r6, #1
	while (tries--) {
 8002276:	2e00      	cmp	r6, #0
 8002278:	d101      	bne.n	800227e <sd_writesector.isra.7+0xee>
		return -2;
 800227a:	2402      	movs	r4, #2
 800227c:	e7dd      	b.n	800223a <sd_writesector.isra.7+0xaa>
		if (spi_txrx(0xff) == 0xff)
 800227e:	20ff      	movs	r0, #255	; 0xff
 8002280:	f7ff fc0e 	bl	8001aa0 <spi_txrx>
 8002284:	28ff      	cmp	r0, #255	; 0xff
 8002286:	d1f5      	bne.n	8002274 <sd_writesector.isra.7+0xe4>
	if ((r & 0x1f) == 0x05)
 8002288:	231f      	movs	r3, #31
 800228a:	4023      	ands	r3, r4
 800228c:	2b05      	cmp	r3, #5
 800228e:	d1d5      	bne.n	800223c <sd_writesector.isra.7+0xac>
		return 0;
 8002290:	2400      	movs	r4, #0
 8002292:	e7d3      	b.n	800223c <sd_writesector.isra.7+0xac>
 8002294:	08004817 	.word	0x08004817
 8002298:	0800424a 	.word	0x0800424a
 800229c:	080047fd 	.word	0x080047fd
 80022a0:	000186a1 	.word	0x000186a1

080022a4 <hwif_init>:


/*** public API - on top of sd/spi code ***/

int hwif_init(hwif* hw)
{
 80022a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int tries = 10;

	if (hw->initialized)
 80022a6:	6803      	ldr	r3, [r0, #0]
{
 80022a8:	b0a7      	sub	sp, #156	; 0x9c
	if (hw->initialized)
 80022aa:	931d      	str	r3, [sp, #116]	; 0x74
		return 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	931c      	str	r3, [sp, #112]	; 0x70
	if (hw->initialized)
 80022b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
{
 80022b2:	901b      	str	r0, [sp, #108]	; 0x6c
	if (hw->initialized)
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d000      	beq.n	80022ba <hwif_init+0x16>
 80022b8:	e178      	b.n	80025ac <hwif_init+0x308>
	FAT_SD_SPI.Init.BaudRatePrescaler = prescaler;
 80022ba:	48be      	ldr	r0, [pc, #760]	; (80025b4 <hwif_init+0x310>)
 80022bc:	3328      	adds	r3, #40	; 0x28
 80022be:	61c3      	str	r3, [r0, #28]
	HAL_SPI_Init(&FAT_SD_SPI);
 80022c0:	240b      	movs	r4, #11
 80022c2:	f7ff f9c7 	bl	8001654 <HAL_SPI_Init>
 80022c6:	3c01      	subs	r4, #1

	spi_init();

	while (tries--) {
 80022c8:	2c00      	cmp	r4, #0
 80022ca:	d103      	bne.n	80022d4 <hwif_init+0x30>
	/* read status register */
	sd_read_status(hw);

	sd_read_cid(hw);
	if (sd_read_csd(hw) != 0)
		return -1;
 80022cc:	2301      	movs	r3, #1
 80022ce:	425b      	negs	r3, r3
 80022d0:	931c      	str	r3, [sp, #112]	; 0x70
 80022d2:	e16b      	b.n	80025ac <hwif_init+0x308>
		if (sd_init(hw) == 0)
 80022d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80022d6:	300c      	adds	r0, #12
 80022d8:	f7ff fca8 	bl	8001c2c <sd_init.isra.1>
 80022dc:	901c      	str	r0, [sp, #112]	; 0x70
 80022de:	2800      	cmp	r0, #0
 80022e0:	d1f1      	bne.n	80022c6 <hwif_init+0x22>
	sd_read_status(hw);
 80022e2:	f7ff fc5f 	bl	8001ba4 <sd_read_status.isra.2>
	spi_cs_low();
 80022e6:	20a0      	movs	r0, #160	; 0xa0
 80022e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80022ea:	2110      	movs	r1, #16
 80022ec:	05c0      	lsls	r0, r0, #23
 80022ee:	f7fe fb6d 	bl	80009cc <HAL_GPIO_WritePin>
	sd_cmd(10, 0);
 80022f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80022f4:	200a      	movs	r0, #10
 80022f6:	f7ff fbe9 	bl	8001acc <sd_cmd>
	r = sd_get_r1();
 80022fa:	f7ff fc1f 	bl	8001b3c <sd_get_r1>
 80022fe:	0004      	movs	r4, r0
	if (r == 0xff) {
 8002300:	28ff      	cmp	r0, #255	; 0xff
 8002302:	d11b      	bne.n	800233c <hwif_init+0x98>
		spi_cs_high();
 8002304:	20a0      	movs	r0, #160	; 0xa0
 8002306:	2201      	movs	r2, #1
 8002308:	2110      	movs	r1, #16
 800230a:	05c0      	lsls	r0, r0, #23
 800230c:	f7fe fb5e 	bl	80009cc <HAL_GPIO_WritePin>
	spi_cs_low();
 8002310:	20a0      	movs	r0, #160	; 0xa0
 8002312:	2200      	movs	r2, #0
 8002314:	2110      	movs	r1, #16
 8002316:	05c0      	lsls	r0, r0, #23
 8002318:	f7fe fb58 	bl	80009cc <HAL_GPIO_WritePin>
	sd_cmd(9, 0);
 800231c:	2100      	movs	r1, #0
 800231e:	2009      	movs	r0, #9
 8002320:	f7ff fbd4 	bl	8001acc <sd_cmd>
	r = sd_get_r1();
 8002324:	f7ff fc0a 	bl	8001b3c <sd_get_r1>
 8002328:	0004      	movs	r4, r0
	if (r == 0xff) {
 800232a:	28ff      	cmp	r0, #255	; 0xff
 800232c:	d15a      	bne.n	80023e4 <hwif_init+0x140>
		spi_cs_high();
 800232e:	20a0      	movs	r0, #160	; 0xa0
 8002330:	2201      	movs	r2, #1
 8002332:	2110      	movs	r1, #16
 8002334:	05c0      	lsls	r0, r0, #23
 8002336:	f7fe fb49 	bl	80009cc <HAL_GPIO_WritePin>
 800233a:	e7c7      	b.n	80022cc <hwif_init+0x28>
	if (r & 0xfe) {
 800233c:	2501      	movs	r5, #1
 800233e:	0023      	movs	r3, r4
 8002340:	43ab      	bics	r3, r5
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00d      	beq.n	8002364 <hwif_init+0xc0>
		spi_cs_high();
 8002348:	20a0      	movs	r0, #160	; 0xa0
 800234a:	002a      	movs	r2, r5
 800234c:	2110      	movs	r1, #16
 800234e:	05c0      	lsls	r0, r0, #23
 8002350:	f7fe fb3c 	bl	80009cc <HAL_GPIO_WritePin>
		printf("%s ", __func__);
 8002354:	4998      	ldr	r1, [pc, #608]	; (80025b8 <hwif_init+0x314>)
 8002356:	4899      	ldr	r0, [pc, #612]	; (80025bc <hwif_init+0x318>)
 8002358:	f000 ff9e 	bl	8003298 <iprintf>
		print_r1(r);
 800235c:	0020      	movs	r0, r4
 800235e:	f7ff fb83 	bl	8001a68 <print_r1>
 8002362:	e7d5      	b.n	8002310 <hwif_init+0x6c>
	r = sd_get_data(hw, buf, 16);
 8002364:	ac22      	add	r4, sp, #136	; 0x88
 8002366:	2110      	movs	r1, #16
 8002368:	0020      	movs	r0, r4
 800236a:	f7ff fe87 	bl	800207c <sd_get_data.isra.3>
 800236e:	0006      	movs	r6, r0
	sd_nec();
 8002370:	f7ff fbf2 	bl	8001b58 <sd_nec>
	spi_cs_high();
 8002374:	20a0      	movs	r0, #160	; 0xa0
 8002376:	002a      	movs	r2, r5
 8002378:	2110      	movs	r1, #16
 800237a:	05c0      	lsls	r0, r0, #23
 800237c:	f7fe fb26 	bl	80009cc <HAL_GPIO_WritePin>
	if (r == -1) {
 8002380:	1c73      	adds	r3, r6, #1
 8002382:	d103      	bne.n	800238c <hwif_init+0xe8>
		printf("failed to get cid\n");
 8002384:	488e      	ldr	r0, [pc, #568]	; (80025c0 <hwif_init+0x31c>)
 8002386:	f001 f801 	bl	800338c <puts>
 800238a:	e7c1      	b.n	8002310 <hwif_init+0x6c>
			2000 + (buf[13]<<4 | buf[14]>>4), 1 + (buf[14] & 0xf));
 800238c:	7ba7      	ldrb	r7, [r4, #14]
 800238e:	260f      	movs	r6, #15
 8002390:	0038      	movs	r0, r7
 8002392:	4030      	ands	r0, r6
	printf("CID: mid:%x, oid:%c%c, pnm:%c%c%c%c%c, prv:%i.%i, psn:%02x%02x%02x%02x, mdt:%i/%i\n",
 8002394:	3001      	adds	r0, #1
			buf[8] >> 4, buf[8] & 0xf,		/* prv */
 8002396:	7a25      	ldrb	r5, [r4, #8]
	printf("CID: mid:%x, oid:%c%c, pnm:%c%c%c%c%c, prv:%i.%i, psn:%02x%02x%02x%02x, mdt:%i/%i\n",
 8002398:	78a3      	ldrb	r3, [r4, #2]
 800239a:	7862      	ldrb	r2, [r4, #1]
 800239c:	7821      	ldrb	r1, [r4, #0]
 800239e:	900c      	str	r0, [sp, #48]	; 0x30
			2000 + (buf[13]<<4 | buf[14]>>4), 1 + (buf[14] & 0xf));
 80023a0:	7b60      	ldrb	r0, [r4, #13]
 80023a2:	093f      	lsrs	r7, r7, #4
 80023a4:	0100      	lsls	r0, r0, #4
 80023a6:	4307      	orrs	r7, r0
	printf("CID: mid:%x, oid:%c%c, pnm:%c%c%c%c%c, prv:%i.%i, psn:%02x%02x%02x%02x, mdt:%i/%i\n",
 80023a8:	20fa      	movs	r0, #250	; 0xfa
 80023aa:	00c0      	lsls	r0, r0, #3
 80023ac:	183f      	adds	r7, r7, r0
 80023ae:	970b      	str	r7, [sp, #44]	; 0x2c
 80023b0:	7b20      	ldrb	r0, [r4, #12]
 80023b2:	402e      	ands	r6, r5
 80023b4:	900a      	str	r0, [sp, #40]	; 0x28
 80023b6:	7ae0      	ldrb	r0, [r4, #11]
 80023b8:	092d      	lsrs	r5, r5, #4
 80023ba:	9009      	str	r0, [sp, #36]	; 0x24
 80023bc:	7aa0      	ldrb	r0, [r4, #10]
 80023be:	9008      	str	r0, [sp, #32]
 80023c0:	7a60      	ldrb	r0, [r4, #9]
 80023c2:	9606      	str	r6, [sp, #24]
 80023c4:	9007      	str	r0, [sp, #28]
 80023c6:	9505      	str	r5, [sp, #20]
 80023c8:	79e0      	ldrb	r0, [r4, #7]
 80023ca:	9004      	str	r0, [sp, #16]
 80023cc:	79a0      	ldrb	r0, [r4, #6]
 80023ce:	9003      	str	r0, [sp, #12]
 80023d0:	7960      	ldrb	r0, [r4, #5]
 80023d2:	9002      	str	r0, [sp, #8]
 80023d4:	7920      	ldrb	r0, [r4, #4]
 80023d6:	9001      	str	r0, [sp, #4]
 80023d8:	78e0      	ldrb	r0, [r4, #3]
 80023da:	9000      	str	r0, [sp, #0]
 80023dc:	4879      	ldr	r0, [pc, #484]	; (80025c4 <hwif_init+0x320>)
 80023de:	f000 ff5b 	bl	8003298 <iprintf>
 80023e2:	e795      	b.n	8002310 <hwif_init+0x6c>
	if (r & 0xfe) {
 80023e4:	2501      	movs	r5, #1
 80023e6:	0003      	movs	r3, r0
 80023e8:	43ab      	bics	r3, r5
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00d      	beq.n	800240c <hwif_init+0x168>
		spi_cs_high();
 80023f0:	20a0      	movs	r0, #160	; 0xa0
 80023f2:	002a      	movs	r2, r5
 80023f4:	2110      	movs	r1, #16
 80023f6:	05c0      	lsls	r0, r0, #23
 80023f8:	f7fe fae8 	bl	80009cc <HAL_GPIO_WritePin>
		printf("%s ", __func__);
 80023fc:	4972      	ldr	r1, [pc, #456]	; (80025c8 <hwif_init+0x324>)
 80023fe:	486f      	ldr	r0, [pc, #444]	; (80025bc <hwif_init+0x318>)
 8002400:	f000 ff4a 	bl	8003298 <iprintf>
		print_r1(r);
 8002404:	0020      	movs	r0, r4
 8002406:	f7ff fb2f 	bl	8001a68 <print_r1>
 800240a:	e75f      	b.n	80022cc <hwif_init+0x28>
	r = sd_get_data(hw, buf, 16);
 800240c:	ac22      	add	r4, sp, #136	; 0x88
 800240e:	2110      	movs	r1, #16
 8002410:	0020      	movs	r0, r4
 8002412:	f7ff fe33 	bl	800207c <sd_get_data.isra.3>
 8002416:	0006      	movs	r6, r0
	sd_nec();
 8002418:	f7ff fb9e 	bl	8001b58 <sd_nec>
	spi_cs_high();
 800241c:	20a0      	movs	r0, #160	; 0xa0
 800241e:	002a      	movs	r2, r5
 8002420:	2110      	movs	r1, #16
 8002422:	05c0      	lsls	r0, r0, #23
 8002424:	f7fe fad2 	bl	80009cc <HAL_GPIO_WritePin>
	if (r == -1) {
 8002428:	1c73      	adds	r3, r6, #1
 800242a:	d103      	bne.n	8002434 <hwif_init+0x190>
		printf("failed to get csd\n");
 800242c:	4867      	ldr	r0, [pc, #412]	; (80025cc <hwif_init+0x328>)
 800242e:	f000 ffad 	bl	800338c <puts>
 8002432:	e74b      	b.n	80022cc <hwif_init+0x28>
	if ((buf[0] >> 6) + 1 == 1) {
 8002434:	7821      	ldrb	r1, [r4, #0]
 8002436:	098b      	lsrs	r3, r1, #6
 8002438:	9320      	str	r3, [sp, #128]	; 0x80
 800243a:	7963      	ldrb	r3, [r4, #5]
 800243c:	9920      	ldr	r1, [sp, #128]	; 0x80
 800243e:	931e      	str	r3, [sp, #120]	; 0x78
 8002440:	7aa3      	ldrb	r3, [r4, #10]
 8002442:	79a2      	ldrb	r2, [r4, #6]
 8002444:	931d      	str	r3, [sp, #116]	; 0x74
 8002446:	7ae3      	ldrb	r3, [r4, #11]
 8002448:	931f      	str	r3, [sp, #124]	; 0x7c
 800244a:	7b20      	ldrb	r0, [r4, #12]
 800244c:	7b66      	ldrb	r6, [r4, #13]
 800244e:	7ba3      	ldrb	r3, [r4, #14]
 8002450:	2900      	cmp	r1, #0
 8002452:	d000      	beq.n	8002456 <hwif_init+0x1b2>
 8002454:	e0c0      	b.n	80025d8 <hwif_init+0x334>
			(buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6, /* c_size */
 8002456:	7a21      	ldrb	r1, [r4, #8]
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002458:	78a7      	ldrb	r7, [r4, #2]
			(buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6, /* c_size */
 800245a:	468c      	mov	ip, r1
			(buf[8]&0x38)>>3, buf[8]&0x07, buf[9]>>5, (buf[9]>>2)&0x7,
 800245c:	7a61      	ldrb	r1, [r4, #9]
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 800245e:	9720      	str	r7, [sp, #128]	; 0x80
 8002460:	7867      	ldrb	r7, [r4, #1]
 8002462:	9721      	str	r7, [sp, #132]	; 0x84
 8002464:	071f      	lsls	r7, r3, #28
 8002466:	0fbf      	lsrs	r7, r7, #30
 8002468:	9719      	str	r7, [sp, #100]	; 0x64
 800246a:	091f      	lsrs	r7, r3, #4
 800246c:	402f      	ands	r7, r5
 800246e:	9718      	str	r7, [sp, #96]	; 0x60
 8002470:	095f      	lsrs	r7, r3, #5
 8002472:	402f      	ands	r7, r5
 8002474:	9717      	str	r7, [sp, #92]	; 0x5c
 8002476:	099f      	lsrs	r7, r3, #6
 8002478:	09db      	lsrs	r3, r3, #7
 800247a:	9315      	str	r3, [sp, #84]	; 0x54
 800247c:	0973      	lsrs	r3, r6, #5
 800247e:	402b      	ands	r3, r5
 8002480:	9314      	str	r3, [sp, #80]	; 0x50
			1<<((buf[12]&3)<<2 | buf[13]>>6), /* write_bl_len */
 8002482:	230c      	movs	r3, #12
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002484:	402f      	ands	r7, r5
 8002486:	9716      	str	r7, [sp, #88]	; 0x58
			1<<((buf[12]&3)<<2 | buf[13]>>6), /* write_bl_len */
 8002488:	0087      	lsls	r7, r0, #2
 800248a:	403b      	ands	r3, r7
 800248c:	09b6      	lsrs	r6, r6, #6
 800248e:	4333      	orrs	r3, r6
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002490:	002e      	movs	r6, r5
 8002492:	409e      	lsls	r6, r3
 8002494:	9613      	str	r6, [sp, #76]	; 0x4c
			buf[12]>>7, 1<<((buf[12]>>2)&7),
 8002496:	2607      	movs	r6, #7
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002498:	002f      	movs	r7, r5
			buf[12]>>7, 1<<((buf[12]>>2)&7),
 800249a:	0883      	lsrs	r3, r0, #2
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 800249c:	40f0      	lsrs	r0, r6
			buf[12]>>7, 1<<((buf[12]>>2)&7),
 800249e:	4033      	ands	r3, r6
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024a0:	409f      	lsls	r7, r3
			(buf[11]&0x7f) + 1, /* write protect group size */
 80024a2:	237f      	movs	r3, #127	; 0x7f
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024a4:	9011      	str	r0, [sp, #68]	; 0x44
			(buf[11]&0x7f) + 1, /* write protect group size */
 80024a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024a8:	9712      	str	r7, [sp, #72]	; 0x48
			(buf[11]&0x7f) + 1, /* write protect group size */
 80024aa:	4003      	ands	r3, r0
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024ac:	3301      	adds	r3, #1
 80024ae:	9310      	str	r3, [sp, #64]	; 0x40
			((buf[10]&0x3f)<<1 | buf[11]>>7) + 1, /* erase sector size */
 80024b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
			(buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6, /* c_size */
 80024b2:	27c0      	movs	r7, #192	; 0xc0
			((buf[10]&0x3f)<<1 | buf[11]>>7) + 1, /* erase sector size */
 80024b4:	0058      	lsls	r0, r3, #1
 80024b6:	237e      	movs	r3, #126	; 0x7e
 80024b8:	4003      	ands	r3, r0
 80024ba:	981f      	ldr	r0, [sp, #124]	; 0x7c
			(buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6, /* c_size */
 80024bc:	013f      	lsls	r7, r7, #4
			((buf[10]&0x3f)<<1 | buf[11]>>7) + 1, /* erase sector size */
 80024be:	40f0      	lsrs	r0, r6
 80024c0:	4303      	orrs	r3, r0
			1<<(2+(((buf[9]&3) << 1) | buf[10]>>7)), /* c_size_mult */
 80024c2:	2006      	movs	r0, #6
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024c4:	3301      	adds	r3, #1
 80024c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80024c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	402b      	ands	r3, r5
 80024ce:	930e      	str	r3, [sp, #56]	; 0x38
			1<<(2+(((buf[9]&3) << 1) | buf[10]>>7)), /* c_size_mult */
 80024d0:	004b      	lsls	r3, r1, #1
 80024d2:	4003      	ands	r3, r0
 80024d4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80024d6:	40f0      	lsrs	r0, r6
 80024d8:	4303      	orrs	r3, r0
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024da:	0028      	movs	r0, r5
			1<<(2+(((buf[9]&3) << 1) | buf[10]>>7)), /* c_size_mult */
 80024dc:	3302      	adds	r3, #2
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024de:	4098      	lsls	r0, r3
 80024e0:	088b      	lsrs	r3, r1, #2
 80024e2:	4033      	ands	r3, r6
 80024e4:	930c      	str	r3, [sp, #48]	; 0x30
 80024e6:	4663      	mov	r3, ip
 80024e8:	4033      	ands	r3, r6
 80024ea:	930a      	str	r3, [sp, #40]	; 0x28
			(buf[8]&0x38)>>3, buf[8]&0x07, buf[9]>>5, (buf[9]>>2)&0x7,
 80024ec:	4663      	mov	r3, ip
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024ee:	0949      	lsrs	r1, r1, #5
 80024f0:	910b      	str	r1, [sp, #44]	; 0x2c
			(buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6, /* c_size */
 80024f2:	4661      	mov	r1, ip
			(buf[8]&0x38)>>3, buf[8]&0x07, buf[9]>>5, (buf[9]>>2)&0x7,
 80024f4:	10db      	asrs	r3, r3, #3
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80024f6:	401e      	ands	r6, r3
 80024f8:	900d      	str	r0, [sp, #52]	; 0x34
 80024fa:	9609      	str	r6, [sp, #36]	; 0x24
			(buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6, /* c_size */
 80024fc:	79e3      	ldrb	r3, [r4, #7]
 80024fe:	0989      	lsrs	r1, r1, #6
 8002500:	009b      	lsls	r3, r3, #2
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002502:	430b      	orrs	r3, r1
			(buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6, /* c_size */
 8002504:	0291      	lsls	r1, r2, #10
 8002506:	4039      	ands	r1, r7
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002508:	430b      	orrs	r3, r1
 800250a:	9308      	str	r3, [sp, #32]
 800250c:	0913      	lsrs	r3, r2, #4
 800250e:	402b      	ands	r3, r5
 8002510:	9307      	str	r3, [sp, #28]
 8002512:	0953      	lsrs	r3, r2, #5
 8002514:	402b      	ands	r3, r5
 8002516:	9306      	str	r3, [sp, #24]
 8002518:	0993      	lsrs	r3, r2, #6
 800251a:	402b      	ands	r3, r5
 800251c:	09d2      	lsrs	r2, r2, #7
			buf[4], buf[5] >> 4, 1<<(buf[5] & 0xf), /* classes, read_bl_len */
 800251e:	260f      	movs	r6, #15
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002520:	9305      	str	r3, [sp, #20]
 8002522:	9204      	str	r2, [sp, #16]
 8002524:	002a      	movs	r2, r5
			buf[4], buf[5] >> 4, 1<<(buf[5] & 0xf), /* classes, read_bl_len */
 8002526:	9b1e      	ldr	r3, [sp, #120]	; 0x78
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002528:	0029      	movs	r1, r5
			buf[4], buf[5] >> 4, 1<<(buf[5] & 0xf), /* classes, read_bl_len */
 800252a:	4033      	ands	r3, r6
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 800252c:	409a      	lsls	r2, r3
 800252e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002530:	9203      	str	r2, [sp, #12]
 8002532:	091b      	lsrs	r3, r3, #4
 8002534:	9302      	str	r3, [sp, #8]
 8002536:	7923      	ldrb	r3, [r4, #4]
 8002538:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800253a:	9301      	str	r3, [sp, #4]
 800253c:	78e3      	ldrb	r3, [r4, #3]
 800253e:	4824      	ldr	r0, [pc, #144]	; (80025d0 <hwif_init+0x32c>)
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002544:	f000 fea8 	bl	8003298 <iprintf>
	capacity = (((buf[6]&0x3)<<10 | buf[7]<<2 | buf[8]>>6)+1) << (2+(((buf[9]&3) << 1) | buf[10]>>7)) << ((buf[5] & 0xf) - 9);
 8002548:	79e3      	ldrb	r3, [r4, #7]
 800254a:	7a22      	ldrb	r2, [r4, #8]
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	0992      	lsrs	r2, r2, #6
 8002550:	4313      	orrs	r3, r2
 8002552:	79a2      	ldrb	r2, [r4, #6]
 8002554:	0292      	lsls	r2, r2, #10
 8002556:	4017      	ands	r7, r2
 8002558:	2206      	movs	r2, #6
 800255a:	431f      	orrs	r7, r3
 800255c:	7a63      	ldrb	r3, [r4, #9]
 800255e:	3701      	adds	r7, #1
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4013      	ands	r3, r2
 8002564:	7aa2      	ldrb	r2, [r4, #10]
 8002566:	09d2      	lsrs	r2, r2, #7
 8002568:	4313      	orrs	r3, r2
 800256a:	3302      	adds	r3, #2
 800256c:	409f      	lsls	r7, r3
 800256e:	7963      	ldrb	r3, [r4, #5]
 8002570:	401e      	ands	r6, r3
 8002572:	3e09      	subs	r6, #9
 8002574:	40b7      	lsls	r7, r6
	printf("capacity = %i kB\n", capacity/2);
 8002576:	0ff9      	lsrs	r1, r7, #31
 8002578:	19c9      	adds	r1, r1, r7
 800257a:	1049      	asrs	r1, r1, #1
 800257c:	4815      	ldr	r0, [pc, #84]	; (80025d4 <hwif_init+0x330>)
 800257e:	f000 fe8b 	bl	8003298 <iprintf>
	hw->erase_sectors = 1;
 8002582:	2101      	movs	r1, #1
	hw->sectors = capacity;
 8002584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
	if (((buf[10]>>6)&1) == 0)
 8002586:	aa22      	add	r2, sp, #136	; 0x88
	hw->sectors = capacity;
 8002588:	605f      	str	r7, [r3, #4]
	hw->erase_sectors = 1;
 800258a:	6099      	str	r1, [r3, #8]
	if (((buf[10]>>6)&1) == 0)
 800258c:	7a93      	ldrb	r3, [r2, #10]
 800258e:	0998      	lsrs	r0, r3, #6
 8002590:	4208      	tst	r0, r1
 8002592:	d108      	bne.n	80025a6 <hwif_init+0x302>
		hw->erase_sectors = ((buf[10]&0x3f)<<1 | buf[11]>>7) + 1;
 8002594:	408b      	lsls	r3, r1
 8002596:	7ad2      	ldrb	r2, [r2, #11]
 8002598:	317d      	adds	r1, #125	; 0x7d
 800259a:	09d2      	lsrs	r2, r2, #7
 800259c:	400b      	ands	r3, r1
 800259e:	4313      	orrs	r3, r2
 80025a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80025a2:	3301      	adds	r3, #1
 80025a4:	6093      	str	r3, [r2, #8]

	hw->initialized = 1;
 80025a6:	2301      	movs	r3, #1
 80025a8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80025aa:	6013      	str	r3, [r2, #0]
	return 0;
}
 80025ac:	981c      	ldr	r0, [sp, #112]	; 0x70
 80025ae:	b027      	add	sp, #156	; 0x9c
 80025b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	200003a4 	.word	0x200003a4
 80025b8:	08004230 	.word	0x08004230
 80025bc:	0800426a 	.word	0x0800426a
 80025c0:	0800426e 	.word	0x0800426e
 80025c4:	08004280 	.word	0x08004280
 80025c8:	08004224 	.word	0x08004224
 80025cc:	080042d3 	.word	0x080042d3
 80025d0:	080042e5 	.word	0x080042e5
 80025d4:	080045db 	.word	0x080045db
		hw->capabilities |= CAP_SDHC;
 80025d8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80025da:	68ff      	ldr	r7, [r7, #12]
 80025dc:	9721      	str	r7, [sp, #132]	; 0x84
 80025de:	2702      	movs	r7, #2
 80025e0:	9921      	ldr	r1, [sp, #132]	; 0x84
 80025e2:	430f      	orrs	r7, r1
 80025e4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80025e6:	60cf      	str	r7, [r1, #12]
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 80025e8:	78a1      	ldrb	r1, [r4, #2]
 80025ea:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80025ec:	9121      	str	r1, [sp, #132]	; 0x84
 80025ee:	7861      	ldrb	r1, [r4, #1]
 80025f0:	3701      	adds	r7, #1
 80025f2:	468c      	mov	ip, r1
 80025f4:	0719      	lsls	r1, r3, #28
 80025f6:	0f89      	lsrs	r1, r1, #30
 80025f8:	9114      	str	r1, [sp, #80]	; 0x50
 80025fa:	0919      	lsrs	r1, r3, #4
 80025fc:	4029      	ands	r1, r5
 80025fe:	9113      	str	r1, [sp, #76]	; 0x4c
 8002600:	0959      	lsrs	r1, r3, #5
 8002602:	4029      	ands	r1, r5
 8002604:	9112      	str	r1, [sp, #72]	; 0x48
 8002606:	0999      	lsrs	r1, r3, #6
 8002608:	09db      	lsrs	r3, r3, #7
 800260a:	9310      	str	r3, [sp, #64]	; 0x40
 800260c:	0973      	lsrs	r3, r6, #5
 800260e:	402b      	ands	r3, r5
 8002610:	930f      	str	r3, [sp, #60]	; 0x3c
			1<<((buf[12]&3)<<2 | buf[13]>>6), /* write_bl_len */
 8002612:	230c      	movs	r3, #12
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002614:	4029      	ands	r1, r5
 8002616:	9111      	str	r1, [sp, #68]	; 0x44
			1<<((buf[12]&3)<<2 | buf[13]>>6), /* write_bl_len */
 8002618:	0081      	lsls	r1, r0, #2
 800261a:	400b      	ands	r3, r1
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 800261c:	0029      	movs	r1, r5
			1<<((buf[12]&3)<<2 | buf[13]>>6), /* write_bl_len */
 800261e:	09b6      	lsrs	r6, r6, #6
 8002620:	4333      	orrs	r3, r6
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002622:	4099      	lsls	r1, r3
 8002624:	910e      	str	r1, [sp, #56]	; 0x38
 8002626:	0029      	movs	r1, r5
			buf[12]>>7, 1<<((buf[12]>>2)&7),
 8002628:	06c3      	lsls	r3, r0, #27
 800262a:	0f5b      	lsrs	r3, r3, #29
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 800262c:	4099      	lsls	r1, r3
			(buf[11]&0x7f) + 1, /* write protect group size */
 800262e:	237f      	movs	r3, #127	; 0x7f
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002630:	09c0      	lsrs	r0, r0, #7
 8002632:	900c      	str	r0, [sp, #48]	; 0x30
			((buf[10]&0x3f)<<1 | buf[11]>>7) + 1, /* erase sector size */
 8002634:	207e      	movs	r0, #126	; 0x7e
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002636:	910d      	str	r1, [sp, #52]	; 0x34
			(buf[11]&0x7f) + 1, /* write protect group size */
 8002638:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800263a:	400b      	ands	r3, r1
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 800263c:	3301      	adds	r3, #1
 800263e:	930b      	str	r3, [sp, #44]	; 0x2c
			((buf[10]&0x3f)<<1 | buf[11]>>7) + 1, /* erase sector size */
 8002640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4003      	ands	r3, r0
 8002646:	09c8      	lsrs	r0, r1, #7
 8002648:	4303      	orrs	r3, r0
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 800264a:	3301      	adds	r3, #1
 800264c:	930a      	str	r3, [sp, #40]	; 0x28
 800264e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002650:	0998      	lsrs	r0, r3, #6
 8002652:	4028      	ands	r0, r5
 8002654:	9009      	str	r0, [sp, #36]	; 0x24
			buf[7]<<16 | buf[8]<<8 | buf[9], /* c_size */
 8002656:	79e1      	ldrb	r1, [r4, #7]
 8002658:	7a23      	ldrb	r3, [r4, #8]
 800265a:	0409      	lsls	r1, r1, #16
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	430b      	orrs	r3, r1
 8002660:	7a61      	ldrb	r1, [r4, #9]
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002662:	430b      	orrs	r3, r1
 8002664:	9308      	str	r3, [sp, #32]
 8002666:	0913      	lsrs	r3, r2, #4
 8002668:	402b      	ands	r3, r5
 800266a:	9307      	str	r3, [sp, #28]
 800266c:	0953      	lsrs	r3, r2, #5
 800266e:	402b      	ands	r3, r5
 8002670:	9306      	str	r3, [sp, #24]
 8002672:	0993      	lsrs	r3, r2, #6
 8002674:	402b      	ands	r3, r5
 8002676:	9305      	str	r3, [sp, #20]
			buf[4], buf[5] >> 4, 1<<(buf[5] & 0xf), /* classes, read_bl_len */
 8002678:	230f      	movs	r3, #15
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 800267a:	09d2      	lsrs	r2, r2, #7
 800267c:	9204      	str	r2, [sp, #16]
			buf[4], buf[5] >> 4, 1<<(buf[5] & 0xf), /* classes, read_bl_len */
 800267e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002680:	0039      	movs	r1, r7
			buf[4], buf[5] >> 4, 1<<(buf[5] & 0xf), /* classes, read_bl_len */
 8002682:	4013      	ands	r3, r2
	printf("CSD: CSD v%i taac:%02x, nsac:%i, tran:%02x, classes:%02x%x, read_bl_len:%i, "
 8002684:	409d      	lsls	r5, r3
 8002686:	0913      	lsrs	r3, r2, #4
 8002688:	9503      	str	r5, [sp, #12]
 800268a:	9302      	str	r3, [sp, #8]
 800268c:	7923      	ldrb	r3, [r4, #4]
 800268e:	4662      	mov	r2, ip
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	78e3      	ldrb	r3, [r4, #3]
 8002694:	4806      	ldr	r0, [pc, #24]	; (80026b0 <hwif_init+0x40c>)
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800269a:	f000 fdfd 	bl	8003298 <iprintf>
	capacity = buf[7]<<16 | buf[8]<<8 | buf[9]; /* in 512 kB */
 800269e:	79e7      	ldrb	r7, [r4, #7]
 80026a0:	7a23      	ldrb	r3, [r4, #8]
 80026a2:	043f      	lsls	r7, r7, #16
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	431f      	orrs	r7, r3
 80026a8:	7a63      	ldrb	r3, [r4, #9]
 80026aa:	431f      	orrs	r7, r3
	capacity *= 1024; /* in 512 B sectors */
 80026ac:	02bf      	lsls	r7, r7, #10
 80026ae:	e762      	b.n	8002576 <hwif_init+0x2d2>
 80026b0:	08004482 	.word	0x08004482

080026b4 <sd_read>:

int sd_read(hwif* hw, uint32_t address, uint8_t *buf)
{
 80026b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80026b6:	300c      	adds	r0, #12
 80026b8:	000e      	movs	r6, r1
 80026ba:	9201      	str	r2, [sp, #4]
 80026bc:	0004      	movs	r4, r0
	int r;
	int tries = 10;

	r = sd_readsector(hw, address, buf);
 80026be:	f7ff fd15 	bl	80020ec <sd_readsector.isra.5>

	while (r < 0 && tries--) {
 80026c2:	270b      	movs	r7, #11
	r = sd_readsector(hw, address, buf);
 80026c4:	0005      	movs	r5, r0
	while (r < 0 && tries--) {
 80026c6:	2d00      	cmp	r5, #0
 80026c8:	da07      	bge.n	80026da <sd_read+0x26>
 80026ca:	3f01      	subs	r7, #1
 80026cc:	2f00      	cmp	r7, #0
 80026ce:	d106      	bne.n	80026de <sd_read+0x2a>
		sd_read_status(hw);

		r = sd_readsector(hw, address, buf);
	}
	if (tries == -1)
		printf("%s: couldn't read sector %li\n", __func__, address);
 80026d0:	0032      	movs	r2, r6
 80026d2:	490a      	ldr	r1, [pc, #40]	; (80026fc <sd_read+0x48>)
 80026d4:	480a      	ldr	r0, [pc, #40]	; (8002700 <sd_read+0x4c>)
 80026d6:	f000 fddf 	bl	8003298 <iprintf>

	return r;
}
 80026da:	0028      	movs	r0, r5
 80026dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sd_init(hw) != 0)
 80026de:	0020      	movs	r0, r4
 80026e0:	f7ff faa4 	bl	8001c2c <sd_init.isra.1>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d1ee      	bne.n	80026c6 <sd_read+0x12>
		sd_read_status(hw);
 80026e8:	f7ff fa5c 	bl	8001ba4 <sd_read_status.isra.2>
		r = sd_readsector(hw, address, buf);
 80026ec:	9a01      	ldr	r2, [sp, #4]
 80026ee:	0031      	movs	r1, r6
 80026f0:	0020      	movs	r0, r4
 80026f2:	f7ff fcfb 	bl	80020ec <sd_readsector.isra.5>
 80026f6:	0005      	movs	r5, r0
 80026f8:	e7e5      	b.n	80026c6 <sd_read+0x12>
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	08004259 	.word	0x08004259
 8002700:	08004793 	.word	0x08004793

08002704 <sd_write>:

int sd_write(hwif* hw, uint32_t address,const uint8_t *buf)
{
 8002704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002706:	300c      	adds	r0, #12
 8002708:	000e      	movs	r6, r1
 800270a:	9201      	str	r2, [sp, #4]
 800270c:	0004      	movs	r4, r0
	int r;
	int tries = 10;

	r = sd_writesector(hw, address, buf);
 800270e:	f7ff fd3f 	bl	8002190 <sd_writesector.isra.7>

	while (r < 0 && tries--) {
 8002712:	270b      	movs	r7, #11
	r = sd_writesector(hw, address, buf);
 8002714:	0005      	movs	r5, r0
	while (r < 0 && tries--) {
 8002716:	2d00      	cmp	r5, #0
 8002718:	da07      	bge.n	800272a <sd_write+0x26>
 800271a:	3f01      	subs	r7, #1
 800271c:	2f00      	cmp	r7, #0
 800271e:	d106      	bne.n	800272e <sd_write+0x2a>
		sd_read_status(hw);

		r = sd_writesector(hw, address, buf);
	}
	if (tries == -1)
		printf("%s: couldn't write sector %li\n", __func__, address);
 8002720:	0032      	movs	r2, r6
 8002722:	490a      	ldr	r1, [pc, #40]	; (800274c <sd_write+0x48>)
 8002724:	480a      	ldr	r0, [pc, #40]	; (8002750 <sd_write+0x4c>)
 8002726:	f000 fdb7 	bl	8003298 <iprintf>

	return r;
 800272a:	0028      	movs	r0, r5
 800272c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (sd_init(hw) != 0)
 800272e:	0020      	movs	r0, r4
 8002730:	f7ff fa7c 	bl	8001c2c <sd_init.isra.1>
 8002734:	2800      	cmp	r0, #0
 8002736:	d1ee      	bne.n	8002716 <sd_write+0x12>
		sd_read_status(hw);
 8002738:	f7ff fa34 	bl	8001ba4 <sd_read_status.isra.2>
		r = sd_writesector(hw, address, buf);
 800273c:	9a01      	ldr	r2, [sp, #4]
 800273e:	0031      	movs	r1, r6
 8002740:	0020      	movs	r0, r4
 8002742:	f7ff fd25 	bl	8002190 <sd_writesector.isra.7>
 8002746:	0005      	movs	r5, r0
 8002748:	e7e5      	b.n	8002716 <sd_write+0x12>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	08004261 	.word	0x08004261
 8002750:	080047de 	.word	0x080047de

08002754 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8002754:	6802      	ldr	r2, [r0, #0]
 8002756:	1e13      	subs	r3, r2, #0
 8002758:	d103      	bne.n	8002762 <get_ldnumber+0xe>
	int vol = -1;
 800275a:	2001      	movs	r0, #1
 800275c:	4240      	negs	r0, r0
 800275e:	e00e      	b.n	800277e <get_ldnumber+0x2a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002760:	3301      	adds	r3, #1
 8002762:	7819      	ldrb	r1, [r3, #0]
 8002764:	291f      	cmp	r1, #31
 8002766:	d909      	bls.n	800277c <get_ldnumber+0x28>
 8002768:	293a      	cmp	r1, #58	; 0x3a
 800276a:	d1f9      	bne.n	8002760 <get_ldnumber+0xc>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 800276c:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800276e:	428b      	cmp	r3, r1
 8002770:	d1f3      	bne.n	800275a <get_ldnumber+0x6>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8002772:	7812      	ldrb	r2, [r2, #0]
 8002774:	2a30      	cmp	r2, #48	; 0x30
 8002776:	d1f0      	bne.n	800275a <get_ldnumber+0x6>
					vol = (int)i;
					*path = ++tt;
 8002778:	3301      	adds	r3, #1
 800277a:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800277c:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800277e:	4770      	bx	lr

08002780 <sync_window.part.1>:
FRESULT sync_window (	/* FR_OK:succeeded, !=0:error */
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002782:	0007      	movs	r7, r0
		wsect = fs->winsect;	/* Current sector number */
 8002784:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002786:	3730      	adds	r7, #48	; 0x30
 8002788:	2301      	movs	r3, #1
FRESULT sync_window (	/* FR_OK:succeeded, !=0:error */
 800278a:	0004      	movs	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800278c:	002a      	movs	r2, r5
 800278e:	7840      	ldrb	r0, [r0, #1]
 8002790:	0039      	movs	r1, r7
 8002792:	f7ff f941 	bl	8001a18 <disk_write>
			res = FR_DISK_ERR;
 8002796:	2301      	movs	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8002798:	2800      	cmp	r0, #0
 800279a:	d106      	bne.n	80027aa <sync_window.part.1+0x2a>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800279c:	6a23      	ldr	r3, [r4, #32]
 800279e:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 80027a0:	7120      	strb	r0, [r4, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80027a2:	1aeb      	subs	r3, r5, r3
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d302      	bcc.n	80027ae <sync_window.part.1+0x2e>
	FRESULT res = FR_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80027ae:	78e6      	ldrb	r6, [r4, #3]
 80027b0:	2e01      	cmp	r6, #1
 80027b2:	d9f9      	bls.n	80027a8 <sync_window.part.1+0x28>
					wsect += fs->fsize;
 80027b4:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80027b6:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80027b8:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80027ba:	002a      	movs	r2, r5
 80027bc:	2301      	movs	r3, #1
 80027be:	0039      	movs	r1, r7
 80027c0:	f7ff f92a 	bl	8001a18 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80027c4:	3e01      	subs	r6, #1
 80027c6:	e7f3      	b.n	80027b0 <sync_window.part.1+0x30>

080027c8 <sync_window>:
	FRESULT res = FR_OK;
 80027c8:	2300      	movs	r3, #0
{
 80027ca:	b510      	push	{r4, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80027cc:	7902      	ldrb	r2, [r0, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d002      	beq.n	80027d8 <sync_window+0x10>
 80027d2:	f7ff ffd5 	bl	8002780 <sync_window.part.1>
 80027d6:	0003      	movs	r3, r0
}
 80027d8:	0018      	movs	r0, r3
 80027da:	bd10      	pop	{r4, pc}

080027dc <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80027dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
{
 80027de:	b570      	push	{r4, r5, r6, lr}
 80027e0:	0004      	movs	r4, r0
 80027e2:	000e      	movs	r6, r1
	FRESULT res = FR_OK;
 80027e4:	2500      	movs	r5, #0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80027e6:	428b      	cmp	r3, r1
 80027e8:	d010      	beq.n	800280c <move_window+0x30>
		res = sync_window(fs);		/* Write-back changes */
 80027ea:	f7ff ffed 	bl	80027c8 <sync_window>
 80027ee:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {			/* Fill sector window with new data */
 80027f0:	d10c      	bne.n	800280c <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80027f2:	0021      	movs	r1, r4
 80027f4:	7860      	ldrb	r0, [r4, #1]
 80027f6:	2301      	movs	r3, #1
 80027f8:	0032      	movs	r2, r6
 80027fa:	3130      	adds	r1, #48	; 0x30
 80027fc:	f7ff f8f4 	bl	80019e8 <disk_read>
 8002800:	2800      	cmp	r0, #0
 8002802:	d002      	beq.n	800280a <move_window+0x2e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002804:	2601      	movs	r6, #1
				res = FR_DISK_ERR;
 8002806:	3501      	adds	r5, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002808:	4276      	negs	r6, r6
			fs->winsect = sector;
 800280a:	62e6      	str	r6, [r4, #44]	; 0x2c
}
 800280c:	0028      	movs	r0, r5
 800280e:	bd70      	pop	{r4, r5, r6, pc}

08002810 <check_fs>:
BYTE check_fs (	/* 0:Valid FAT-BS, 1:Valid BS but not FAT, 2:Not a BS, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002810:	2300      	movs	r3, #0
{
 8002812:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002814:	7103      	strb	r3, [r0, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800281a:	0004      	movs	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800281c:	f7ff ffde 	bl	80027dc <move_window>
		return 3;
 8002820:	2303      	movs	r3, #3
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002822:	2800      	cmp	r0, #0
 8002824:	d124      	bne.n	8002870 <check_fs+0x60>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002826:	4b13      	ldr	r3, [pc, #76]	; (8002874 <check_fs+0x64>)
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <check_fs+0x68>)
 800282a:	5ce3      	ldrb	r3, [r4, r3]
 800282c:	5ca2      	ldrb	r2, [r4, r2]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	431a      	orrs	r2, r3
 8002832:	4912      	ldr	r1, [pc, #72]	; (800287c <check_fs+0x6c>)
 8002834:	b212      	sxth	r2, r2
		return 2;
 8002836:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002838:	428a      	cmp	r2, r1
 800283a:	d119      	bne.n	8002870 <check_fs+0x60>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800283c:	0023      	movs	r3, r4
 800283e:	3366      	adds	r3, #102	; 0x66
 8002840:	885a      	ldrh	r2, [r3, #2]
 8002842:	8819      	ldrh	r1, [r3, #0]
 8002844:	0412      	lsls	r2, r2, #16
 8002846:	430a      	orrs	r2, r1
 8002848:	490d      	ldr	r1, [pc, #52]	; (8002880 <check_fs+0x70>)
 800284a:	0212      	lsls	r2, r2, #8
 800284c:	0a12      	lsrs	r2, r2, #8
		return 0;
 800284e:	0003      	movs	r3, r0
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002850:	428a      	cmp	r2, r1
 8002852:	d00d      	beq.n	8002870 <check_fs+0x60>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002854:	0023      	movs	r3, r4
 8002856:	3484      	adds	r4, #132	; 0x84
 8002858:	3382      	adds	r3, #130	; 0x82
 800285a:	8818      	ldrh	r0, [r3, #0]
 800285c:	8823      	ldrh	r3, [r4, #0]
 800285e:	4a09      	ldr	r2, [pc, #36]	; (8002884 <check_fs+0x74>)
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	4303      	orrs	r3, r0
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	189b      	adds	r3, r3, r2
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	4183      	sbcs	r3, r0
		return 3;
 800286e:	b2db      	uxtb	r3, r3
		return 0;

	return 1;
}
 8002870:	0018      	movs	r0, r3
 8002872:	bd10      	pop	{r4, pc}
 8002874:	0000022f 	.word	0x0000022f
 8002878:	0000022e 	.word	0x0000022e
 800287c:	ffffaa55 	.word	0xffffaa55
 8002880:	00544146 	.word	0x00544146
 8002884:	ffabbeba 	.word	0xffabbeba

08002888 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8002888:	2300      	movs	r3, #0
{
 800288a:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 800288c:	6003      	str	r3, [r0, #0]
{
 800288e:	b089      	sub	sp, #36	; 0x24
 8002890:	0007      	movs	r7, r0
	vol = get_ldnumber(path);
 8002892:	0008      	movs	r0, r1
{
 8002894:	0016      	movs	r6, r2
	vol = get_ldnumber(path);
 8002896:	f7ff ff5d 	bl	8002754 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800289a:	230b      	movs	r3, #11
	vol = get_ldnumber(path);
 800289c:	1e05      	subs	r5, r0, #0
	if (vol < 0) return FR_INVALID_DRIVE;
 800289e:	db14      	blt.n	80028ca <find_volume+0x42>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80028a0:	4b91      	ldr	r3, [pc, #580]	; (8002ae8 <find_volume+0x260>)
 80028a2:	0082      	lsls	r2, r0, #2
 80028a4:	58d4      	ldr	r4, [r2, r3]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80028a6:	230c      	movs	r3, #12
 80028a8:	2c00      	cmp	r4, #0
 80028aa:	d00e      	beq.n	80028ca <find_volume+0x42>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */

	if (fs->fs_type) {					/* If the volume has been mounted */
 80028ac:	7823      	ldrb	r3, [r4, #0]
	*rfs = fs;							/* Return pointer to the file system object */
 80028ae:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00d      	beq.n	80028d0 <find_volume+0x48>
		stat = disk_status(fs->drv);
 80028b4:	7860      	ldrb	r0, [r4, #1]
 80028b6:	f7ff f885 	bl	80019c4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80028ba:	2301      	movs	r3, #1
 80028bc:	4003      	ands	r3, r0
 80028be:	d107      	bne.n	80028d0 <find_volume+0x48>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80028c0:	2e00      	cmp	r6, #0
 80028c2:	d002      	beq.n	80028ca <find_volume+0x42>
 80028c4:	0742      	lsls	r2, r0, #29
 80028c6:	d500      	bpl.n	80028ca <find_volume+0x42>
				return FR_WRITE_PROTECTED;
 80028c8:	230a      	movs	r3, #10
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	b009      	add	sp, #36	; 0x24
 80028ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80028d0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80028d2:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 80028d4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80028d6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80028d8:	f7ff f87c 	bl	80019d4 <disk_initialize>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80028dc:	2303      	movs	r3, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 80028de:	07c2      	lsls	r2, r0, #31
 80028e0:	d4f3      	bmi.n	80028ca <find_volume+0x42>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 80028e2:	2e00      	cmp	r6, #0
 80028e4:	d001      	beq.n	80028ea <find_volume+0x62>
 80028e6:	0743      	lsls	r3, r0, #29
 80028e8:	d4ee      	bmi.n	80028c8 <find_volume+0x40>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80028ea:	2100      	movs	r1, #0
 80028ec:	0020      	movs	r0, r4
 80028ee:	f7ff ff8f 	bl	8002810 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80028f2:	2801      	cmp	r0, #1
 80028f4:	d12c      	bne.n	8002950 <find_volume+0xc8>
 80028f6:	0023      	movs	r3, r4
 80028f8:	2000      	movs	r0, #0
 80028fa:	33f7      	adds	r3, #247	; 0xf7
 80028fc:	33ff      	adds	r3, #255	; 0xff
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80028fe:	1f1a      	subs	r2, r3, #4
 8002900:	7811      	ldrb	r1, [r2, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	4291      	cmp	r1, r2
 8002906:	d009      	beq.n	800291c <find_volume+0x94>
 8002908:	7859      	ldrb	r1, [r3, #1]
 800290a:	781a      	ldrb	r2, [r3, #0]
 800290c:	0209      	lsls	r1, r1, #8
 800290e:	4311      	orrs	r1, r2
 8002910:	789a      	ldrb	r2, [r3, #2]
 8002912:	0412      	lsls	r2, r2, #16
 8002914:	4311      	orrs	r1, r2
 8002916:	78da      	ldrb	r2, [r3, #3]
 8002918:	0612      	lsls	r2, r2, #24
 800291a:	430a      	orrs	r2, r1
 800291c:	a904      	add	r1, sp, #16
 800291e:	5042      	str	r2, [r0, r1]
 8002920:	3004      	adds	r0, #4
 8002922:	3310      	adds	r3, #16
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002924:	2810      	cmp	r0, #16
 8002926:	d1ea      	bne.n	80028fe <find_volume+0x76>
 8002928:	2600      	movs	r6, #0
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800292a:	2702      	movs	r7, #2
			bsect = br[i];
 800292c:	ab04      	add	r3, sp, #16
 800292e:	599d      	ldr	r5, [r3, r6]
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002930:	0038      	movs	r0, r7
 8002932:	2d00      	cmp	r5, #0
 8002934:	d005      	beq.n	8002942 <find_volume+0xba>
 8002936:	0029      	movs	r1, r5
 8002938:	0020      	movs	r0, r4
 800293a:	f7ff ff69 	bl	8002810 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800293e:	2800      	cmp	r0, #0
 8002940:	d00e      	beq.n	8002960 <find_volume+0xd8>
 8002942:	3604      	adds	r6, #4
 8002944:	2e10      	cmp	r6, #16
 8002946:	d1f1      	bne.n	800292c <find_volume+0xa4>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002948:	2301      	movs	r3, #1
 800294a:	2803      	cmp	r0, #3
 800294c:	d105      	bne.n	800295a <find_volume+0xd2>
 800294e:	e7bc      	b.n	80028ca <find_volume+0x42>
 8002950:	2301      	movs	r3, #1
 8002952:	2803      	cmp	r0, #3
 8002954:	d0b9      	beq.n	80028ca <find_volume+0x42>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002956:	2800      	cmp	r0, #0
 8002958:	d001      	beq.n	800295e <find_volume+0xd6>
 800295a:	230d      	movs	r3, #13
 800295c:	e7b5      	b.n	80028ca <find_volume+0x42>
	bsect = 0;
 800295e:	0005      	movs	r5, r0
	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002960:	0023      	movs	r3, r4
 8002962:	333c      	adds	r3, #60	; 0x3c
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	3b01      	subs	r3, #1
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	0212      	lsls	r2, r2, #8
 800296c:	4313      	orrs	r3, r2
 800296e:	2280      	movs	r2, #128	; 0x80
 8002970:	b21b      	sxth	r3, r3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4293      	cmp	r3, r2
 8002976:	d1f0      	bne.n	800295a <find_volume+0xd2>
	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8002978:	0023      	movs	r3, r4
 800297a:	3347      	adds	r3, #71	; 0x47
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	3b01      	subs	r3, #1
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	0212      	lsls	r2, r2, #8
 8002984:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 8002986:	d100      	bne.n	800298a <find_volume+0x102>
 8002988:	e09a      	b.n	8002ac0 <find_volume+0x238>
 800298a:	9300      	str	r3, [sp, #0]
	fs->fsize = fasize;
 800298c:	9b00      	ldr	r3, [sp, #0]
 800298e:	61a3      	str	r3, [r4, #24]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8002990:	0023      	movs	r3, r4
 8002992:	3340      	adds	r3, #64	; 0x40
 8002994:	781b      	ldrb	r3, [r3, #0]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002996:	1e5a      	subs	r2, r3, #1
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8002998:	70e3      	strb	r3, [r4, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800299a:	2a01      	cmp	r2, #1
 800299c:	d8dd      	bhi.n	800295a <find_volume+0xd2>
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 800299e:	0022      	movs	r2, r4
 80029a0:	323d      	adds	r2, #61	; 0x3d
 80029a2:	7811      	ldrb	r1, [r2, #0]
 80029a4:	70a1      	strb	r1, [r4, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80029a6:	2900      	cmp	r1, #0
 80029a8:	d0d7      	beq.n	800295a <find_volume+0xd2>
 80029aa:	1e4a      	subs	r2, r1, #1
 80029ac:	4211      	tst	r1, r2
 80029ae:	d1d4      	bne.n	800295a <find_volume+0xd2>
	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80029b0:	0022      	movs	r2, r4
 80029b2:	3242      	adds	r2, #66	; 0x42
 80029b4:	7817      	ldrb	r7, [r2, #0]
 80029b6:	3a01      	subs	r2, #1
 80029b8:	7812      	ldrb	r2, [r2, #0]
 80029ba:	023f      	lsls	r7, r7, #8
 80029bc:	4317      	orrs	r7, r2
 80029be:	8127      	strh	r7, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80029c0:	073a      	lsls	r2, r7, #28
 80029c2:	d1ca      	bne.n	800295a <find_volume+0xd2>
	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 80029c4:	0022      	movs	r2, r4
 80029c6:	3244      	adds	r2, #68	; 0x44
 80029c8:	7810      	ldrb	r0, [r2, #0]
 80029ca:	3a01      	subs	r2, #1
 80029cc:	7812      	ldrb	r2, [r2, #0]
 80029ce:	0200      	lsls	r0, r0, #8
 80029d0:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 80029d2:	d100      	bne.n	80029d6 <find_volume+0x14e>
 80029d4:	6d20      	ldr	r0, [r4, #80]	; 0x50
	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80029d6:	0022      	movs	r2, r4
 80029d8:	0026      	movs	r6, r4
 80029da:	323f      	adds	r2, #63	; 0x3f
 80029dc:	7812      	ldrb	r2, [r2, #0]
 80029de:	363e      	adds	r6, #62	; 0x3e
 80029e0:	7836      	ldrb	r6, [r6, #0]
 80029e2:	0212      	lsls	r2, r2, #8
 80029e4:	4316      	orrs	r6, r2
 80029e6:	9601      	str	r6, [sp, #4]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 80029e8:	d0b7      	beq.n	800295a <find_volume+0xd2>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80029ea:	9a00      	ldr	r2, [sp, #0]
 80029ec:	435a      	muls	r2, r3
 80029ee:	9203      	str	r2, [sp, #12]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 80029f0:	093b      	lsrs	r3, r7, #4
 80029f2:	9a03      	ldr	r2, [sp, #12]
 80029f4:	199b      	adds	r3, r3, r6
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	9302      	str	r3, [sp, #8]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80029fa:	4298      	cmp	r0, r3
 80029fc:	d3ad      	bcc.n	800295a <find_volume+0xd2>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 80029fe:	1ac0      	subs	r0, r0, r3
 8002a00:	f7fd fb82 	bl	8000108 <__udivsi3>
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d0a8      	beq.n	800295a <find_volume+0xd2>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002a08:	4b38      	ldr	r3, [pc, #224]	; (8002aec <find_volume+0x264>)
	fmt = FS_FAT12;
 8002a0a:	2601      	movs	r6, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002a0c:	4298      	cmp	r0, r3
 8002a0e:	d904      	bls.n	8002a1a <find_volume+0x192>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002a10:	4e37      	ldr	r6, [pc, #220]	; (8002af0 <find_volume+0x268>)
 8002a12:	4286      	cmp	r6, r0
 8002a14:	41b6      	sbcs	r6, r6
 8002a16:	4276      	negs	r6, r6
 8002a18:	3602      	adds	r6, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002a1a:	9b01      	ldr	r3, [sp, #4]
	fs->database = bsect + sysect;						/* Data start sector */
 8002a1c:	9a02      	ldr	r2, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002a1e:	3002      	adds	r0, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002a20:	18eb      	adds	r3, r5, r3
	fs->database = bsect + sysect;						/* Data start sector */
 8002a22:	18aa      	adds	r2, r5, r2
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002a24:	6160      	str	r0, [r4, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8002a26:	61e5      	str	r5, [r4, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002a28:	6223      	str	r3, [r4, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 8002a2a:	62a2      	str	r2, [r4, #40]	; 0x28
	if (fmt == FS_FAT32) {
 8002a2c:	2e03      	cmp	r6, #3
 8002a2e:	d149      	bne.n	8002ac4 <find_volume+0x23c>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002a30:	2f00      	cmp	r7, #0
 8002a32:	d192      	bne.n	800295a <find_volume+0xd2>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8002a34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002a36:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8002a38:	6263      	str	r3, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002a3a:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <find_volume+0x26c>)
 8002a3c:	18c0      	adds	r0, r0, r3
 8002a3e:	9b00      	ldr	r3, [sp, #0]
 8002a40:	0a40      	lsrs	r0, r0, #9
 8002a42:	4283      	cmp	r3, r0
 8002a44:	d389      	bcc.n	800295a <find_volume+0xd2>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002a46:	2301      	movs	r3, #1
 8002a48:	425b      	negs	r3, r3
 8002a4a:	6123      	str	r3, [r4, #16]
 8002a4c:	60e3      	str	r3, [r4, #12]
	fs->fsi_flag = 0x80;
 8002a4e:	3381      	adds	r3, #129	; 0x81
 8002a50:	7163      	strb	r3, [r4, #5]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo == 1 */
 8002a52:	2e03      	cmp	r6, #3
 8002a54:	d12b      	bne.n	8002aae <find_volume+0x226>
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 8002a56:	0023      	movs	r3, r4
 8002a58:	3361      	adds	r3, #97	; 0x61
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	0212      	lsls	r2, r2, #8
 8002a62:	4313      	orrs	r3, r2
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d122      	bne.n	8002aae <find_volume+0x226>
		&& move_window(fs, bsect + 1) == FR_OK)
 8002a68:	1c69      	adds	r1, r5, #1
 8002a6a:	0020      	movs	r0, r4
 8002a6c:	f7ff feb6 	bl	80027dc <move_window>
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d11c      	bne.n	8002aae <find_volume+0x226>
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <find_volume+0x270>)
		fs->fsi_flag = 0;
 8002a76:	7160      	strb	r0, [r4, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002a78:	5ce2      	ldrb	r2, [r4, r3]
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <find_volume+0x274>)
 8002a7c:	0212      	lsls	r2, r2, #8
 8002a7e:	5ce3      	ldrb	r3, [r4, r3]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <find_volume+0x278>)
 8002a84:	b21b      	sxth	r3, r3
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d111      	bne.n	8002aae <find_volume+0x226>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <find_volume+0x27c>)
 8002a8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10d      	bne.n	8002aae <find_volume+0x226>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
 8002a92:	2285      	movs	r2, #133	; 0x85
 8002a94:	0092      	lsls	r2, r2, #2
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <find_volume+0x280>)
 8002a98:	58a2      	ldr	r2, [r4, r2]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d107      	bne.n	8002aae <find_volume+0x226>
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
 8002a9e:	2386      	movs	r3, #134	; 0x86
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	58e3      	ldr	r3, [r4, r3]
 8002aa4:	6123      	str	r3, [r4, #16]
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
 8002aa6:	2387      	movs	r3, #135	; 0x87
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	58e3      	ldr	r3, [r4, r3]
 8002aac:	60e3      	str	r3, [r4, #12]
	fs->id = ++Fsid;	/* File system mount ID */
 8002aae:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <find_volume+0x284>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8002ab0:	7026      	strb	r6, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8002ab2:	8813      	ldrh	r3, [r2, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	8013      	strh	r3, [r2, #0]
 8002aba:	80e3      	strh	r3, [r4, #6]
	return FR_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e704      	b.n	80028ca <find_volume+0x42>
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 8002ac0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ac2:	e762      	b.n	800298a <find_volume+0x102>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002ac4:	2f00      	cmp	r7, #0
 8002ac6:	d100      	bne.n	8002aca <find_volume+0x242>
 8002ac8:	e747      	b.n	800295a <find_volume+0xd2>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002aca:	9a03      	ldr	r2, [sp, #12]
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	6263      	str	r3, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002ad0:	2e02      	cmp	r6, #2
 8002ad2:	d101      	bne.n	8002ad8 <find_volume+0x250>
 8002ad4:	0040      	lsls	r0, r0, #1
 8002ad6:	e7b0      	b.n	8002a3a <find_volume+0x1b2>
 8002ad8:	2303      	movs	r3, #3
 8002ada:	2201      	movs	r2, #1
 8002adc:	4343      	muls	r3, r0
 8002ade:	4010      	ands	r0, r2
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	1818      	adds	r0, r3, r0
 8002ae4:	e7a9      	b.n	8002a3a <find_volume+0x1b2>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	20000084 	.word	0x20000084
 8002aec:	00000ff5 	.word	0x00000ff5
 8002af0:	0000fff5 	.word	0x0000fff5
 8002af4:	000001ff 	.word	0x000001ff
 8002af8:	0000022f 	.word	0x0000022f
 8002afc:	0000022e 	.word	0x0000022e
 8002b00:	ffffaa55 	.word	0xffffaa55
 8002b04:	41615252 	.word	0x41615252
 8002b08:	61417272 	.word	0x61417272
 8002b0c:	20000088 	.word	0x20000088

08002b10 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8002b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b12:	9001      	str	r0, [sp, #4]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 8002b14:	a803      	add	r0, sp, #12
{
 8002b16:	0014      	movs	r4, r2
 8002b18:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8002b1a:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8002b1c:	f7ff fe1a 	bl	8002754 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002b20:	220b      	movs	r2, #11
 8002b22:	2800      	cmp	r0, #0
 8002b24:	db16      	blt.n	8002b54 <f_mount+0x44>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8002b26:	4a0d      	ldr	r2, [pc, #52]	; (8002b5c <f_mount+0x4c>)
 8002b28:	0080      	lsls	r0, r0, #2
 8002b2a:	5883      	ldr	r3, [r0, r2]

	if (cfs) {
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8002b30:	2100      	movs	r1, #0
 8002b32:	7019      	strb	r1, [r3, #0]
	}

	if (fs) {
 8002b34:	9b01      	ldr	r3, [sp, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <f_mount+0x2e>
		fs->fs_type = 0;				/* Clear new fs object */
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	7019      	strb	r1, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8002b3e:	5013      	str	r3, [r2, r0]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8002b40:	1e1a      	subs	r2, r3, #0
 8002b42:	d007      	beq.n	8002b54 <f_mount+0x44>
 8002b44:	2200      	movs	r2, #0
 8002b46:	2c01      	cmp	r4, #1
 8002b48:	d104      	bne.n	8002b54 <f_mount+0x44>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 8002b4a:	4669      	mov	r1, sp
 8002b4c:	a801      	add	r0, sp, #4
 8002b4e:	f7ff fe9b 	bl	8002888 <find_volume>
 8002b52:	0002      	movs	r2, r0
	LEAVE_FF(fs, res);
}
 8002b54:	0010      	movs	r0, r2
 8002b56:	b004      	add	sp, #16
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	20000084 	.word	0x20000084

08002b60 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002b60:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b62:	2001      	movs	r0, #1
 8002b64:	4a08      	ldr	r2, [pc, #32]	; (8002b88 <MX_DMA_Init+0x28>)
 8002b66:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002b68:	4301      	orrs	r1, r0
 8002b6a:	6311      	str	r1, [r2, #48]	; 0x30
 8002b6c:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002b6e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b70:	4003      	ands	r3, r0
 8002b72:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002b74:	0011      	movs	r1, r2
 8002b76:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b78:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002b7a:	f7fd fc79 	bl	8000470 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002b7e:	200b      	movs	r0, #11
 8002b80:	f7fd fca6 	bl	80004d0 <HAL_NVIC_EnableIRQ>

}
 8002b84:	bd07      	pop	{r0, r1, r2, pc}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	40021000 	.word	0x40021000

08002b8c <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b8c:	2004      	movs	r0, #4
{
 8002b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b90:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <MX_GPIO_Init+0xf0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_SD_N_GPIO_Port, AUDIO_SD_N_Pin, GPIO_PIN_RESET);
 8002b94:	2480      	movs	r4, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002b98:	26a0      	movs	r6, #160	; 0xa0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9a:	4301      	orrs	r1, r0
 8002b9c:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9e:	2102      	movs	r1, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
{
 8002ba2:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba4:	4002      	ands	r2, r0
 8002ba6:	9200      	str	r2, [sp, #0]
 8002ba8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(AUDIO_SD_N_GPIO_Port, AUDIO_SD_N_Pin, GPIO_PIN_RESET);
 8002bac:	01a4      	lsls	r4, r4, #6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	432a      	orrs	r2, r5
 8002bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002bb4:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb6:	402a      	ands	r2, r5
 8002bb8:	9201      	str	r2, [sp, #4]
 8002bba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(AUDIO_SD_N_GPIO_Port, AUDIO_SD_N_Pin, GPIO_PIN_RESET);
 8002bbe:	4830      	ldr	r0, [pc, #192]	; (8002c80 <MX_GPIO_Init+0xf4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(AUDIO_SD_N_GPIO_Port, AUDIO_SD_N_Pin, GPIO_PIN_RESET);
 8002bc6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc8:	400b      	ands	r3, r1
 8002bca:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(AUDIO_SD_N_GPIO_Port, AUDIO_SD_N_Pin, GPIO_PIN_RESET);
 8002bcc:	0021      	movs	r1, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(AUDIO_SD_N_GPIO_Port, AUDIO_SD_N_Pin, GPIO_PIN_RESET);
 8002bd0:	f7fd fefc 	bl	80009cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002bd4:	002a      	movs	r2, r5
 8002bd6:	0030      	movs	r0, r6
 8002bd8:	2110      	movs	r1, #16
 8002bda:	f7fd fef7 	bl	80009cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DOT_STAR_DATA_Pin|DOT_STAR_CLK_Pin|NFC_RST_PDN_N_Pin|NFC_RST_N_Pin, GPIO_PIN_RESET);
 8002bde:	2114      	movs	r1, #20
 8002be0:	4f28      	ldr	r7, [pc, #160]	; (8002c84 <MX_GPIO_Init+0xf8>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	0038      	movs	r0, r7
 8002be6:	31ff      	adds	r1, #255	; 0xff
 8002be8:	f7fd fef0 	bl	80009cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8002bec:	21c0      	movs	r1, #192	; 0xc0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	0030      	movs	r0, r6
 8002bf2:	0109      	lsls	r1, r1, #4
 8002bf4:	f7fd feea 	bl	80009cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AUDIO_SD_N_Pin;
 8002bf8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(AUDIO_SD_N_GPIO_Port, &GPIO_InitStruct);
 8002bfc:	a903      	add	r1, sp, #12
 8002bfe:	4820      	ldr	r0, [pc, #128]	; (8002c80 <MX_GPIO_Init+0xf4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c00:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c04:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(AUDIO_SD_N_GPIO_Port, &GPIO_InitStruct);
 8002c06:	f7fd fe25 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin|SD_SW_Pin;
 8002c0a:	230c      	movs	r3, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0c:	a903      	add	r1, sp, #12
 8002c0e:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SD_DETECT_Pin|SD_SW_Pin;
 8002c10:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c12:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c14:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c16:	f7fd fe1d 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002c1a:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	a903      	add	r1, sp, #12
 8002c1e:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002c20:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c22:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c24:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c26:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f7fd fe14 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DOT_STAR_DATA_Pin|DOT_STAR_CLK_Pin|NFC_RST_PDN_N_Pin|NFC_RST_N_Pin;
 8002c2c:	2314      	movs	r3, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = DOT_STAR_DATA_Pin|DOT_STAR_CLK_Pin|NFC_RST_PDN_N_Pin|NFC_RST_N_Pin;
 8002c30:	33ff      	adds	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c32:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = DOT_STAR_DATA_Pin|DOT_STAR_CLK_Pin|NFC_RST_PDN_N_Pin|NFC_RST_N_Pin;
 8002c34:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c36:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3c:	f7fd fe0a 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8002c40:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c42:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8002c44:	011b      	lsls	r3, r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin;
 8002c48:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	f7fd fe00 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = XL_INT_1_Pin;
 8002c54:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(XL_INT_1_GPIO_Port, &GPIO_InitStruct);
 8002c56:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = XL_INT_1_Pin;
 8002c58:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(XL_INT_1_GPIO_Port, &GPIO_InitStruct);
 8002c5a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = XL_INT_1_Pin;
 8002c5c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c5e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(XL_INT_1_GPIO_Port, &GPIO_InitStruct);
 8002c62:	f7fd fdf7 	bl	8000854 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = XL_INT_2_Pin|NFC_IRQ_Pin;
 8002c66:	2382      	movs	r3, #130	; 0x82
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = XL_INT_2_Pin|NFC_IRQ_Pin;
 8002c6a:	009b      	lsls	r3, r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6c:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = XL_INT_2_Pin|NFC_IRQ_Pin;
 8002c6e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c70:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c74:	f7fd fdee 	bl	8000854 <HAL_GPIO_Init>

}
 8002c78:	b009      	add	sp, #36	; 0x24
 8002c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	50000800 	.word	0x50000800
 8002c84:	50000400 	.word	0x50000400

08002c88 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002c88:	b510      	push	{r4, lr}

  hi2c1.Instance = I2C1;
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <MX_I2C1_Init+0x5c>)
 8002c8c:	4c16      	ldr	r4, [pc, #88]	; (8002ce8 <MX_I2C1_Init+0x60>)
  hi2c1.Init.Timing = 0x00303D5B;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c8e:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 8002c90:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002c92:	4b16      	ldr	r3, [pc, #88]	; (8002cec <MX_I2C1_Init+0x64>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c94:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00303D5B;
 8002c96:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c98:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c9a:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8002c9c:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c9e:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ca0:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ca2:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ca4:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ca6:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ca8:	f7fd fe9a 	bl	80009e0 <HAL_I2C_Init>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d003      	beq.n	8002cb8 <MX_I2C1_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002cb0:	214c      	movs	r1, #76	; 0x4c
 8002cb2:	480f      	ldr	r0, [pc, #60]	; (8002cf0 <MX_I2C1_Init+0x68>)
 8002cb4:	f000 f934 	bl	8002f20 <_Error_Handler>
  }

    /**Configure Analogue filter 
    */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cb8:	2100      	movs	r1, #0
 8002cba:	0020      	movs	r0, r4
 8002cbc:	f7fd fee6 	bl	8000a8c <HAL_I2CEx_ConfigAnalogFilter>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d003      	beq.n	8002ccc <MX_I2C1_Init+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002cc4:	2153      	movs	r1, #83	; 0x53
 8002cc6:	480a      	ldr	r0, [pc, #40]	; (8002cf0 <MX_I2C1_Init+0x68>)
 8002cc8:	f000 f92a 	bl	8002f20 <_Error_Handler>
  }

    /**Configure Digital filter 
    */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ccc:	2100      	movs	r1, #0
 8002cce:	0020      	movs	r0, r4
 8002cd0:	f7fd ff02 	bl	8000ad8 <HAL_I2CEx_ConfigDigitalFilter>
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	d003      	beq.n	8002ce0 <MX_I2C1_Init+0x58>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002cd8:	215a      	movs	r1, #90	; 0x5a
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <MX_I2C1_Init+0x68>)
 8002cdc:	f000 f920 	bl	8002f20 <_Error_Handler>
  }

}
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	40005400 	.word	0x40005400
 8002ce8:	200000ac 	.word	0x200000ac
 8002cec:	00303d5b 	.word	0x00303d5b
 8002cf0:	0800494b 	.word	0x0800494b

08002cf4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 8002cf6:	4b0d      	ldr	r3, [pc, #52]	; (8002d2c <HAL_I2C_MspInit+0x38>)
 8002cf8:	6802      	ldr	r2, [r0, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d113      	bne.n	8002d26 <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cfe:	23c0      	movs	r3, #192	; 0xc0
 8002d00:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d02:	3bae      	subs	r3, #174	; 0xae
 8002d04:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002d10:	3b02      	subs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	4807      	ldr	r0, [pc, #28]	; (8002d30 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002d14:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d16:	f7fd fd9d 	bl	8000854 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	4a05      	ldr	r2, [pc, #20]	; (8002d34 <HAL_I2C_MspInit+0x40>)
 8002d1e:	039b      	lsls	r3, r3, #14
 8002d20:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002d22:	430b      	orrs	r3, r1
 8002d24:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002d26:	b007      	add	sp, #28
 8002d28:	bd00      	pop	{pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40005400 	.word	0x40005400
 8002d30:	50000400 	.word	0x50000400
 8002d34:	40021000 	.word	0x40021000

08002d38 <MX_I2S2_Init>:

/* I2S2 init function */
void MX_I2S2_Init(void)
{

  hi2s2.Instance = SPI2;
 8002d38:	480b      	ldr	r0, [pc, #44]	; (8002d68 <MX_I2S2_Init+0x30>)
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_I2S2_Init+0x34>)
{
 8002d3c:	b510      	push	{r4, lr}
  hi2s2.Instance = SPI2;
 8002d3e:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002d46:	2300      	movs	r3, #0
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8002d48:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <MX_I2S2_Init+0x38>)
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8002d4a:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8002d4c:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002d4e:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8002d50:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8002d52:	6183      	str	r3, [r0, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8002d54:	f7fd fee4 	bl	8000b20 <HAL_I2S_Init>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d003      	beq.n	8002d64 <MX_I2S2_Init+0x2c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002d5c:	214c      	movs	r1, #76	; 0x4c
 8002d5e:	4805      	ldr	r0, [pc, #20]	; (8002d74 <MX_I2S2_Init+0x3c>)
 8002d60:	f000 f8de 	bl	8002f20 <_Error_Handler>
  }

}
 8002d64:	bd10      	pop	{r4, pc}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	20000138 	.word	0x20000138
 8002d6c:	40003800 	.word	0x40003800
 8002d70:	0000ac44 	.word	0x0000ac44
 8002d74:	08004958 	.word	0x08004958

08002d78 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8002d78:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2sHandle->Instance==SPI2)
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_I2S_MspInit+0x70>)
 8002d7c:	6802      	ldr	r2, [r0, #0]
{
 8002d7e:	b087      	sub	sp, #28
 8002d80:	0006      	movs	r6, r0
  if(i2sHandle->Instance==SPI2)
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d12d      	bne.n	8002de2 <HAL_I2S_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d86:	2380      	movs	r3, #128	; 0x80
 8002d88:	4a18      	ldr	r2, [pc, #96]	; (8002dec <HAL_I2S_MspInit+0x74>)
 8002d8a:	01db      	lsls	r3, r3, #7
 8002d8c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	2500      	movs	r5, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d90:	430b      	orrs	r3, r1
 8002d92:	6393      	str	r3, [r2, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002d94:	23b0      	movs	r3, #176	; 0xb0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002d98:	021b      	lsls	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	4815      	ldr	r0, [pc, #84]	; (8002df0 <HAL_I2S_MspInit+0x78>)
 8002d9c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002d9e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002da6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	f7fd fd54 	bl	8000854 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002dac:	4c11      	ldr	r4, [pc, #68]	; (8002df4 <HAL_I2S_MspInit+0x7c>)
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_I2S_MspInit+0x80>)
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002db0:	0020      	movs	r0, r4
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8002db2:	6023      	str	r3, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002db4:	2310      	movs	r3, #16
 8002db6:	60a3      	str	r3, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002db8:	3370      	adds	r3, #112	; 0x70
 8002dba:	6123      	str	r3, [r4, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dbc:	3380      	adds	r3, #128	; 0x80
 8002dbe:	6163      	str	r3, [r4, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	00db      	lsls	r3, r3, #3
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8002dc4:	6067      	str	r7, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc6:	60e5      	str	r5, [r4, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002dc8:	61a3      	str	r3, [r4, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002dca:	61e5      	str	r5, [r4, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dcc:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002dce:	f7fd fbb7 	bl	8000540 <HAL_DMA_Init>
 8002dd2:	42a8      	cmp	r0, r5
 8002dd4:	d003      	beq.n	8002dde <HAL_I2S_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002dd6:	2176      	movs	r1, #118	; 0x76
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <HAL_I2S_MspInit+0x84>)
 8002dda:	f000 f8a1 	bl	8002f20 <_Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8002dde:	62f4      	str	r4, [r6, #44]	; 0x2c
 8002de0:	62a6      	str	r6, [r4, #40]	; 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002de2:	b007      	add	sp, #28
 8002de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	40003800 	.word	0x40003800
 8002dec:	40021000 	.word	0x40021000
 8002df0:	50000400 	.word	0x50000400
 8002df4:	200000f8 	.word	0x200000f8
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	08004958 	.word	0x08004958

08002e00 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e00:	491f      	ldr	r1, [pc, #124]	; (8002e80 <SystemClock_Config+0x80>)
 8002e02:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <SystemClock_Config+0x84>)
 8002e04:	680b      	ldr	r3, [r1, #0]
{
 8002e06:	b510      	push	{r4, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e08:	401a      	ands	r2, r3
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e12:	2302      	movs	r3, #2
{
 8002e14:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e16:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002e18:	330e      	adds	r3, #14
 8002e1a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e1c:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e1e:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e20:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e22:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002e24:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e26:	f7fd ff8f 	bl	8000d48 <HAL_RCC_OscConfig>
 8002e2a:	1e01      	subs	r1, r0, #0
 8002e2c:	d000      	beq.n	8002e30 <SystemClock_Config+0x30>
 8002e2e:	e7fe      	b.n	8002e2e <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e30:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e32:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e34:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e36:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e38:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e3a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002e3c:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002e3e:	f7fe fa2f 	bl	80012a0 <HAL_RCC_ClockConfig>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d000      	beq.n	8002e48 <SystemClock_Config+0x48>
 8002e46:	e7fe      	b.n	8002e46 <SystemClock_Config+0x46>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e48:	2308      	movs	r3, #8
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e4a:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e4c:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e4e:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e50:	f7fe fae4 	bl	800141c <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	1e04      	subs	r4, r0, #0
 8002e56:	d000      	beq.n	8002e5a <SystemClock_Config+0x5a>
 8002e58:	e7fe      	b.n	8002e58 <SystemClock_Config+0x58>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002e5a:	f7fe fad9 	bl	8001410 <HAL_RCC_GetHCLKFreq>
 8002e5e:	21fa      	movs	r1, #250	; 0xfa
 8002e60:	0089      	lsls	r1, r1, #2
 8002e62:	f7fd f951 	bl	8000108 <__udivsi3>
 8002e66:	f7fd fb3d 	bl	80004e4 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e6a:	2004      	movs	r0, #4
 8002e6c:	f7fd fb54 	bl	8000518 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002e70:	2001      	movs	r0, #1
 8002e72:	0022      	movs	r2, r4
 8002e74:	0021      	movs	r1, r4
 8002e76:	4240      	negs	r0, r0
 8002e78:	f7fd fafa 	bl	8000470 <HAL_NVIC_SetPriority>
}
 8002e7c:	b01c      	add	sp, #112	; 0x70
 8002e7e:	bd10      	pop	{r4, pc}
 8002e80:	40007000 	.word	0x40007000
 8002e84:	ffffe7ff 	.word	0xffffe7ff

08002e88 <main>:
{
 8002e88:	b570      	push	{r4, r5, r6, lr}
 8002e8a:	b0c0      	sub	sp, #256	; 0x100
  HAL_Init();
 8002e8c:	f7fd fac6 	bl	800041c <HAL_Init>
  SystemClock_Config();
 8002e90:	f7ff ffb6 	bl	8002e00 <SystemClock_Config>
  MX_GPIO_Init();
 8002e94:	f7ff fe7a 	bl	8002b8c <MX_GPIO_Init>
  MX_DMA_Init();
 8002e98:	f7ff fe62 	bl	8002b60 <MX_DMA_Init>
  MX_I2C1_Init();
 8002e9c:	f7ff fef4 	bl	8002c88 <MX_I2C1_Init>
  MX_I2S2_Init();
 8002ea0:	f7ff ff4a 	bl	8002d38 <MX_I2S2_Init>
  MX_SPI1_Init();
 8002ea4:	f000 f83e 	bl	8002f24 <MX_SPI1_Init>
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002ea8:	20a0      	movs	r0, #160	; 0xa0
 8002eaa:	2201      	movs	r2, #1
 8002eac:	2110      	movs	r1, #16
 8002eae:	05c0      	lsls	r0, r0, #23
 8002eb0:	f7fd fd8c 	bl	80009cc <HAL_GPIO_WritePin>
  fr = f_mount(&FatFs, "", 1);
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4916      	ldr	r1, [pc, #88]	; (8002f10 <main+0x88>)
 8002eb8:	4816      	ldr	r0, [pc, #88]	; (8002f14 <main+0x8c>)
 8002eba:	f7ff fe29 	bl	8002b10 <f_mount>
  uint16_t sound[128] = {0, 0,   803, 0,  1598, 0,  2378, 0,  3135, 0,  3862, 0,  4551, 0,
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	4915      	ldr	r1, [pc, #84]	; (8002f18 <main+0x90>)
 8002ec2:	0052      	lsls	r2, r2, #1
  fr = f_mount(&FatFs, "", 1);
 8002ec4:	0006      	movs	r6, r0
  uint16_t sound[128] = {0, 0,   803, 0,  1598, 0,  2378, 0,  3135, 0,  3862, 0,  4551, 0,
 8002ec6:	4668      	mov	r0, sp
 8002ec8:	f000 f92c 	bl	8003124 <memcpy>
	GPIO_PinState sd_present = HAL_GPIO_ReadPin(SD_SW_GPIO_Port, SD_SW_Pin);
 8002ecc:	24a0      	movs	r4, #160	; 0xa0
  HAL_I2S_Transmit_DMA(&hi2s2, &sound[0], 128);    // play buffer
 8002ece:	2280      	movs	r2, #128	; 0x80
 8002ed0:	4669      	mov	r1, sp
 8002ed2:	4812      	ldr	r0, [pc, #72]	; (8002f1c <main+0x94>)
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8002ed4:	2580      	movs	r5, #128	; 0x80
  HAL_I2S_Transmit_DMA(&hi2s2, &sound[0], 128);    // play buffer
 8002ed6:	f7fd fe7b 	bl	8000bd0 <HAL_I2S_Transmit_DMA>
	GPIO_PinState sd_present = HAL_GPIO_ReadPin(SD_SW_GPIO_Port, SD_SW_Pin);
 8002eda:	05e4      	lsls	r4, r4, #23
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8002edc:	012d      	lsls	r5, r5, #4
	GPIO_PinState sd_present = HAL_GPIO_ReadPin(SD_SW_GPIO_Port, SD_SW_Pin);
 8002ede:	20a0      	movs	r0, #160	; 0xa0
 8002ee0:	2108      	movs	r1, #8
 8002ee2:	05c0      	lsls	r0, r0, #23
 8002ee4:	f7fd fd6c 	bl	80009c0 <HAL_GPIO_ReadPin>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8002ee8:	2201      	movs	r2, #1
	if (sd_present == GPIO_PIN_RESET) {
 8002eea:	2800      	cmp	r0, #0
 8002eec:	d000      	beq.n	8002ef0 <main+0x68>
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	0029      	movs	r1, r5
 8002ef2:	0020      	movs	r0, r4
 8002ef4:	f7fd fd6a 	bl	80009cc <HAL_GPIO_WritePin>
	if (fr == FR_OK) {
 8002ef8:	2e00      	cmp	r6, #0
 8002efa:	d104      	bne.n	8002f06 <main+0x7e>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	0020      	movs	r0, r4
 8002f00:	00c9      	lsls	r1, r1, #3
 8002f02:	f7fd fd69 	bl	80009d8 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 8002f06:	20c8      	movs	r0, #200	; 0xc8
 8002f08:	f7fd faa6 	bl	8000458 <HAL_Delay>
  {
 8002f0c:	e7e7      	b.n	8002ede <main+0x56>
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	080045ec 	.word	0x080045ec
 8002f14:	20000174 	.word	0x20000174
 8002f18:	08004118 	.word	0x08004118
 8002f1c:	20000138 	.word	0x20000138

08002f20 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002f20:	e7fe      	b.n	8002f20 <_Error_Handler>
	...

08002f24 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8002f24:	480f      	ldr	r0, [pc, #60]	; (8002f64 <MX_SPI1_Init+0x40>)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <MX_SPI1_Init+0x44>)
{
 8002f28:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8002f2a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f2c:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f2e:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f34:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f3a:	3af9      	subs	r2, #249	; 0xf9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002f3c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f3e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f40:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f42:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f44:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f46:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f48:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f4a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002f4c:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002f4e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8002f50:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f52:	f7fe fb7f 	bl	8001654 <HAL_SPI_Init>
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d003      	beq.n	8002f62 <MX_SPI1_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002f5a:	214f      	movs	r1, #79	; 0x4f
 8002f5c:	4803      	ldr	r0, [pc, #12]	; (8002f6c <MX_SPI1_Init+0x48>)
 8002f5e:	f7ff ffdf 	bl	8002f20 <_Error_Handler>
  }

}
 8002f62:	bd10      	pop	{r4, pc}
 8002f64:	200003a4 	.word	0x200003a4
 8002f68:	40013000 	.word	0x40013000
 8002f6c:	08004965 	.word	0x08004965

08002f70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f70:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_SPI_MspInit+0x50>)
 8002f74:	6802      	ldr	r2, [r0, #0]
{
 8002f76:	b086      	sub	sp, #24
  if(spiHandle->Instance==SPI1)
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d11f      	bne.n	8002fbc <HAL_SPI_MspInit+0x4c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	4a11      	ldr	r2, [pc, #68]	; (8002fc4 <HAL_SPI_MspInit+0x54>)
 8002f80:	015b      	lsls	r3, r3, #5
 8002f82:	6b51      	ldr	r1, [r2, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f84:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6353      	str	r3, [r2, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f8c:	23a0      	movs	r3, #160	; 0xa0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f90:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	a901      	add	r1, sp, #4
 8002f94:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f9c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002f9e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f7fd fc58 	bl	8000854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fa4:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa6:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fa8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fac:	3b3f      	subs	r3, #63	; 0x3f
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fae:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002fb6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f7fd fc4c 	bl	8000854 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002fbc:	b006      	add	sp, #24
 8002fbe:	bd70      	pop	{r4, r5, r6, pc}
 8002fc0:	40013000 	.word	0x40013000
 8002fc4:	40021000 	.word	0x40021000

08002fc8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_MspInit+0x3c>)
{
 8002fcc:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002fd0:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002fda:	0552      	lsls	r2, r2, #21
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	4240      	negs	r0, r0
 8002fe4:	0011      	movs	r1, r2
 8002fe6:	f7fd fa43 	bl	8000470 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002fea:	2200      	movs	r2, #0
 8002fec:	2002      	movs	r0, #2
 8002fee:	0011      	movs	r1, r2
 8002ff0:	4240      	negs	r0, r0
 8002ff2:	f7fd fa3d 	bl	8000470 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	4240      	negs	r0, r0
 8002ffe:	f7fd fa37 	bl	8000470 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003002:	bd10      	pop	{r4, pc}
 8003004:	40021000 	.word	0x40021000

08003008 <NMI_Handler>:
 8003008:	4770      	bx	lr

0800300a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800300a:	e7fe      	b.n	800300a <HardFault_Handler>

0800300c <SVC_Handler>:
 800300c:	4770      	bx	lr

0800300e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800300e:	4770      	bx	lr

08003010 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003010:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003012:	f7fd fa13 	bl	800043c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003016:	f7fd fa8e 	bl	8000536 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800301a:	bd10      	pop	{r4, pc}

0800301c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
*/
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800301c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800301e:	4802      	ldr	r0, [pc, #8]	; (8003028 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8003020:	f7fd fb50 	bl	80006c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003024:	bd10      	pop	{r4, pc}
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	200000f8 	.word	0x200000f8

0800302c <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 800302c:	2280      	movs	r2, #128	; 0x80
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <SystemInit+0x44>)
 8003030:	0052      	lsls	r2, r2, #1
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	490e      	ldr	r1, [pc, #56]	; (8003074 <SystemInit+0x48>)
 800303c:	400a      	ands	r2, r1
 800303e:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	490d      	ldr	r1, [pc, #52]	; (8003078 <SystemInit+0x4c>)
 8003044:	400a      	ands	r2, r1
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003046:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003048:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	438a      	bics	r2, r1
 800304e:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	490a      	ldr	r1, [pc, #40]	; (800307c <SystemInit+0x50>)
 8003054:	400a      	ands	r2, r1
 8003056:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	4909      	ldr	r1, [pc, #36]	; (8003080 <SystemInit+0x54>)
 800305c:	400a      	ands	r2, r1
 800305e:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003060:	2200      	movs	r2, #0
 8003062:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003064:	2280      	movs	r2, #128	; 0x80
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <SystemInit+0x58>)
 8003068:	0512      	lsls	r2, r2, #20
 800306a:	609a      	str	r2, [r3, #8]
#endif
}
 800306c:	4770      	bx	lr
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	40021000 	.word	0x40021000
 8003074:	88ff400c 	.word	0x88ff400c
 8003078:	fef6fff6 	.word	0xfef6fff6
 800307c:	fffbffff 	.word	0xfffbffff
 8003080:	ff02ffff 	.word	0xff02ffff
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003088:	480d      	ldr	r0, [pc, #52]	; (80030c0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800308a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800308c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800308e:	e003      	b.n	8003098 <LoopCopyDataInit>

08003090 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8003092:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003094:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003096:	3104      	adds	r1, #4

08003098 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8003098:	480b      	ldr	r0, [pc, #44]	; (80030c8 <LoopForever+0xa>)
  ldr  r3, =_edata
 800309a:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <LoopForever+0xe>)
  adds  r2, r0, r1
 800309c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800309e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030a0:	d3f6      	bcc.n	8003090 <CopyDataInit>
  ldr  r2, =_sbss
 80030a2:	4a0b      	ldr	r2, [pc, #44]	; (80030d0 <LoopForever+0x12>)
  b  LoopFillZerobss
 80030a4:	e002      	b.n	80030ac <LoopFillZerobss>

080030a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80030a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80030a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030aa:	3204      	adds	r2, #4

080030ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 80030ac:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <LoopForever+0x16>)
  cmp  r2, r3
 80030ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030b0:	d3f9      	bcc.n	80030a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80030b2:	f7ff ffbb 	bl	800302c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030b6:	f000 f811 	bl	80030dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030ba:	f7ff fee5 	bl	8002e88 <main>

080030be <LoopForever>:

LoopForever:
    b LoopForever
 80030be:	e7fe      	b.n	80030be <LoopForever>
   ldr   r0, =_estack
 80030c0:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 80030c4:	08004a2c 	.word	0x08004a2c
  ldr  r0, =_sdata
 80030c8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030cc:	20000068 	.word	0x20000068
  ldr  r2, =_sbss
 80030d0:	20000068 	.word	0x20000068
  ldr  r3, = _ebss
 80030d4:	20000400 	.word	0x20000400

080030d8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d8:	e7fe      	b.n	80030d8 <ADC1_COMP_IRQHandler>
	...

080030dc <__libc_init_array>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	2600      	movs	r6, #0
 80030e0:	4d0c      	ldr	r5, [pc, #48]	; (8003114 <__libc_init_array+0x38>)
 80030e2:	4c0d      	ldr	r4, [pc, #52]	; (8003118 <__libc_init_array+0x3c>)
 80030e4:	1b64      	subs	r4, r4, r5
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	42a6      	cmp	r6, r4
 80030ea:	d109      	bne.n	8003100 <__libc_init_array+0x24>
 80030ec:	2600      	movs	r6, #0
 80030ee:	f001 f807 	bl	8004100 <_init>
 80030f2:	4d0a      	ldr	r5, [pc, #40]	; (800311c <__libc_init_array+0x40>)
 80030f4:	4c0a      	ldr	r4, [pc, #40]	; (8003120 <__libc_init_array+0x44>)
 80030f6:	1b64      	subs	r4, r4, r5
 80030f8:	10a4      	asrs	r4, r4, #2
 80030fa:	42a6      	cmp	r6, r4
 80030fc:	d105      	bne.n	800310a <__libc_init_array+0x2e>
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
 8003100:	00b3      	lsls	r3, r6, #2
 8003102:	58eb      	ldr	r3, [r5, r3]
 8003104:	4798      	blx	r3
 8003106:	3601      	adds	r6, #1
 8003108:	e7ee      	b.n	80030e8 <__libc_init_array+0xc>
 800310a:	00b3      	lsls	r3, r6, #2
 800310c:	58eb      	ldr	r3, [r5, r3]
 800310e:	4798      	blx	r3
 8003110:	3601      	adds	r6, #1
 8003112:	e7f2      	b.n	80030fa <__libc_init_array+0x1e>
 8003114:	08004a24 	.word	0x08004a24
 8003118:	08004a24 	.word	0x08004a24
 800311c:	08004a24 	.word	0x08004a24
 8003120:	08004a28 	.word	0x08004a28

08003124 <memcpy>:
 8003124:	2300      	movs	r3, #0
 8003126:	b510      	push	{r4, lr}
 8003128:	429a      	cmp	r2, r3
 800312a:	d100      	bne.n	800312e <memcpy+0xa>
 800312c:	bd10      	pop	{r4, pc}
 800312e:	5ccc      	ldrb	r4, [r1, r3]
 8003130:	54c4      	strb	r4, [r0, r3]
 8003132:	3301      	adds	r3, #1
 8003134:	e7f8      	b.n	8003128 <memcpy+0x4>

08003136 <memset>:
 8003136:	0003      	movs	r3, r0
 8003138:	1882      	adds	r2, r0, r2
 800313a:	4293      	cmp	r3, r2
 800313c:	d100      	bne.n	8003140 <memset+0xa>
 800313e:	4770      	bx	lr
 8003140:	7019      	strb	r1, [r3, #0]
 8003142:	3301      	adds	r3, #1
 8003144:	e7f9      	b.n	800313a <memset+0x4>
	...

08003148 <_free_r>:
 8003148:	b570      	push	{r4, r5, r6, lr}
 800314a:	0005      	movs	r5, r0
 800314c:	2900      	cmp	r1, #0
 800314e:	d010      	beq.n	8003172 <_free_r+0x2a>
 8003150:	1f0c      	subs	r4, r1, #4
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da00      	bge.n	800315a <_free_r+0x12>
 8003158:	18e4      	adds	r4, r4, r3
 800315a:	0028      	movs	r0, r5
 800315c:	f000 fbf8 	bl	8003950 <__malloc_lock>
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <_free_r+0x90>)
 8003162:	6813      	ldr	r3, [r2, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <_free_r+0x2c>
 8003168:	6063      	str	r3, [r4, #4]
 800316a:	6014      	str	r4, [r2, #0]
 800316c:	0028      	movs	r0, r5
 800316e:	f000 fbf0 	bl	8003952 <__malloc_unlock>
 8003172:	bd70      	pop	{r4, r5, r6, pc}
 8003174:	42a3      	cmp	r3, r4
 8003176:	d909      	bls.n	800318c <_free_r+0x44>
 8003178:	6821      	ldr	r1, [r4, #0]
 800317a:	1860      	adds	r0, r4, r1
 800317c:	4283      	cmp	r3, r0
 800317e:	d1f3      	bne.n	8003168 <_free_r+0x20>
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	1841      	adds	r1, r0, r1
 8003186:	6021      	str	r1, [r4, #0]
 8003188:	e7ee      	b.n	8003168 <_free_r+0x20>
 800318a:	0013      	movs	r3, r2
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	2a00      	cmp	r2, #0
 8003190:	d001      	beq.n	8003196 <_free_r+0x4e>
 8003192:	42a2      	cmp	r2, r4
 8003194:	d9f9      	bls.n	800318a <_free_r+0x42>
 8003196:	6819      	ldr	r1, [r3, #0]
 8003198:	1858      	adds	r0, r3, r1
 800319a:	42a0      	cmp	r0, r4
 800319c:	d10b      	bne.n	80031b6 <_free_r+0x6e>
 800319e:	6820      	ldr	r0, [r4, #0]
 80031a0:	1809      	adds	r1, r1, r0
 80031a2:	1858      	adds	r0, r3, r1
 80031a4:	6019      	str	r1, [r3, #0]
 80031a6:	4282      	cmp	r2, r0
 80031a8:	d1e0      	bne.n	800316c <_free_r+0x24>
 80031aa:	6810      	ldr	r0, [r2, #0]
 80031ac:	6852      	ldr	r2, [r2, #4]
 80031ae:	1841      	adds	r1, r0, r1
 80031b0:	6019      	str	r1, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	e7da      	b.n	800316c <_free_r+0x24>
 80031b6:	42a0      	cmp	r0, r4
 80031b8:	d902      	bls.n	80031c0 <_free_r+0x78>
 80031ba:	230c      	movs	r3, #12
 80031bc:	602b      	str	r3, [r5, #0]
 80031be:	e7d5      	b.n	800316c <_free_r+0x24>
 80031c0:	6821      	ldr	r1, [r4, #0]
 80031c2:	1860      	adds	r0, r4, r1
 80031c4:	4282      	cmp	r2, r0
 80031c6:	d103      	bne.n	80031d0 <_free_r+0x88>
 80031c8:	6810      	ldr	r0, [r2, #0]
 80031ca:	6852      	ldr	r2, [r2, #4]
 80031cc:	1841      	adds	r1, r0, r1
 80031ce:	6021      	str	r1, [r4, #0]
 80031d0:	6062      	str	r2, [r4, #4]
 80031d2:	605c      	str	r4, [r3, #4]
 80031d4:	e7ca      	b.n	800316c <_free_r+0x24>
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	2000008c 	.word	0x2000008c

080031dc <_malloc_r>:
 80031dc:	2303      	movs	r3, #3
 80031de:	b570      	push	{r4, r5, r6, lr}
 80031e0:	1ccd      	adds	r5, r1, #3
 80031e2:	439d      	bics	r5, r3
 80031e4:	3508      	adds	r5, #8
 80031e6:	0006      	movs	r6, r0
 80031e8:	2d0c      	cmp	r5, #12
 80031ea:	d21e      	bcs.n	800322a <_malloc_r+0x4e>
 80031ec:	250c      	movs	r5, #12
 80031ee:	42a9      	cmp	r1, r5
 80031f0:	d81d      	bhi.n	800322e <_malloc_r+0x52>
 80031f2:	0030      	movs	r0, r6
 80031f4:	f000 fbac 	bl	8003950 <__malloc_lock>
 80031f8:	4a25      	ldr	r2, [pc, #148]	; (8003290 <_malloc_r+0xb4>)
 80031fa:	6814      	ldr	r4, [r2, #0]
 80031fc:	0021      	movs	r1, r4
 80031fe:	2900      	cmp	r1, #0
 8003200:	d119      	bne.n	8003236 <_malloc_r+0x5a>
 8003202:	4c24      	ldr	r4, [pc, #144]	; (8003294 <_malloc_r+0xb8>)
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <_malloc_r+0x36>
 800320a:	0030      	movs	r0, r6
 800320c:	f000 f8c8 	bl	80033a0 <_sbrk_r>
 8003210:	6020      	str	r0, [r4, #0]
 8003212:	0029      	movs	r1, r5
 8003214:	0030      	movs	r0, r6
 8003216:	f000 f8c3 	bl	80033a0 <_sbrk_r>
 800321a:	1c43      	adds	r3, r0, #1
 800321c:	d12c      	bne.n	8003278 <_malloc_r+0x9c>
 800321e:	230c      	movs	r3, #12
 8003220:	0030      	movs	r0, r6
 8003222:	6033      	str	r3, [r6, #0]
 8003224:	f000 fb95 	bl	8003952 <__malloc_unlock>
 8003228:	e003      	b.n	8003232 <_malloc_r+0x56>
 800322a:	2d00      	cmp	r5, #0
 800322c:	dadf      	bge.n	80031ee <_malloc_r+0x12>
 800322e:	230c      	movs	r3, #12
 8003230:	6033      	str	r3, [r6, #0]
 8003232:	2000      	movs	r0, #0
 8003234:	bd70      	pop	{r4, r5, r6, pc}
 8003236:	680b      	ldr	r3, [r1, #0]
 8003238:	1b5b      	subs	r3, r3, r5
 800323a:	d41a      	bmi.n	8003272 <_malloc_r+0x96>
 800323c:	2b0b      	cmp	r3, #11
 800323e:	d903      	bls.n	8003248 <_malloc_r+0x6c>
 8003240:	600b      	str	r3, [r1, #0]
 8003242:	18cc      	adds	r4, r1, r3
 8003244:	6025      	str	r5, [r4, #0]
 8003246:	e003      	b.n	8003250 <_malloc_r+0x74>
 8003248:	428c      	cmp	r4, r1
 800324a:	d10e      	bne.n	800326a <_malloc_r+0x8e>
 800324c:	6863      	ldr	r3, [r4, #4]
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	0030      	movs	r0, r6
 8003252:	f000 fb7e 	bl	8003952 <__malloc_unlock>
 8003256:	0020      	movs	r0, r4
 8003258:	2207      	movs	r2, #7
 800325a:	300b      	adds	r0, #11
 800325c:	1d23      	adds	r3, r4, #4
 800325e:	4390      	bics	r0, r2
 8003260:	1ac3      	subs	r3, r0, r3
 8003262:	d0e7      	beq.n	8003234 <_malloc_r+0x58>
 8003264:	425a      	negs	r2, r3
 8003266:	50e2      	str	r2, [r4, r3]
 8003268:	e7e4      	b.n	8003234 <_malloc_r+0x58>
 800326a:	684b      	ldr	r3, [r1, #4]
 800326c:	6063      	str	r3, [r4, #4]
 800326e:	000c      	movs	r4, r1
 8003270:	e7ee      	b.n	8003250 <_malloc_r+0x74>
 8003272:	000c      	movs	r4, r1
 8003274:	6849      	ldr	r1, [r1, #4]
 8003276:	e7c2      	b.n	80031fe <_malloc_r+0x22>
 8003278:	2303      	movs	r3, #3
 800327a:	1cc4      	adds	r4, r0, #3
 800327c:	439c      	bics	r4, r3
 800327e:	42a0      	cmp	r0, r4
 8003280:	d0e0      	beq.n	8003244 <_malloc_r+0x68>
 8003282:	1a21      	subs	r1, r4, r0
 8003284:	0030      	movs	r0, r6
 8003286:	f000 f88b 	bl	80033a0 <_sbrk_r>
 800328a:	1c43      	adds	r3, r0, #1
 800328c:	d1da      	bne.n	8003244 <_malloc_r+0x68>
 800328e:	e7c6      	b.n	800321e <_malloc_r+0x42>
 8003290:	2000008c 	.word	0x2000008c
 8003294:	20000090 	.word	0x20000090

08003298 <iprintf>:
 8003298:	b40f      	push	{r0, r1, r2, r3}
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <iprintf+0x30>)
 800329c:	b513      	push	{r0, r1, r4, lr}
 800329e:	681c      	ldr	r4, [r3, #0]
 80032a0:	2c00      	cmp	r4, #0
 80032a2:	d005      	beq.n	80032b0 <iprintf+0x18>
 80032a4:	69a3      	ldr	r3, [r4, #24]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d102      	bne.n	80032b0 <iprintf+0x18>
 80032aa:	0020      	movs	r0, r4
 80032ac:	f000 fa4e 	bl	800374c <__sinit>
 80032b0:	ab05      	add	r3, sp, #20
 80032b2:	9a04      	ldr	r2, [sp, #16]
 80032b4:	68a1      	ldr	r1, [r4, #8]
 80032b6:	0020      	movs	r0, r4
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	f000 fb73 	bl	80039a4 <_vfiprintf_r>
 80032be:	bc16      	pop	{r1, r2, r4}
 80032c0:	bc08      	pop	{r3}
 80032c2:	b004      	add	sp, #16
 80032c4:	4718      	bx	r3
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	20000004 	.word	0x20000004

080032cc <_puts_r>:
 80032cc:	b570      	push	{r4, r5, r6, lr}
 80032ce:	0005      	movs	r5, r0
 80032d0:	000e      	movs	r6, r1
 80032d2:	2800      	cmp	r0, #0
 80032d4:	d004      	beq.n	80032e0 <_puts_r+0x14>
 80032d6:	6983      	ldr	r3, [r0, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <_puts_r+0x14>
 80032dc:	f000 fa36 	bl	800374c <__sinit>
 80032e0:	69ab      	ldr	r3, [r5, #24]
 80032e2:	68ac      	ldr	r4, [r5, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <_puts_r+0x22>
 80032e8:	0028      	movs	r0, r5
 80032ea:	f000 fa2f 	bl	800374c <__sinit>
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <_puts_r+0xb4>)
 80032f0:	429c      	cmp	r4, r3
 80032f2:	d10f      	bne.n	8003314 <_puts_r+0x48>
 80032f4:	686c      	ldr	r4, [r5, #4]
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	071b      	lsls	r3, r3, #28
 80032fa:	d502      	bpl.n	8003302 <_puts_r+0x36>
 80032fc:	6923      	ldr	r3, [r4, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d120      	bne.n	8003344 <_puts_r+0x78>
 8003302:	0021      	movs	r1, r4
 8003304:	0028      	movs	r0, r5
 8003306:	f000 f8b3 	bl	8003470 <__swsetup_r>
 800330a:	2800      	cmp	r0, #0
 800330c:	d01a      	beq.n	8003344 <_puts_r+0x78>
 800330e:	2001      	movs	r0, #1
 8003310:	4240      	negs	r0, r0
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <_puts_r+0xb8>)
 8003316:	429c      	cmp	r4, r3
 8003318:	d101      	bne.n	800331e <_puts_r+0x52>
 800331a:	68ac      	ldr	r4, [r5, #8]
 800331c:	e7eb      	b.n	80032f6 <_puts_r+0x2a>
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <_puts_r+0xbc>)
 8003320:	429c      	cmp	r4, r3
 8003322:	d1e8      	bne.n	80032f6 <_puts_r+0x2a>
 8003324:	68ec      	ldr	r4, [r5, #12]
 8003326:	e7e6      	b.n	80032f6 <_puts_r+0x2a>
 8003328:	3b01      	subs	r3, #1
 800332a:	3601      	adds	r6, #1
 800332c:	60a3      	str	r3, [r4, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	da04      	bge.n	800333c <_puts_r+0x70>
 8003332:	69a2      	ldr	r2, [r4, #24]
 8003334:	4293      	cmp	r3, r2
 8003336:	db16      	blt.n	8003366 <_puts_r+0x9a>
 8003338:	290a      	cmp	r1, #10
 800333a:	d014      	beq.n	8003366 <_puts_r+0x9a>
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	6022      	str	r2, [r4, #0]
 8003342:	7019      	strb	r1, [r3, #0]
 8003344:	7831      	ldrb	r1, [r6, #0]
 8003346:	68a3      	ldr	r3, [r4, #8]
 8003348:	2900      	cmp	r1, #0
 800334a:	d1ed      	bne.n	8003328 <_puts_r+0x5c>
 800334c:	3b01      	subs	r3, #1
 800334e:	60a3      	str	r3, [r4, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	da0f      	bge.n	8003374 <_puts_r+0xa8>
 8003354:	0022      	movs	r2, r4
 8003356:	310a      	adds	r1, #10
 8003358:	0028      	movs	r0, r5
 800335a:	f000 f833 	bl	80033c4 <__swbuf_r>
 800335e:	1c43      	adds	r3, r0, #1
 8003360:	d0d5      	beq.n	800330e <_puts_r+0x42>
 8003362:	200a      	movs	r0, #10
 8003364:	e7d5      	b.n	8003312 <_puts_r+0x46>
 8003366:	0022      	movs	r2, r4
 8003368:	0028      	movs	r0, r5
 800336a:	f000 f82b 	bl	80033c4 <__swbuf_r>
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	d1e8      	bne.n	8003344 <_puts_r+0x78>
 8003372:	e7cc      	b.n	800330e <_puts_r+0x42>
 8003374:	200a      	movs	r0, #10
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	6022      	str	r2, [r4, #0]
 800337c:	7018      	strb	r0, [r3, #0]
 800337e:	e7c8      	b.n	8003312 <_puts_r+0x46>
 8003380:	080049ac 	.word	0x080049ac
 8003384:	080049cc 	.word	0x080049cc
 8003388:	0800498c 	.word	0x0800498c

0800338c <puts>:
 800338c:	b510      	push	{r4, lr}
 800338e:	4b03      	ldr	r3, [pc, #12]	; (800339c <puts+0x10>)
 8003390:	0001      	movs	r1, r0
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	f7ff ff9a 	bl	80032cc <_puts_r>
 8003398:	bd10      	pop	{r4, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	20000004 	.word	0x20000004

080033a0 <_sbrk_r>:
 80033a0:	2300      	movs	r3, #0
 80033a2:	b570      	push	{r4, r5, r6, lr}
 80033a4:	4c06      	ldr	r4, [pc, #24]	; (80033c0 <_sbrk_r+0x20>)
 80033a6:	0005      	movs	r5, r0
 80033a8:	0008      	movs	r0, r1
 80033aa:	6023      	str	r3, [r4, #0]
 80033ac:	f000 fe90 	bl	80040d0 <_sbrk>
 80033b0:	1c43      	adds	r3, r0, #1
 80033b2:	d103      	bne.n	80033bc <_sbrk_r+0x1c>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d000      	beq.n	80033bc <_sbrk_r+0x1c>
 80033ba:	602b      	str	r3, [r5, #0]
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	200003fc 	.word	0x200003fc

080033c4 <__swbuf_r>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	0005      	movs	r5, r0
 80033c8:	000e      	movs	r6, r1
 80033ca:	0014      	movs	r4, r2
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d004      	beq.n	80033da <__swbuf_r+0x16>
 80033d0:	6983      	ldr	r3, [r0, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <__swbuf_r+0x16>
 80033d6:	f000 f9b9 	bl	800374c <__sinit>
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <__swbuf_r+0xa0>)
 80033dc:	429c      	cmp	r4, r3
 80033de:	d12d      	bne.n	800343c <__swbuf_r+0x78>
 80033e0:	686c      	ldr	r4, [r5, #4]
 80033e2:	69a3      	ldr	r3, [r4, #24]
 80033e4:	60a3      	str	r3, [r4, #8]
 80033e6:	89a3      	ldrh	r3, [r4, #12]
 80033e8:	071b      	lsls	r3, r3, #28
 80033ea:	d531      	bpl.n	8003450 <__swbuf_r+0x8c>
 80033ec:	6923      	ldr	r3, [r4, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d02e      	beq.n	8003450 <__swbuf_r+0x8c>
 80033f2:	6823      	ldr	r3, [r4, #0]
 80033f4:	6922      	ldr	r2, [r4, #16]
 80033f6:	b2f7      	uxtb	r7, r6
 80033f8:	1a98      	subs	r0, r3, r2
 80033fa:	6963      	ldr	r3, [r4, #20]
 80033fc:	b2f6      	uxtb	r6, r6
 80033fe:	4298      	cmp	r0, r3
 8003400:	db05      	blt.n	800340e <__swbuf_r+0x4a>
 8003402:	0021      	movs	r1, r4
 8003404:	0028      	movs	r0, r5
 8003406:	f000 f933 	bl	8003670 <_fflush_r>
 800340a:	2800      	cmp	r0, #0
 800340c:	d126      	bne.n	800345c <__swbuf_r+0x98>
 800340e:	68a3      	ldr	r3, [r4, #8]
 8003410:	3001      	adds	r0, #1
 8003412:	3b01      	subs	r3, #1
 8003414:	60a3      	str	r3, [r4, #8]
 8003416:	6823      	ldr	r3, [r4, #0]
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	6022      	str	r2, [r4, #0]
 800341c:	701f      	strb	r7, [r3, #0]
 800341e:	6963      	ldr	r3, [r4, #20]
 8003420:	4298      	cmp	r0, r3
 8003422:	d004      	beq.n	800342e <__swbuf_r+0x6a>
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	07db      	lsls	r3, r3, #31
 8003428:	d51a      	bpl.n	8003460 <__swbuf_r+0x9c>
 800342a:	2e0a      	cmp	r6, #10
 800342c:	d118      	bne.n	8003460 <__swbuf_r+0x9c>
 800342e:	0021      	movs	r1, r4
 8003430:	0028      	movs	r0, r5
 8003432:	f000 f91d 	bl	8003670 <_fflush_r>
 8003436:	2800      	cmp	r0, #0
 8003438:	d012      	beq.n	8003460 <__swbuf_r+0x9c>
 800343a:	e00f      	b.n	800345c <__swbuf_r+0x98>
 800343c:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <__swbuf_r+0xa4>)
 800343e:	429c      	cmp	r4, r3
 8003440:	d101      	bne.n	8003446 <__swbuf_r+0x82>
 8003442:	68ac      	ldr	r4, [r5, #8]
 8003444:	e7cd      	b.n	80033e2 <__swbuf_r+0x1e>
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <__swbuf_r+0xa8>)
 8003448:	429c      	cmp	r4, r3
 800344a:	d1ca      	bne.n	80033e2 <__swbuf_r+0x1e>
 800344c:	68ec      	ldr	r4, [r5, #12]
 800344e:	e7c8      	b.n	80033e2 <__swbuf_r+0x1e>
 8003450:	0021      	movs	r1, r4
 8003452:	0028      	movs	r0, r5
 8003454:	f000 f80c 	bl	8003470 <__swsetup_r>
 8003458:	2800      	cmp	r0, #0
 800345a:	d0ca      	beq.n	80033f2 <__swbuf_r+0x2e>
 800345c:	2601      	movs	r6, #1
 800345e:	4276      	negs	r6, r6
 8003460:	0030      	movs	r0, r6
 8003462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003464:	080049ac 	.word	0x080049ac
 8003468:	080049cc 	.word	0x080049cc
 800346c:	0800498c 	.word	0x0800498c

08003470 <__swsetup_r>:
 8003470:	4b36      	ldr	r3, [pc, #216]	; (800354c <__swsetup_r+0xdc>)
 8003472:	b570      	push	{r4, r5, r6, lr}
 8003474:	681d      	ldr	r5, [r3, #0]
 8003476:	0006      	movs	r6, r0
 8003478:	000c      	movs	r4, r1
 800347a:	2d00      	cmp	r5, #0
 800347c:	d005      	beq.n	800348a <__swsetup_r+0x1a>
 800347e:	69ab      	ldr	r3, [r5, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d102      	bne.n	800348a <__swsetup_r+0x1a>
 8003484:	0028      	movs	r0, r5
 8003486:	f000 f961 	bl	800374c <__sinit>
 800348a:	4b31      	ldr	r3, [pc, #196]	; (8003550 <__swsetup_r+0xe0>)
 800348c:	429c      	cmp	r4, r3
 800348e:	d10f      	bne.n	80034b0 <__swsetup_r+0x40>
 8003490:	686c      	ldr	r4, [r5, #4]
 8003492:	230c      	movs	r3, #12
 8003494:	5ee2      	ldrsh	r2, [r4, r3]
 8003496:	b293      	uxth	r3, r2
 8003498:	0719      	lsls	r1, r3, #28
 800349a:	d42d      	bmi.n	80034f8 <__swsetup_r+0x88>
 800349c:	06d9      	lsls	r1, r3, #27
 800349e:	d411      	bmi.n	80034c4 <__swsetup_r+0x54>
 80034a0:	2309      	movs	r3, #9
 80034a2:	2001      	movs	r0, #1
 80034a4:	6033      	str	r3, [r6, #0]
 80034a6:	3337      	adds	r3, #55	; 0x37
 80034a8:	4313      	orrs	r3, r2
 80034aa:	81a3      	strh	r3, [r4, #12]
 80034ac:	4240      	negs	r0, r0
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <__swsetup_r+0xe4>)
 80034b2:	429c      	cmp	r4, r3
 80034b4:	d101      	bne.n	80034ba <__swsetup_r+0x4a>
 80034b6:	68ac      	ldr	r4, [r5, #8]
 80034b8:	e7eb      	b.n	8003492 <__swsetup_r+0x22>
 80034ba:	4b27      	ldr	r3, [pc, #156]	; (8003558 <__swsetup_r+0xe8>)
 80034bc:	429c      	cmp	r4, r3
 80034be:	d1e8      	bne.n	8003492 <__swsetup_r+0x22>
 80034c0:	68ec      	ldr	r4, [r5, #12]
 80034c2:	e7e6      	b.n	8003492 <__swsetup_r+0x22>
 80034c4:	075b      	lsls	r3, r3, #29
 80034c6:	d513      	bpl.n	80034f0 <__swsetup_r+0x80>
 80034c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034ca:	2900      	cmp	r1, #0
 80034cc:	d008      	beq.n	80034e0 <__swsetup_r+0x70>
 80034ce:	0023      	movs	r3, r4
 80034d0:	3344      	adds	r3, #68	; 0x44
 80034d2:	4299      	cmp	r1, r3
 80034d4:	d002      	beq.n	80034dc <__swsetup_r+0x6c>
 80034d6:	0030      	movs	r0, r6
 80034d8:	f7ff fe36 	bl	8003148 <_free_r>
 80034dc:	2300      	movs	r3, #0
 80034de:	6363      	str	r3, [r4, #52]	; 0x34
 80034e0:	2224      	movs	r2, #36	; 0x24
 80034e2:	89a3      	ldrh	r3, [r4, #12]
 80034e4:	4393      	bics	r3, r2
 80034e6:	81a3      	strh	r3, [r4, #12]
 80034e8:	2300      	movs	r3, #0
 80034ea:	6063      	str	r3, [r4, #4]
 80034ec:	6923      	ldr	r3, [r4, #16]
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	2308      	movs	r3, #8
 80034f2:	89a2      	ldrh	r2, [r4, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	81a3      	strh	r3, [r4, #12]
 80034f8:	6923      	ldr	r3, [r4, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10b      	bne.n	8003516 <__swsetup_r+0xa6>
 80034fe:	21a0      	movs	r1, #160	; 0xa0
 8003500:	2280      	movs	r2, #128	; 0x80
 8003502:	89a3      	ldrh	r3, [r4, #12]
 8003504:	0089      	lsls	r1, r1, #2
 8003506:	0092      	lsls	r2, r2, #2
 8003508:	400b      	ands	r3, r1
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <__swsetup_r+0xa6>
 800350e:	0021      	movs	r1, r4
 8003510:	0030      	movs	r0, r6
 8003512:	f000 f9d9 	bl	80038c8 <__smakebuf_r>
 8003516:	2301      	movs	r3, #1
 8003518:	89a2      	ldrh	r2, [r4, #12]
 800351a:	4013      	ands	r3, r2
 800351c:	d011      	beq.n	8003542 <__swsetup_r+0xd2>
 800351e:	2300      	movs	r3, #0
 8003520:	60a3      	str	r3, [r4, #8]
 8003522:	6963      	ldr	r3, [r4, #20]
 8003524:	425b      	negs	r3, r3
 8003526:	61a3      	str	r3, [r4, #24]
 8003528:	2000      	movs	r0, #0
 800352a:	6923      	ldr	r3, [r4, #16]
 800352c:	4283      	cmp	r3, r0
 800352e:	d1be      	bne.n	80034ae <__swsetup_r+0x3e>
 8003530:	230c      	movs	r3, #12
 8003532:	5ee2      	ldrsh	r2, [r4, r3]
 8003534:	0613      	lsls	r3, r2, #24
 8003536:	d5ba      	bpl.n	80034ae <__swsetup_r+0x3e>
 8003538:	2340      	movs	r3, #64	; 0x40
 800353a:	4313      	orrs	r3, r2
 800353c:	81a3      	strh	r3, [r4, #12]
 800353e:	3801      	subs	r0, #1
 8003540:	e7b5      	b.n	80034ae <__swsetup_r+0x3e>
 8003542:	0792      	lsls	r2, r2, #30
 8003544:	d400      	bmi.n	8003548 <__swsetup_r+0xd8>
 8003546:	6963      	ldr	r3, [r4, #20]
 8003548:	60a3      	str	r3, [r4, #8]
 800354a:	e7ed      	b.n	8003528 <__swsetup_r+0xb8>
 800354c:	20000004 	.word	0x20000004
 8003550:	080049ac 	.word	0x080049ac
 8003554:	080049cc 	.word	0x080049cc
 8003558:	0800498c 	.word	0x0800498c

0800355c <__sflush_r>:
 800355c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800355e:	898a      	ldrh	r2, [r1, #12]
 8003560:	0005      	movs	r5, r0
 8003562:	000c      	movs	r4, r1
 8003564:	0713      	lsls	r3, r2, #28
 8003566:	d460      	bmi.n	800362a <__sflush_r+0xce>
 8003568:	684b      	ldr	r3, [r1, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	dc04      	bgt.n	8003578 <__sflush_r+0x1c>
 800356e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	dc01      	bgt.n	8003578 <__sflush_r+0x1c>
 8003574:	2000      	movs	r0, #0
 8003576:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003578:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800357a:	2f00      	cmp	r7, #0
 800357c:	d0fa      	beq.n	8003574 <__sflush_r+0x18>
 800357e:	2300      	movs	r3, #0
 8003580:	682e      	ldr	r6, [r5, #0]
 8003582:	602b      	str	r3, [r5, #0]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	015b      	lsls	r3, r3, #5
 8003588:	401a      	ands	r2, r3
 800358a:	d034      	beq.n	80035f6 <__sflush_r+0x9a>
 800358c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800358e:	89a3      	ldrh	r3, [r4, #12]
 8003590:	075b      	lsls	r3, r3, #29
 8003592:	d506      	bpl.n	80035a2 <__sflush_r+0x46>
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	1ac0      	subs	r0, r0, r3
 8003598:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <__sflush_r+0x46>
 800359e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035a0:	1ac0      	subs	r0, r0, r3
 80035a2:	0002      	movs	r2, r0
 80035a4:	6a21      	ldr	r1, [r4, #32]
 80035a6:	2300      	movs	r3, #0
 80035a8:	0028      	movs	r0, r5
 80035aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80035ac:	47b8      	blx	r7
 80035ae:	89a1      	ldrh	r1, [r4, #12]
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d106      	bne.n	80035c2 <__sflush_r+0x66>
 80035b4:	682b      	ldr	r3, [r5, #0]
 80035b6:	2b1d      	cmp	r3, #29
 80035b8:	d831      	bhi.n	800361e <__sflush_r+0xc2>
 80035ba:	4a2c      	ldr	r2, [pc, #176]	; (800366c <__sflush_r+0x110>)
 80035bc:	40da      	lsrs	r2, r3
 80035be:	07d3      	lsls	r3, r2, #31
 80035c0:	d52d      	bpl.n	800361e <__sflush_r+0xc2>
 80035c2:	2300      	movs	r3, #0
 80035c4:	6063      	str	r3, [r4, #4]
 80035c6:	6923      	ldr	r3, [r4, #16]
 80035c8:	6023      	str	r3, [r4, #0]
 80035ca:	04cb      	lsls	r3, r1, #19
 80035cc:	d505      	bpl.n	80035da <__sflush_r+0x7e>
 80035ce:	1c43      	adds	r3, r0, #1
 80035d0:	d102      	bne.n	80035d8 <__sflush_r+0x7c>
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d100      	bne.n	80035da <__sflush_r+0x7e>
 80035d8:	6560      	str	r0, [r4, #84]	; 0x54
 80035da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035dc:	602e      	str	r6, [r5, #0]
 80035de:	2900      	cmp	r1, #0
 80035e0:	d0c8      	beq.n	8003574 <__sflush_r+0x18>
 80035e2:	0023      	movs	r3, r4
 80035e4:	3344      	adds	r3, #68	; 0x44
 80035e6:	4299      	cmp	r1, r3
 80035e8:	d002      	beq.n	80035f0 <__sflush_r+0x94>
 80035ea:	0028      	movs	r0, r5
 80035ec:	f7ff fdac 	bl	8003148 <_free_r>
 80035f0:	2000      	movs	r0, #0
 80035f2:	6360      	str	r0, [r4, #52]	; 0x34
 80035f4:	e7bf      	b.n	8003576 <__sflush_r+0x1a>
 80035f6:	2301      	movs	r3, #1
 80035f8:	6a21      	ldr	r1, [r4, #32]
 80035fa:	0028      	movs	r0, r5
 80035fc:	47b8      	blx	r7
 80035fe:	1c43      	adds	r3, r0, #1
 8003600:	d1c5      	bne.n	800358e <__sflush_r+0x32>
 8003602:	682b      	ldr	r3, [r5, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0c2      	beq.n	800358e <__sflush_r+0x32>
 8003608:	2b1d      	cmp	r3, #29
 800360a:	d001      	beq.n	8003610 <__sflush_r+0xb4>
 800360c:	2b16      	cmp	r3, #22
 800360e:	d101      	bne.n	8003614 <__sflush_r+0xb8>
 8003610:	602e      	str	r6, [r5, #0]
 8003612:	e7af      	b.n	8003574 <__sflush_r+0x18>
 8003614:	2340      	movs	r3, #64	; 0x40
 8003616:	89a2      	ldrh	r2, [r4, #12]
 8003618:	4313      	orrs	r3, r2
 800361a:	81a3      	strh	r3, [r4, #12]
 800361c:	e7ab      	b.n	8003576 <__sflush_r+0x1a>
 800361e:	2340      	movs	r3, #64	; 0x40
 8003620:	430b      	orrs	r3, r1
 8003622:	2001      	movs	r0, #1
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	4240      	negs	r0, r0
 8003628:	e7a5      	b.n	8003576 <__sflush_r+0x1a>
 800362a:	690f      	ldr	r7, [r1, #16]
 800362c:	2f00      	cmp	r7, #0
 800362e:	d0a1      	beq.n	8003574 <__sflush_r+0x18>
 8003630:	680b      	ldr	r3, [r1, #0]
 8003632:	600f      	str	r7, [r1, #0]
 8003634:	1bdb      	subs	r3, r3, r7
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	2300      	movs	r3, #0
 800363a:	0792      	lsls	r2, r2, #30
 800363c:	d100      	bne.n	8003640 <__sflush_r+0xe4>
 800363e:	694b      	ldr	r3, [r1, #20]
 8003640:	60a3      	str	r3, [r4, #8]
 8003642:	9b01      	ldr	r3, [sp, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	dc00      	bgt.n	800364a <__sflush_r+0xee>
 8003648:	e794      	b.n	8003574 <__sflush_r+0x18>
 800364a:	9b01      	ldr	r3, [sp, #4]
 800364c:	003a      	movs	r2, r7
 800364e:	6a21      	ldr	r1, [r4, #32]
 8003650:	0028      	movs	r0, r5
 8003652:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003654:	47b0      	blx	r6
 8003656:	2800      	cmp	r0, #0
 8003658:	dc03      	bgt.n	8003662 <__sflush_r+0x106>
 800365a:	2340      	movs	r3, #64	; 0x40
 800365c:	89a2      	ldrh	r2, [r4, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	e7df      	b.n	8003622 <__sflush_r+0xc6>
 8003662:	9b01      	ldr	r3, [sp, #4]
 8003664:	183f      	adds	r7, r7, r0
 8003666:	1a1b      	subs	r3, r3, r0
 8003668:	9301      	str	r3, [sp, #4]
 800366a:	e7ea      	b.n	8003642 <__sflush_r+0xe6>
 800366c:	20400001 	.word	0x20400001

08003670 <_fflush_r>:
 8003670:	690b      	ldr	r3, [r1, #16]
 8003672:	b570      	push	{r4, r5, r6, lr}
 8003674:	0005      	movs	r5, r0
 8003676:	000c      	movs	r4, r1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <_fflush_r+0x10>
 800367c:	2000      	movs	r0, #0
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	2800      	cmp	r0, #0
 8003682:	d004      	beq.n	800368e <_fflush_r+0x1e>
 8003684:	6983      	ldr	r3, [r0, #24]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <_fflush_r+0x1e>
 800368a:	f000 f85f 	bl	800374c <__sinit>
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <_fflush_r+0x4c>)
 8003690:	429c      	cmp	r4, r3
 8003692:	d109      	bne.n	80036a8 <_fflush_r+0x38>
 8003694:	686c      	ldr	r4, [r5, #4]
 8003696:	220c      	movs	r2, #12
 8003698:	5ea3      	ldrsh	r3, [r4, r2]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0ee      	beq.n	800367c <_fflush_r+0xc>
 800369e:	0021      	movs	r1, r4
 80036a0:	0028      	movs	r0, r5
 80036a2:	f7ff ff5b 	bl	800355c <__sflush_r>
 80036a6:	e7ea      	b.n	800367e <_fflush_r+0xe>
 80036a8:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <_fflush_r+0x50>)
 80036aa:	429c      	cmp	r4, r3
 80036ac:	d101      	bne.n	80036b2 <_fflush_r+0x42>
 80036ae:	68ac      	ldr	r4, [r5, #8]
 80036b0:	e7f1      	b.n	8003696 <_fflush_r+0x26>
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <_fflush_r+0x54>)
 80036b4:	429c      	cmp	r4, r3
 80036b6:	d1ee      	bne.n	8003696 <_fflush_r+0x26>
 80036b8:	68ec      	ldr	r4, [r5, #12]
 80036ba:	e7ec      	b.n	8003696 <_fflush_r+0x26>
 80036bc:	080049ac 	.word	0x080049ac
 80036c0:	080049cc 	.word	0x080049cc
 80036c4:	0800498c 	.word	0x0800498c

080036c8 <_cleanup_r>:
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4902      	ldr	r1, [pc, #8]	; (80036d4 <_cleanup_r+0xc>)
 80036cc:	f000 f8b2 	bl	8003834 <_fwalk_reent>
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	46c0      	nop			; (mov r8, r8)
 80036d4:	08003671 	.word	0x08003671

080036d8 <std.isra.0>:
 80036d8:	2300      	movs	r3, #0
 80036da:	b510      	push	{r4, lr}
 80036dc:	0004      	movs	r4, r0
 80036de:	6003      	str	r3, [r0, #0]
 80036e0:	6043      	str	r3, [r0, #4]
 80036e2:	6083      	str	r3, [r0, #8]
 80036e4:	8181      	strh	r1, [r0, #12]
 80036e6:	6643      	str	r3, [r0, #100]	; 0x64
 80036e8:	81c2      	strh	r2, [r0, #14]
 80036ea:	6103      	str	r3, [r0, #16]
 80036ec:	6143      	str	r3, [r0, #20]
 80036ee:	6183      	str	r3, [r0, #24]
 80036f0:	0019      	movs	r1, r3
 80036f2:	2208      	movs	r2, #8
 80036f4:	305c      	adds	r0, #92	; 0x5c
 80036f6:	f7ff fd1e 	bl	8003136 <memset>
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <std.isra.0+0x38>)
 80036fc:	6224      	str	r4, [r4, #32]
 80036fe:	6263      	str	r3, [r4, #36]	; 0x24
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <std.isra.0+0x3c>)
 8003702:	62a3      	str	r3, [r4, #40]	; 0x28
 8003704:	4b04      	ldr	r3, [pc, #16]	; (8003718 <std.isra.0+0x40>)
 8003706:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <std.isra.0+0x44>)
 800370a:	6323      	str	r3, [r4, #48]	; 0x30
 800370c:	bd10      	pop	{r4, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	08003eed 	.word	0x08003eed
 8003714:	08003f15 	.word	0x08003f15
 8003718:	08003f4d 	.word	0x08003f4d
 800371c:	08003f79 	.word	0x08003f79

08003720 <__sfmoreglue>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	2568      	movs	r5, #104	; 0x68
 8003724:	1e4a      	subs	r2, r1, #1
 8003726:	4355      	muls	r5, r2
 8003728:	000e      	movs	r6, r1
 800372a:	0029      	movs	r1, r5
 800372c:	3174      	adds	r1, #116	; 0x74
 800372e:	f7ff fd55 	bl	80031dc <_malloc_r>
 8003732:	1e04      	subs	r4, r0, #0
 8003734:	d008      	beq.n	8003748 <__sfmoreglue+0x28>
 8003736:	2100      	movs	r1, #0
 8003738:	002a      	movs	r2, r5
 800373a:	6001      	str	r1, [r0, #0]
 800373c:	6046      	str	r6, [r0, #4]
 800373e:	300c      	adds	r0, #12
 8003740:	60a0      	str	r0, [r4, #8]
 8003742:	3268      	adds	r2, #104	; 0x68
 8003744:	f7ff fcf7 	bl	8003136 <memset>
 8003748:	0020      	movs	r0, r4
 800374a:	bd70      	pop	{r4, r5, r6, pc}

0800374c <__sinit>:
 800374c:	6983      	ldr	r3, [r0, #24]
 800374e:	b513      	push	{r0, r1, r4, lr}
 8003750:	0004      	movs	r4, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d128      	bne.n	80037a8 <__sinit+0x5c>
 8003756:	6483      	str	r3, [r0, #72]	; 0x48
 8003758:	64c3      	str	r3, [r0, #76]	; 0x4c
 800375a:	6503      	str	r3, [r0, #80]	; 0x50
 800375c:	4b13      	ldr	r3, [pc, #76]	; (80037ac <__sinit+0x60>)
 800375e:	4a14      	ldr	r2, [pc, #80]	; (80037b0 <__sinit+0x64>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6282      	str	r2, [r0, #40]	; 0x28
 8003764:	9301      	str	r3, [sp, #4]
 8003766:	4298      	cmp	r0, r3
 8003768:	d101      	bne.n	800376e <__sinit+0x22>
 800376a:	2301      	movs	r3, #1
 800376c:	6183      	str	r3, [r0, #24]
 800376e:	0020      	movs	r0, r4
 8003770:	f000 f820 	bl	80037b4 <__sfp>
 8003774:	6060      	str	r0, [r4, #4]
 8003776:	0020      	movs	r0, r4
 8003778:	f000 f81c 	bl	80037b4 <__sfp>
 800377c:	60a0      	str	r0, [r4, #8]
 800377e:	0020      	movs	r0, r4
 8003780:	f000 f818 	bl	80037b4 <__sfp>
 8003784:	2200      	movs	r2, #0
 8003786:	60e0      	str	r0, [r4, #12]
 8003788:	2104      	movs	r1, #4
 800378a:	6860      	ldr	r0, [r4, #4]
 800378c:	f7ff ffa4 	bl	80036d8 <std.isra.0>
 8003790:	2201      	movs	r2, #1
 8003792:	2109      	movs	r1, #9
 8003794:	68a0      	ldr	r0, [r4, #8]
 8003796:	f7ff ff9f 	bl	80036d8 <std.isra.0>
 800379a:	2202      	movs	r2, #2
 800379c:	2112      	movs	r1, #18
 800379e:	68e0      	ldr	r0, [r4, #12]
 80037a0:	f7ff ff9a 	bl	80036d8 <std.isra.0>
 80037a4:	2301      	movs	r3, #1
 80037a6:	61a3      	str	r3, [r4, #24]
 80037a8:	bd13      	pop	{r0, r1, r4, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	080049ec 	.word	0x080049ec
 80037b0:	080036c9 	.word	0x080036c9

080037b4 <__sfp>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <__sfp+0x7c>)
 80037b8:	0007      	movs	r7, r0
 80037ba:	681e      	ldr	r6, [r3, #0]
 80037bc:	69b3      	ldr	r3, [r6, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d102      	bne.n	80037c8 <__sfp+0x14>
 80037c2:	0030      	movs	r0, r6
 80037c4:	f7ff ffc2 	bl	800374c <__sinit>
 80037c8:	3648      	adds	r6, #72	; 0x48
 80037ca:	68b4      	ldr	r4, [r6, #8]
 80037cc:	6873      	ldr	r3, [r6, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	d504      	bpl.n	80037dc <__sfp+0x28>
 80037d2:	6833      	ldr	r3, [r6, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <__sfp+0x34>
 80037d8:	6836      	ldr	r6, [r6, #0]
 80037da:	e7f6      	b.n	80037ca <__sfp+0x16>
 80037dc:	220c      	movs	r2, #12
 80037de:	5ea5      	ldrsh	r5, [r4, r2]
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	d00d      	beq.n	8003800 <__sfp+0x4c>
 80037e4:	3468      	adds	r4, #104	; 0x68
 80037e6:	e7f2      	b.n	80037ce <__sfp+0x1a>
 80037e8:	2104      	movs	r1, #4
 80037ea:	0038      	movs	r0, r7
 80037ec:	f7ff ff98 	bl	8003720 <__sfmoreglue>
 80037f0:	6030      	str	r0, [r6, #0]
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d1f0      	bne.n	80037d8 <__sfp+0x24>
 80037f6:	230c      	movs	r3, #12
 80037f8:	0004      	movs	r4, r0
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	0020      	movs	r0, r4
 80037fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003800:	2301      	movs	r3, #1
 8003802:	0020      	movs	r0, r4
 8003804:	425b      	negs	r3, r3
 8003806:	81e3      	strh	r3, [r4, #14]
 8003808:	3302      	adds	r3, #2
 800380a:	81a3      	strh	r3, [r4, #12]
 800380c:	6665      	str	r5, [r4, #100]	; 0x64
 800380e:	6025      	str	r5, [r4, #0]
 8003810:	60a5      	str	r5, [r4, #8]
 8003812:	6065      	str	r5, [r4, #4]
 8003814:	6125      	str	r5, [r4, #16]
 8003816:	6165      	str	r5, [r4, #20]
 8003818:	61a5      	str	r5, [r4, #24]
 800381a:	2208      	movs	r2, #8
 800381c:	0029      	movs	r1, r5
 800381e:	305c      	adds	r0, #92	; 0x5c
 8003820:	f7ff fc89 	bl	8003136 <memset>
 8003824:	6365      	str	r5, [r4, #52]	; 0x34
 8003826:	63a5      	str	r5, [r4, #56]	; 0x38
 8003828:	64a5      	str	r5, [r4, #72]	; 0x48
 800382a:	64e5      	str	r5, [r4, #76]	; 0x4c
 800382c:	e7e6      	b.n	80037fc <__sfp+0x48>
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	080049ec 	.word	0x080049ec

08003834 <_fwalk_reent>:
 8003834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003836:	0004      	movs	r4, r0
 8003838:	0007      	movs	r7, r0
 800383a:	2600      	movs	r6, #0
 800383c:	9101      	str	r1, [sp, #4]
 800383e:	3448      	adds	r4, #72	; 0x48
 8003840:	2c00      	cmp	r4, #0
 8003842:	d101      	bne.n	8003848 <_fwalk_reent+0x14>
 8003844:	0030      	movs	r0, r6
 8003846:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	68a5      	ldr	r5, [r4, #8]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	9b00      	ldr	r3, [sp, #0]
 8003850:	3b01      	subs	r3, #1
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	d501      	bpl.n	800385a <_fwalk_reent+0x26>
 8003856:	6824      	ldr	r4, [r4, #0]
 8003858:	e7f2      	b.n	8003840 <_fwalk_reent+0xc>
 800385a:	89ab      	ldrh	r3, [r5, #12]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d908      	bls.n	8003872 <_fwalk_reent+0x3e>
 8003860:	220e      	movs	r2, #14
 8003862:	5eab      	ldrsh	r3, [r5, r2]
 8003864:	3301      	adds	r3, #1
 8003866:	d004      	beq.n	8003872 <_fwalk_reent+0x3e>
 8003868:	0029      	movs	r1, r5
 800386a:	0038      	movs	r0, r7
 800386c:	9b01      	ldr	r3, [sp, #4]
 800386e:	4798      	blx	r3
 8003870:	4306      	orrs	r6, r0
 8003872:	3568      	adds	r5, #104	; 0x68
 8003874:	e7eb      	b.n	800384e <_fwalk_reent+0x1a>
	...

08003878 <__swhatbuf_r>:
 8003878:	b570      	push	{r4, r5, r6, lr}
 800387a:	000e      	movs	r6, r1
 800387c:	001d      	movs	r5, r3
 800387e:	230e      	movs	r3, #14
 8003880:	5ec9      	ldrsh	r1, [r1, r3]
 8003882:	b090      	sub	sp, #64	; 0x40
 8003884:	0014      	movs	r4, r2
 8003886:	2900      	cmp	r1, #0
 8003888:	da07      	bge.n	800389a <__swhatbuf_r+0x22>
 800388a:	2300      	movs	r3, #0
 800388c:	602b      	str	r3, [r5, #0]
 800388e:	89b3      	ldrh	r3, [r6, #12]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	d411      	bmi.n	80038b8 <__swhatbuf_r+0x40>
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	e00f      	b.n	80038ba <__swhatbuf_r+0x42>
 800389a:	aa01      	add	r2, sp, #4
 800389c:	f000 fb98 	bl	8003fd0 <_fstat_r>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	dbf2      	blt.n	800388a <__swhatbuf_r+0x12>
 80038a4:	22f0      	movs	r2, #240	; 0xf0
 80038a6:	9b02      	ldr	r3, [sp, #8]
 80038a8:	0212      	lsls	r2, r2, #8
 80038aa:	4013      	ands	r3, r2
 80038ac:	4a05      	ldr	r2, [pc, #20]	; (80038c4 <__swhatbuf_r+0x4c>)
 80038ae:	189b      	adds	r3, r3, r2
 80038b0:	425a      	negs	r2, r3
 80038b2:	4153      	adcs	r3, r2
 80038b4:	602b      	str	r3, [r5, #0]
 80038b6:	e7ed      	b.n	8003894 <__swhatbuf_r+0x1c>
 80038b8:	2340      	movs	r3, #64	; 0x40
 80038ba:	2000      	movs	r0, #0
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	b010      	add	sp, #64	; 0x40
 80038c0:	bd70      	pop	{r4, r5, r6, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	ffffe000 	.word	0xffffe000

080038c8 <__smakebuf_r>:
 80038c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ca:	2602      	movs	r6, #2
 80038cc:	898b      	ldrh	r3, [r1, #12]
 80038ce:	0005      	movs	r5, r0
 80038d0:	000c      	movs	r4, r1
 80038d2:	4233      	tst	r3, r6
 80038d4:	d006      	beq.n	80038e4 <__smakebuf_r+0x1c>
 80038d6:	0023      	movs	r3, r4
 80038d8:	3347      	adds	r3, #71	; 0x47
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	6123      	str	r3, [r4, #16]
 80038de:	2301      	movs	r3, #1
 80038e0:	6163      	str	r3, [r4, #20]
 80038e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80038e4:	ab01      	add	r3, sp, #4
 80038e6:	466a      	mov	r2, sp
 80038e8:	f7ff ffc6 	bl	8003878 <__swhatbuf_r>
 80038ec:	9900      	ldr	r1, [sp, #0]
 80038ee:	0007      	movs	r7, r0
 80038f0:	0028      	movs	r0, r5
 80038f2:	f7ff fc73 	bl	80031dc <_malloc_r>
 80038f6:	2800      	cmp	r0, #0
 80038f8:	d108      	bne.n	800390c <__smakebuf_r+0x44>
 80038fa:	220c      	movs	r2, #12
 80038fc:	5ea3      	ldrsh	r3, [r4, r2]
 80038fe:	059a      	lsls	r2, r3, #22
 8003900:	d4ef      	bmi.n	80038e2 <__smakebuf_r+0x1a>
 8003902:	2203      	movs	r2, #3
 8003904:	4393      	bics	r3, r2
 8003906:	431e      	orrs	r6, r3
 8003908:	81a6      	strh	r6, [r4, #12]
 800390a:	e7e4      	b.n	80038d6 <__smakebuf_r+0xe>
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <__smakebuf_r+0x84>)
 800390e:	62ab      	str	r3, [r5, #40]	; 0x28
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	89a2      	ldrh	r2, [r4, #12]
 8003914:	6020      	str	r0, [r4, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	9b00      	ldr	r3, [sp, #0]
 800391c:	6120      	str	r0, [r4, #16]
 800391e:	6163      	str	r3, [r4, #20]
 8003920:	9b01      	ldr	r3, [sp, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00d      	beq.n	8003942 <__smakebuf_r+0x7a>
 8003926:	230e      	movs	r3, #14
 8003928:	5ee1      	ldrsh	r1, [r4, r3]
 800392a:	0028      	movs	r0, r5
 800392c:	f000 fb62 	bl	8003ff4 <_isatty_r>
 8003930:	2800      	cmp	r0, #0
 8003932:	d006      	beq.n	8003942 <__smakebuf_r+0x7a>
 8003934:	2203      	movs	r2, #3
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	4393      	bics	r3, r2
 800393a:	001a      	movs	r2, r3
 800393c:	2301      	movs	r3, #1
 800393e:	4313      	orrs	r3, r2
 8003940:	81a3      	strh	r3, [r4, #12]
 8003942:	89a0      	ldrh	r0, [r4, #12]
 8003944:	4338      	orrs	r0, r7
 8003946:	81a0      	strh	r0, [r4, #12]
 8003948:	e7cb      	b.n	80038e2 <__smakebuf_r+0x1a>
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	080036c9 	.word	0x080036c9

08003950 <__malloc_lock>:
 8003950:	4770      	bx	lr

08003952 <__malloc_unlock>:
 8003952:	4770      	bx	lr

08003954 <__sfputc_r>:
 8003954:	6893      	ldr	r3, [r2, #8]
 8003956:	b510      	push	{r4, lr}
 8003958:	3b01      	subs	r3, #1
 800395a:	6093      	str	r3, [r2, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	da05      	bge.n	800396c <__sfputc_r+0x18>
 8003960:	6994      	ldr	r4, [r2, #24]
 8003962:	42a3      	cmp	r3, r4
 8003964:	db08      	blt.n	8003978 <__sfputc_r+0x24>
 8003966:	b2cb      	uxtb	r3, r1
 8003968:	2b0a      	cmp	r3, #10
 800396a:	d005      	beq.n	8003978 <__sfputc_r+0x24>
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	1c58      	adds	r0, r3, #1
 8003970:	6010      	str	r0, [r2, #0]
 8003972:	7019      	strb	r1, [r3, #0]
 8003974:	b2c8      	uxtb	r0, r1
 8003976:	bd10      	pop	{r4, pc}
 8003978:	f7ff fd24 	bl	80033c4 <__swbuf_r>
 800397c:	e7fb      	b.n	8003976 <__sfputc_r+0x22>

0800397e <__sfputs_r>:
 800397e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003980:	0006      	movs	r6, r0
 8003982:	000f      	movs	r7, r1
 8003984:	0014      	movs	r4, r2
 8003986:	18d5      	adds	r5, r2, r3
 8003988:	42ac      	cmp	r4, r5
 800398a:	d101      	bne.n	8003990 <__sfputs_r+0x12>
 800398c:	2000      	movs	r0, #0
 800398e:	e007      	b.n	80039a0 <__sfputs_r+0x22>
 8003990:	7821      	ldrb	r1, [r4, #0]
 8003992:	003a      	movs	r2, r7
 8003994:	0030      	movs	r0, r6
 8003996:	f7ff ffdd 	bl	8003954 <__sfputc_r>
 800399a:	3401      	adds	r4, #1
 800399c:	1c43      	adds	r3, r0, #1
 800399e:	d1f3      	bne.n	8003988 <__sfputs_r+0xa>
 80039a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039a4 <_vfiprintf_r>:
 80039a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039a6:	b09f      	sub	sp, #124	; 0x7c
 80039a8:	0006      	movs	r6, r0
 80039aa:	000f      	movs	r7, r1
 80039ac:	0014      	movs	r4, r2
 80039ae:	9305      	str	r3, [sp, #20]
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d004      	beq.n	80039be <_vfiprintf_r+0x1a>
 80039b4:	6983      	ldr	r3, [r0, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <_vfiprintf_r+0x1a>
 80039ba:	f7ff fec7 	bl	800374c <__sinit>
 80039be:	4b7f      	ldr	r3, [pc, #508]	; (8003bbc <_vfiprintf_r+0x218>)
 80039c0:	429f      	cmp	r7, r3
 80039c2:	d15c      	bne.n	8003a7e <_vfiprintf_r+0xda>
 80039c4:	6877      	ldr	r7, [r6, #4]
 80039c6:	89bb      	ldrh	r3, [r7, #12]
 80039c8:	071b      	lsls	r3, r3, #28
 80039ca:	d562      	bpl.n	8003a92 <_vfiprintf_r+0xee>
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d05f      	beq.n	8003a92 <_vfiprintf_r+0xee>
 80039d2:	2300      	movs	r3, #0
 80039d4:	ad06      	add	r5, sp, #24
 80039d6:	616b      	str	r3, [r5, #20]
 80039d8:	3320      	adds	r3, #32
 80039da:	766b      	strb	r3, [r5, #25]
 80039dc:	3310      	adds	r3, #16
 80039de:	76ab      	strb	r3, [r5, #26]
 80039e0:	9402      	str	r4, [sp, #8]
 80039e2:	9c02      	ldr	r4, [sp, #8]
 80039e4:	7823      	ldrb	r3, [r4, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d15d      	bne.n	8003aa6 <_vfiprintf_r+0x102>
 80039ea:	9b02      	ldr	r3, [sp, #8]
 80039ec:	1ae3      	subs	r3, r4, r3
 80039ee:	9304      	str	r3, [sp, #16]
 80039f0:	d00d      	beq.n	8003a0e <_vfiprintf_r+0x6a>
 80039f2:	9b04      	ldr	r3, [sp, #16]
 80039f4:	9a02      	ldr	r2, [sp, #8]
 80039f6:	0039      	movs	r1, r7
 80039f8:	0030      	movs	r0, r6
 80039fa:	f7ff ffc0 	bl	800397e <__sfputs_r>
 80039fe:	1c43      	adds	r3, r0, #1
 8003a00:	d100      	bne.n	8003a04 <_vfiprintf_r+0x60>
 8003a02:	e0cc      	b.n	8003b9e <_vfiprintf_r+0x1fa>
 8003a04:	696a      	ldr	r2, [r5, #20]
 8003a06:	9b04      	ldr	r3, [sp, #16]
 8003a08:	4694      	mov	ip, r2
 8003a0a:	4463      	add	r3, ip
 8003a0c:	616b      	str	r3, [r5, #20]
 8003a0e:	7823      	ldrb	r3, [r4, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d100      	bne.n	8003a16 <_vfiprintf_r+0x72>
 8003a14:	e0c3      	b.n	8003b9e <_vfiprintf_r+0x1fa>
 8003a16:	2201      	movs	r2, #1
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4252      	negs	r2, r2
 8003a1c:	606a      	str	r2, [r5, #4]
 8003a1e:	a902      	add	r1, sp, #8
 8003a20:	3254      	adds	r2, #84	; 0x54
 8003a22:	1852      	adds	r2, r2, r1
 8003a24:	3401      	adds	r4, #1
 8003a26:	602b      	str	r3, [r5, #0]
 8003a28:	60eb      	str	r3, [r5, #12]
 8003a2a:	60ab      	str	r3, [r5, #8]
 8003a2c:	7013      	strb	r3, [r2, #0]
 8003a2e:	65ab      	str	r3, [r5, #88]	; 0x58
 8003a30:	7821      	ldrb	r1, [r4, #0]
 8003a32:	2205      	movs	r2, #5
 8003a34:	4862      	ldr	r0, [pc, #392]	; (8003bc0 <_vfiprintf_r+0x21c>)
 8003a36:	f000 fb03 	bl	8004040 <memchr>
 8003a3a:	1c63      	adds	r3, r4, #1
 8003a3c:	469c      	mov	ip, r3
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d135      	bne.n	8003aae <_vfiprintf_r+0x10a>
 8003a42:	6829      	ldr	r1, [r5, #0]
 8003a44:	06cb      	lsls	r3, r1, #27
 8003a46:	d504      	bpl.n	8003a52 <_vfiprintf_r+0xae>
 8003a48:	2353      	movs	r3, #83	; 0x53
 8003a4a:	aa02      	add	r2, sp, #8
 8003a4c:	3020      	adds	r0, #32
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	7018      	strb	r0, [r3, #0]
 8003a52:	070b      	lsls	r3, r1, #28
 8003a54:	d504      	bpl.n	8003a60 <_vfiprintf_r+0xbc>
 8003a56:	2353      	movs	r3, #83	; 0x53
 8003a58:	202b      	movs	r0, #43	; 0x2b
 8003a5a:	aa02      	add	r2, sp, #8
 8003a5c:	189b      	adds	r3, r3, r2
 8003a5e:	7018      	strb	r0, [r3, #0]
 8003a60:	7823      	ldrb	r3, [r4, #0]
 8003a62:	2b2a      	cmp	r3, #42	; 0x2a
 8003a64:	d02c      	beq.n	8003ac0 <_vfiprintf_r+0x11c>
 8003a66:	2000      	movs	r0, #0
 8003a68:	210a      	movs	r1, #10
 8003a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a6c:	7822      	ldrb	r2, [r4, #0]
 8003a6e:	3a30      	subs	r2, #48	; 0x30
 8003a70:	2a09      	cmp	r2, #9
 8003a72:	d800      	bhi.n	8003a76 <_vfiprintf_r+0xd2>
 8003a74:	e06b      	b.n	8003b4e <_vfiprintf_r+0x1aa>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d02a      	beq.n	8003ad0 <_vfiprintf_r+0x12c>
 8003a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8003a7c:	e028      	b.n	8003ad0 <_vfiprintf_r+0x12c>
 8003a7e:	4b51      	ldr	r3, [pc, #324]	; (8003bc4 <_vfiprintf_r+0x220>)
 8003a80:	429f      	cmp	r7, r3
 8003a82:	d101      	bne.n	8003a88 <_vfiprintf_r+0xe4>
 8003a84:	68b7      	ldr	r7, [r6, #8]
 8003a86:	e79e      	b.n	80039c6 <_vfiprintf_r+0x22>
 8003a88:	4b4f      	ldr	r3, [pc, #316]	; (8003bc8 <_vfiprintf_r+0x224>)
 8003a8a:	429f      	cmp	r7, r3
 8003a8c:	d19b      	bne.n	80039c6 <_vfiprintf_r+0x22>
 8003a8e:	68f7      	ldr	r7, [r6, #12]
 8003a90:	e799      	b.n	80039c6 <_vfiprintf_r+0x22>
 8003a92:	0039      	movs	r1, r7
 8003a94:	0030      	movs	r0, r6
 8003a96:	f7ff fceb 	bl	8003470 <__swsetup_r>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d099      	beq.n	80039d2 <_vfiprintf_r+0x2e>
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	4240      	negs	r0, r0
 8003aa2:	b01f      	add	sp, #124	; 0x7c
 8003aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aa6:	2b25      	cmp	r3, #37	; 0x25
 8003aa8:	d09f      	beq.n	80039ea <_vfiprintf_r+0x46>
 8003aaa:	3401      	adds	r4, #1
 8003aac:	e79a      	b.n	80039e4 <_vfiprintf_r+0x40>
 8003aae:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <_vfiprintf_r+0x21c>)
 8003ab0:	6829      	ldr	r1, [r5, #0]
 8003ab2:	1ac0      	subs	r0, r0, r3
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4083      	lsls	r3, r0
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	602b      	str	r3, [r5, #0]
 8003abc:	4664      	mov	r4, ip
 8003abe:	e7b7      	b.n	8003a30 <_vfiprintf_r+0x8c>
 8003ac0:	9b05      	ldr	r3, [sp, #20]
 8003ac2:	1d18      	adds	r0, r3, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	9005      	str	r0, [sp, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db3a      	blt.n	8003b42 <_vfiprintf_r+0x19e>
 8003acc:	9309      	str	r3, [sp, #36]	; 0x24
 8003ace:	4664      	mov	r4, ip
 8003ad0:	7823      	ldrb	r3, [r4, #0]
 8003ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8003ad4:	d10b      	bne.n	8003aee <_vfiprintf_r+0x14a>
 8003ad6:	7863      	ldrb	r3, [r4, #1]
 8003ad8:	1c62      	adds	r2, r4, #1
 8003ada:	2b2a      	cmp	r3, #42	; 0x2a
 8003adc:	d13f      	bne.n	8003b5e <_vfiprintf_r+0x1ba>
 8003ade:	9b05      	ldr	r3, [sp, #20]
 8003ae0:	3402      	adds	r4, #2
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	9205      	str	r2, [sp, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	db35      	blt.n	8003b58 <_vfiprintf_r+0x1b4>
 8003aec:	9307      	str	r3, [sp, #28]
 8003aee:	7821      	ldrb	r1, [r4, #0]
 8003af0:	2203      	movs	r2, #3
 8003af2:	4836      	ldr	r0, [pc, #216]	; (8003bcc <_vfiprintf_r+0x228>)
 8003af4:	f000 faa4 	bl	8004040 <memchr>
 8003af8:	2800      	cmp	r0, #0
 8003afa:	d007      	beq.n	8003b0c <_vfiprintf_r+0x168>
 8003afc:	4b33      	ldr	r3, [pc, #204]	; (8003bcc <_vfiprintf_r+0x228>)
 8003afe:	682a      	ldr	r2, [r5, #0]
 8003b00:	1ac0      	subs	r0, r0, r3
 8003b02:	2340      	movs	r3, #64	; 0x40
 8003b04:	4083      	lsls	r3, r0
 8003b06:	4313      	orrs	r3, r2
 8003b08:	602b      	str	r3, [r5, #0]
 8003b0a:	3401      	adds	r4, #1
 8003b0c:	7821      	ldrb	r1, [r4, #0]
 8003b0e:	1c63      	adds	r3, r4, #1
 8003b10:	2206      	movs	r2, #6
 8003b12:	482f      	ldr	r0, [pc, #188]	; (8003bd0 <_vfiprintf_r+0x22c>)
 8003b14:	9302      	str	r3, [sp, #8]
 8003b16:	7629      	strb	r1, [r5, #24]
 8003b18:	f000 fa92 	bl	8004040 <memchr>
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d044      	beq.n	8003baa <_vfiprintf_r+0x206>
 8003b20:	4b2c      	ldr	r3, [pc, #176]	; (8003bd4 <_vfiprintf_r+0x230>)
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d12f      	bne.n	8003b86 <_vfiprintf_r+0x1e2>
 8003b26:	6829      	ldr	r1, [r5, #0]
 8003b28:	9b05      	ldr	r3, [sp, #20]
 8003b2a:	2207      	movs	r2, #7
 8003b2c:	05c9      	lsls	r1, r1, #23
 8003b2e:	d528      	bpl.n	8003b82 <_vfiprintf_r+0x1de>
 8003b30:	189b      	adds	r3, r3, r2
 8003b32:	4393      	bics	r3, r2
 8003b34:	3308      	adds	r3, #8
 8003b36:	9305      	str	r3, [sp, #20]
 8003b38:	696b      	ldr	r3, [r5, #20]
 8003b3a:	9a03      	ldr	r2, [sp, #12]
 8003b3c:	189b      	adds	r3, r3, r2
 8003b3e:	616b      	str	r3, [r5, #20]
 8003b40:	e74f      	b.n	80039e2 <_vfiprintf_r+0x3e>
 8003b42:	425b      	negs	r3, r3
 8003b44:	60eb      	str	r3, [r5, #12]
 8003b46:	2302      	movs	r3, #2
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	602b      	str	r3, [r5, #0]
 8003b4c:	e7bf      	b.n	8003ace <_vfiprintf_r+0x12a>
 8003b4e:	434b      	muls	r3, r1
 8003b50:	3401      	adds	r4, #1
 8003b52:	189b      	adds	r3, r3, r2
 8003b54:	2001      	movs	r0, #1
 8003b56:	e789      	b.n	8003a6c <_vfiprintf_r+0xc8>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	425b      	negs	r3, r3
 8003b5c:	e7c6      	b.n	8003aec <_vfiprintf_r+0x148>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	0014      	movs	r4, r2
 8003b62:	200a      	movs	r0, #10
 8003b64:	001a      	movs	r2, r3
 8003b66:	606b      	str	r3, [r5, #4]
 8003b68:	7821      	ldrb	r1, [r4, #0]
 8003b6a:	3930      	subs	r1, #48	; 0x30
 8003b6c:	2909      	cmp	r1, #9
 8003b6e:	d903      	bls.n	8003b78 <_vfiprintf_r+0x1d4>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d0bc      	beq.n	8003aee <_vfiprintf_r+0x14a>
 8003b74:	9207      	str	r2, [sp, #28]
 8003b76:	e7ba      	b.n	8003aee <_vfiprintf_r+0x14a>
 8003b78:	4342      	muls	r2, r0
 8003b7a:	3401      	adds	r4, #1
 8003b7c:	1852      	adds	r2, r2, r1
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e7f2      	b.n	8003b68 <_vfiprintf_r+0x1c4>
 8003b82:	3307      	adds	r3, #7
 8003b84:	e7d5      	b.n	8003b32 <_vfiprintf_r+0x18e>
 8003b86:	ab05      	add	r3, sp, #20
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	003a      	movs	r2, r7
 8003b8c:	4b12      	ldr	r3, [pc, #72]	; (8003bd8 <_vfiprintf_r+0x234>)
 8003b8e:	0029      	movs	r1, r5
 8003b90:	0030      	movs	r0, r6
 8003b92:	e000      	b.n	8003b96 <_vfiprintf_r+0x1f2>
 8003b94:	bf00      	nop
 8003b96:	9003      	str	r0, [sp, #12]
 8003b98:	9b03      	ldr	r3, [sp, #12]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	d1cc      	bne.n	8003b38 <_vfiprintf_r+0x194>
 8003b9e:	89bb      	ldrh	r3, [r7, #12]
 8003ba0:	065b      	lsls	r3, r3, #25
 8003ba2:	d500      	bpl.n	8003ba6 <_vfiprintf_r+0x202>
 8003ba4:	e77b      	b.n	8003a9e <_vfiprintf_r+0xfa>
 8003ba6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003ba8:	e77b      	b.n	8003aa2 <_vfiprintf_r+0xfe>
 8003baa:	ab05      	add	r3, sp, #20
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	003a      	movs	r2, r7
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <_vfiprintf_r+0x234>)
 8003bb2:	0029      	movs	r1, r5
 8003bb4:	0030      	movs	r0, r6
 8003bb6:	f000 f87f 	bl	8003cb8 <_printf_i>
 8003bba:	e7ec      	b.n	8003b96 <_vfiprintf_r+0x1f2>
 8003bbc:	080049ac 	.word	0x080049ac
 8003bc0:	080049f0 	.word	0x080049f0
 8003bc4:	080049cc 	.word	0x080049cc
 8003bc8:	0800498c 	.word	0x0800498c
 8003bcc:	080049f6 	.word	0x080049f6
 8003bd0:	080049fa 	.word	0x080049fa
 8003bd4:	00000000 	.word	0x00000000
 8003bd8:	0800397f 	.word	0x0800397f

08003bdc <_printf_common>:
 8003bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003bde:	0015      	movs	r5, r2
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	688a      	ldr	r2, [r1, #8]
 8003be4:	690b      	ldr	r3, [r1, #16]
 8003be6:	9000      	str	r0, [sp, #0]
 8003be8:	000c      	movs	r4, r1
 8003bea:	4293      	cmp	r3, r2
 8003bec:	da00      	bge.n	8003bf0 <_printf_common+0x14>
 8003bee:	0013      	movs	r3, r2
 8003bf0:	0022      	movs	r2, r4
 8003bf2:	602b      	str	r3, [r5, #0]
 8003bf4:	3243      	adds	r2, #67	; 0x43
 8003bf6:	7812      	ldrb	r2, [r2, #0]
 8003bf8:	2a00      	cmp	r2, #0
 8003bfa:	d001      	beq.n	8003c00 <_printf_common+0x24>
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	069b      	lsls	r3, r3, #26
 8003c04:	d502      	bpl.n	8003c0c <_printf_common+0x30>
 8003c06:	682b      	ldr	r3, [r5, #0]
 8003c08:	3302      	adds	r3, #2
 8003c0a:	602b      	str	r3, [r5, #0]
 8003c0c:	2706      	movs	r7, #6
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	401f      	ands	r7, r3
 8003c12:	d027      	beq.n	8003c64 <_printf_common+0x88>
 8003c14:	0023      	movs	r3, r4
 8003c16:	3343      	adds	r3, #67	; 0x43
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	1e5a      	subs	r2, r3, #1
 8003c1c:	4193      	sbcs	r3, r2
 8003c1e:	6822      	ldr	r2, [r4, #0]
 8003c20:	0692      	lsls	r2, r2, #26
 8003c22:	d430      	bmi.n	8003c86 <_printf_common+0xaa>
 8003c24:	0022      	movs	r2, r4
 8003c26:	9901      	ldr	r1, [sp, #4]
 8003c28:	3243      	adds	r2, #67	; 0x43
 8003c2a:	9800      	ldr	r0, [sp, #0]
 8003c2c:	9e08      	ldr	r6, [sp, #32]
 8003c2e:	47b0      	blx	r6
 8003c30:	1c43      	adds	r3, r0, #1
 8003c32:	d025      	beq.n	8003c80 <_printf_common+0xa4>
 8003c34:	2306      	movs	r3, #6
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	682a      	ldr	r2, [r5, #0]
 8003c3a:	68e1      	ldr	r1, [r4, #12]
 8003c3c:	4003      	ands	r3, r0
 8003c3e:	2500      	movs	r5, #0
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d103      	bne.n	8003c4c <_printf_common+0x70>
 8003c44:	1a8d      	subs	r5, r1, r2
 8003c46:	43eb      	mvns	r3, r5
 8003c48:	17db      	asrs	r3, r3, #31
 8003c4a:	401d      	ands	r5, r3
 8003c4c:	68a3      	ldr	r3, [r4, #8]
 8003c4e:	6922      	ldr	r2, [r4, #16]
 8003c50:	4293      	cmp	r3, r2
 8003c52:	dd01      	ble.n	8003c58 <_printf_common+0x7c>
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	18ed      	adds	r5, r5, r3
 8003c58:	2700      	movs	r7, #0
 8003c5a:	42bd      	cmp	r5, r7
 8003c5c:	d120      	bne.n	8003ca0 <_printf_common+0xc4>
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e010      	b.n	8003c84 <_printf_common+0xa8>
 8003c62:	3701      	adds	r7, #1
 8003c64:	68e3      	ldr	r3, [r4, #12]
 8003c66:	682a      	ldr	r2, [r5, #0]
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	429f      	cmp	r7, r3
 8003c6c:	dad2      	bge.n	8003c14 <_printf_common+0x38>
 8003c6e:	0022      	movs	r2, r4
 8003c70:	2301      	movs	r3, #1
 8003c72:	3219      	adds	r2, #25
 8003c74:	9901      	ldr	r1, [sp, #4]
 8003c76:	9800      	ldr	r0, [sp, #0]
 8003c78:	9e08      	ldr	r6, [sp, #32]
 8003c7a:	47b0      	blx	r6
 8003c7c:	1c43      	adds	r3, r0, #1
 8003c7e:	d1f0      	bne.n	8003c62 <_printf_common+0x86>
 8003c80:	2001      	movs	r0, #1
 8003c82:	4240      	negs	r0, r0
 8003c84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c86:	2030      	movs	r0, #48	; 0x30
 8003c88:	18e1      	adds	r1, r4, r3
 8003c8a:	3143      	adds	r1, #67	; 0x43
 8003c8c:	7008      	strb	r0, [r1, #0]
 8003c8e:	0021      	movs	r1, r4
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	3145      	adds	r1, #69	; 0x45
 8003c94:	7809      	ldrb	r1, [r1, #0]
 8003c96:	18a2      	adds	r2, r4, r2
 8003c98:	3243      	adds	r2, #67	; 0x43
 8003c9a:	3302      	adds	r3, #2
 8003c9c:	7011      	strb	r1, [r2, #0]
 8003c9e:	e7c1      	b.n	8003c24 <_printf_common+0x48>
 8003ca0:	0022      	movs	r2, r4
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	321a      	adds	r2, #26
 8003ca6:	9901      	ldr	r1, [sp, #4]
 8003ca8:	9800      	ldr	r0, [sp, #0]
 8003caa:	9e08      	ldr	r6, [sp, #32]
 8003cac:	47b0      	blx	r6
 8003cae:	1c43      	adds	r3, r0, #1
 8003cb0:	d0e6      	beq.n	8003c80 <_printf_common+0xa4>
 8003cb2:	3701      	adds	r7, #1
 8003cb4:	e7d1      	b.n	8003c5a <_printf_common+0x7e>
	...

08003cb8 <_printf_i>:
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b08b      	sub	sp, #44	; 0x2c
 8003cbc:	9206      	str	r2, [sp, #24]
 8003cbe:	000a      	movs	r2, r1
 8003cc0:	3243      	adds	r2, #67	; 0x43
 8003cc2:	9307      	str	r3, [sp, #28]
 8003cc4:	9005      	str	r0, [sp, #20]
 8003cc6:	9204      	str	r2, [sp, #16]
 8003cc8:	7e0a      	ldrb	r2, [r1, #24]
 8003cca:	000c      	movs	r4, r1
 8003ccc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003cce:	2a6e      	cmp	r2, #110	; 0x6e
 8003cd0:	d100      	bne.n	8003cd4 <_printf_i+0x1c>
 8003cd2:	e08f      	b.n	8003df4 <_printf_i+0x13c>
 8003cd4:	d817      	bhi.n	8003d06 <_printf_i+0x4e>
 8003cd6:	2a63      	cmp	r2, #99	; 0x63
 8003cd8:	d02c      	beq.n	8003d34 <_printf_i+0x7c>
 8003cda:	d808      	bhi.n	8003cee <_printf_i+0x36>
 8003cdc:	2a00      	cmp	r2, #0
 8003cde:	d100      	bne.n	8003ce2 <_printf_i+0x2a>
 8003ce0:	e099      	b.n	8003e16 <_printf_i+0x15e>
 8003ce2:	2a58      	cmp	r2, #88	; 0x58
 8003ce4:	d054      	beq.n	8003d90 <_printf_i+0xd8>
 8003ce6:	0026      	movs	r6, r4
 8003ce8:	3642      	adds	r6, #66	; 0x42
 8003cea:	7032      	strb	r2, [r6, #0]
 8003cec:	e029      	b.n	8003d42 <_printf_i+0x8a>
 8003cee:	2a64      	cmp	r2, #100	; 0x64
 8003cf0:	d001      	beq.n	8003cf6 <_printf_i+0x3e>
 8003cf2:	2a69      	cmp	r2, #105	; 0x69
 8003cf4:	d1f7      	bne.n	8003ce6 <_printf_i+0x2e>
 8003cf6:	6821      	ldr	r1, [r4, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	0608      	lsls	r0, r1, #24
 8003cfc:	d523      	bpl.n	8003d46 <_printf_i+0x8e>
 8003cfe:	1d11      	adds	r1, r2, #4
 8003d00:	6019      	str	r1, [r3, #0]
 8003d02:	6815      	ldr	r5, [r2, #0]
 8003d04:	e025      	b.n	8003d52 <_printf_i+0x9a>
 8003d06:	2a73      	cmp	r2, #115	; 0x73
 8003d08:	d100      	bne.n	8003d0c <_printf_i+0x54>
 8003d0a:	e088      	b.n	8003e1e <_printf_i+0x166>
 8003d0c:	d808      	bhi.n	8003d20 <_printf_i+0x68>
 8003d0e:	2a6f      	cmp	r2, #111	; 0x6f
 8003d10:	d029      	beq.n	8003d66 <_printf_i+0xae>
 8003d12:	2a70      	cmp	r2, #112	; 0x70
 8003d14:	d1e7      	bne.n	8003ce6 <_printf_i+0x2e>
 8003d16:	2220      	movs	r2, #32
 8003d18:	6809      	ldr	r1, [r1, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	6022      	str	r2, [r4, #0]
 8003d1e:	e003      	b.n	8003d28 <_printf_i+0x70>
 8003d20:	2a75      	cmp	r2, #117	; 0x75
 8003d22:	d020      	beq.n	8003d66 <_printf_i+0xae>
 8003d24:	2a78      	cmp	r2, #120	; 0x78
 8003d26:	d1de      	bne.n	8003ce6 <_printf_i+0x2e>
 8003d28:	0022      	movs	r2, r4
 8003d2a:	2178      	movs	r1, #120	; 0x78
 8003d2c:	3245      	adds	r2, #69	; 0x45
 8003d2e:	7011      	strb	r1, [r2, #0]
 8003d30:	4a6c      	ldr	r2, [pc, #432]	; (8003ee4 <_printf_i+0x22c>)
 8003d32:	e030      	b.n	8003d96 <_printf_i+0xde>
 8003d34:	000e      	movs	r6, r1
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	3642      	adds	r6, #66	; 0x42
 8003d3a:	1d11      	adds	r1, r2, #4
 8003d3c:	6019      	str	r1, [r3, #0]
 8003d3e:	6813      	ldr	r3, [r2, #0]
 8003d40:	7033      	strb	r3, [r6, #0]
 8003d42:	2301      	movs	r3, #1
 8003d44:	e079      	b.n	8003e3a <_printf_i+0x182>
 8003d46:	0649      	lsls	r1, r1, #25
 8003d48:	d5d9      	bpl.n	8003cfe <_printf_i+0x46>
 8003d4a:	1d11      	adds	r1, r2, #4
 8003d4c:	6019      	str	r1, [r3, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	5ed5      	ldrsh	r5, [r2, r3]
 8003d52:	2d00      	cmp	r5, #0
 8003d54:	da03      	bge.n	8003d5e <_printf_i+0xa6>
 8003d56:	232d      	movs	r3, #45	; 0x2d
 8003d58:	9a04      	ldr	r2, [sp, #16]
 8003d5a:	426d      	negs	r5, r5
 8003d5c:	7013      	strb	r3, [r2, #0]
 8003d5e:	4b62      	ldr	r3, [pc, #392]	; (8003ee8 <_printf_i+0x230>)
 8003d60:	270a      	movs	r7, #10
 8003d62:	9303      	str	r3, [sp, #12]
 8003d64:	e02f      	b.n	8003dc6 <_printf_i+0x10e>
 8003d66:	6820      	ldr	r0, [r4, #0]
 8003d68:	6819      	ldr	r1, [r3, #0]
 8003d6a:	0605      	lsls	r5, r0, #24
 8003d6c:	d503      	bpl.n	8003d76 <_printf_i+0xbe>
 8003d6e:	1d08      	adds	r0, r1, #4
 8003d70:	6018      	str	r0, [r3, #0]
 8003d72:	680d      	ldr	r5, [r1, #0]
 8003d74:	e005      	b.n	8003d82 <_printf_i+0xca>
 8003d76:	0640      	lsls	r0, r0, #25
 8003d78:	d5f9      	bpl.n	8003d6e <_printf_i+0xb6>
 8003d7a:	680d      	ldr	r5, [r1, #0]
 8003d7c:	1d08      	adds	r0, r1, #4
 8003d7e:	6018      	str	r0, [r3, #0]
 8003d80:	b2ad      	uxth	r5, r5
 8003d82:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <_printf_i+0x230>)
 8003d84:	2708      	movs	r7, #8
 8003d86:	9303      	str	r3, [sp, #12]
 8003d88:	2a6f      	cmp	r2, #111	; 0x6f
 8003d8a:	d018      	beq.n	8003dbe <_printf_i+0x106>
 8003d8c:	270a      	movs	r7, #10
 8003d8e:	e016      	b.n	8003dbe <_printf_i+0x106>
 8003d90:	3145      	adds	r1, #69	; 0x45
 8003d92:	700a      	strb	r2, [r1, #0]
 8003d94:	4a54      	ldr	r2, [pc, #336]	; (8003ee8 <_printf_i+0x230>)
 8003d96:	9203      	str	r2, [sp, #12]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	6821      	ldr	r1, [r4, #0]
 8003d9c:	1d10      	adds	r0, r2, #4
 8003d9e:	6018      	str	r0, [r3, #0]
 8003da0:	6815      	ldr	r5, [r2, #0]
 8003da2:	0608      	lsls	r0, r1, #24
 8003da4:	d522      	bpl.n	8003dec <_printf_i+0x134>
 8003da6:	07cb      	lsls	r3, r1, #31
 8003da8:	d502      	bpl.n	8003db0 <_printf_i+0xf8>
 8003daa:	2320      	movs	r3, #32
 8003dac:	4319      	orrs	r1, r3
 8003dae:	6021      	str	r1, [r4, #0]
 8003db0:	2710      	movs	r7, #16
 8003db2:	2d00      	cmp	r5, #0
 8003db4:	d103      	bne.n	8003dbe <_printf_i+0x106>
 8003db6:	2320      	movs	r3, #32
 8003db8:	6822      	ldr	r2, [r4, #0]
 8003dba:	439a      	bics	r2, r3
 8003dbc:	6022      	str	r2, [r4, #0]
 8003dbe:	0023      	movs	r3, r4
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	3343      	adds	r3, #67	; 0x43
 8003dc4:	701a      	strb	r2, [r3, #0]
 8003dc6:	6863      	ldr	r3, [r4, #4]
 8003dc8:	60a3      	str	r3, [r4, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	db5c      	blt.n	8003e88 <_printf_i+0x1d0>
 8003dce:	2204      	movs	r2, #4
 8003dd0:	6821      	ldr	r1, [r4, #0]
 8003dd2:	4391      	bics	r1, r2
 8003dd4:	6021      	str	r1, [r4, #0]
 8003dd6:	2d00      	cmp	r5, #0
 8003dd8:	d158      	bne.n	8003e8c <_printf_i+0x1d4>
 8003dda:	9e04      	ldr	r6, [sp, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d064      	beq.n	8003eaa <_printf_i+0x1f2>
 8003de0:	0026      	movs	r6, r4
 8003de2:	9b03      	ldr	r3, [sp, #12]
 8003de4:	3642      	adds	r6, #66	; 0x42
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	7033      	strb	r3, [r6, #0]
 8003dea:	e05e      	b.n	8003eaa <_printf_i+0x1f2>
 8003dec:	0648      	lsls	r0, r1, #25
 8003dee:	d5da      	bpl.n	8003da6 <_printf_i+0xee>
 8003df0:	b2ad      	uxth	r5, r5
 8003df2:	e7d8      	b.n	8003da6 <_printf_i+0xee>
 8003df4:	6809      	ldr	r1, [r1, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	0608      	lsls	r0, r1, #24
 8003dfa:	d505      	bpl.n	8003e08 <_printf_i+0x150>
 8003dfc:	1d11      	adds	r1, r2, #4
 8003dfe:	6019      	str	r1, [r3, #0]
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	6962      	ldr	r2, [r4, #20]
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	e006      	b.n	8003e16 <_printf_i+0x15e>
 8003e08:	0649      	lsls	r1, r1, #25
 8003e0a:	d5f7      	bpl.n	8003dfc <_printf_i+0x144>
 8003e0c:	1d11      	adds	r1, r2, #4
 8003e0e:	6019      	str	r1, [r3, #0]
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	8aa2      	ldrh	r2, [r4, #20]
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	9e04      	ldr	r6, [sp, #16]
 8003e1a:	6123      	str	r3, [r4, #16]
 8003e1c:	e054      	b.n	8003ec8 <_printf_i+0x210>
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	1d11      	adds	r1, r2, #4
 8003e22:	6019      	str	r1, [r3, #0]
 8003e24:	6816      	ldr	r6, [r2, #0]
 8003e26:	2100      	movs	r1, #0
 8003e28:	6862      	ldr	r2, [r4, #4]
 8003e2a:	0030      	movs	r0, r6
 8003e2c:	f000 f908 	bl	8004040 <memchr>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	d001      	beq.n	8003e38 <_printf_i+0x180>
 8003e34:	1b80      	subs	r0, r0, r6
 8003e36:	6060      	str	r0, [r4, #4]
 8003e38:	6863      	ldr	r3, [r4, #4]
 8003e3a:	6123      	str	r3, [r4, #16]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9a04      	ldr	r2, [sp, #16]
 8003e40:	7013      	strb	r3, [r2, #0]
 8003e42:	e041      	b.n	8003ec8 <_printf_i+0x210>
 8003e44:	6923      	ldr	r3, [r4, #16]
 8003e46:	0032      	movs	r2, r6
 8003e48:	9906      	ldr	r1, [sp, #24]
 8003e4a:	9805      	ldr	r0, [sp, #20]
 8003e4c:	9d07      	ldr	r5, [sp, #28]
 8003e4e:	47a8      	blx	r5
 8003e50:	1c43      	adds	r3, r0, #1
 8003e52:	d043      	beq.n	8003edc <_printf_i+0x224>
 8003e54:	6823      	ldr	r3, [r4, #0]
 8003e56:	2500      	movs	r5, #0
 8003e58:	079b      	lsls	r3, r3, #30
 8003e5a:	d40f      	bmi.n	8003e7c <_printf_i+0x1c4>
 8003e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e5e:	68e0      	ldr	r0, [r4, #12]
 8003e60:	4298      	cmp	r0, r3
 8003e62:	da3d      	bge.n	8003ee0 <_printf_i+0x228>
 8003e64:	0018      	movs	r0, r3
 8003e66:	e03b      	b.n	8003ee0 <_printf_i+0x228>
 8003e68:	0022      	movs	r2, r4
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	3219      	adds	r2, #25
 8003e6e:	9906      	ldr	r1, [sp, #24]
 8003e70:	9805      	ldr	r0, [sp, #20]
 8003e72:	9e07      	ldr	r6, [sp, #28]
 8003e74:	47b0      	blx	r6
 8003e76:	1c43      	adds	r3, r0, #1
 8003e78:	d030      	beq.n	8003edc <_printf_i+0x224>
 8003e7a:	3501      	adds	r5, #1
 8003e7c:	68e3      	ldr	r3, [r4, #12]
 8003e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	429d      	cmp	r5, r3
 8003e84:	dbf0      	blt.n	8003e68 <_printf_i+0x1b0>
 8003e86:	e7e9      	b.n	8003e5c <_printf_i+0x1a4>
 8003e88:	2d00      	cmp	r5, #0
 8003e8a:	d0a9      	beq.n	8003de0 <_printf_i+0x128>
 8003e8c:	9e04      	ldr	r6, [sp, #16]
 8003e8e:	0028      	movs	r0, r5
 8003e90:	0039      	movs	r1, r7
 8003e92:	f7fc f9bf 	bl	8000214 <__aeabi_uidivmod>
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	3e01      	subs	r6, #1
 8003e9a:	5c5b      	ldrb	r3, [r3, r1]
 8003e9c:	0028      	movs	r0, r5
 8003e9e:	7033      	strb	r3, [r6, #0]
 8003ea0:	0039      	movs	r1, r7
 8003ea2:	f7fc f931 	bl	8000108 <__udivsi3>
 8003ea6:	1e05      	subs	r5, r0, #0
 8003ea8:	d1f1      	bne.n	8003e8e <_printf_i+0x1d6>
 8003eaa:	2f08      	cmp	r7, #8
 8003eac:	d109      	bne.n	8003ec2 <_printf_i+0x20a>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	07db      	lsls	r3, r3, #31
 8003eb2:	d506      	bpl.n	8003ec2 <_printf_i+0x20a>
 8003eb4:	6863      	ldr	r3, [r4, #4]
 8003eb6:	6922      	ldr	r2, [r4, #16]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	dc02      	bgt.n	8003ec2 <_printf_i+0x20a>
 8003ebc:	2330      	movs	r3, #48	; 0x30
 8003ebe:	3e01      	subs	r6, #1
 8003ec0:	7033      	strb	r3, [r6, #0]
 8003ec2:	9b04      	ldr	r3, [sp, #16]
 8003ec4:	1b9b      	subs	r3, r3, r6
 8003ec6:	6123      	str	r3, [r4, #16]
 8003ec8:	9b07      	ldr	r3, [sp, #28]
 8003eca:	aa09      	add	r2, sp, #36	; 0x24
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	0021      	movs	r1, r4
 8003ed0:	9b06      	ldr	r3, [sp, #24]
 8003ed2:	9805      	ldr	r0, [sp, #20]
 8003ed4:	f7ff fe82 	bl	8003bdc <_printf_common>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d1b3      	bne.n	8003e44 <_printf_i+0x18c>
 8003edc:	2001      	movs	r0, #1
 8003ede:	4240      	negs	r0, r0
 8003ee0:	b00b      	add	sp, #44	; 0x2c
 8003ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee4:	08004a12 	.word	0x08004a12
 8003ee8:	08004a01 	.word	0x08004a01

08003eec <__sread>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	000c      	movs	r4, r1
 8003ef0:	250e      	movs	r5, #14
 8003ef2:	5f49      	ldrsh	r1, [r1, r5]
 8003ef4:	f000 f8b0 	bl	8004058 <_read_r>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	db03      	blt.n	8003f04 <__sread+0x18>
 8003efc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003efe:	181b      	adds	r3, r3, r0
 8003f00:	6563      	str	r3, [r4, #84]	; 0x54
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	89a3      	ldrh	r3, [r4, #12]
 8003f06:	4a02      	ldr	r2, [pc, #8]	; (8003f10 <__sread+0x24>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	81a3      	strh	r3, [r4, #12]
 8003f0c:	e7f9      	b.n	8003f02 <__sread+0x16>
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	ffffefff 	.word	0xffffefff

08003f14 <__swrite>:
 8003f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f16:	001f      	movs	r7, r3
 8003f18:	898b      	ldrh	r3, [r1, #12]
 8003f1a:	0005      	movs	r5, r0
 8003f1c:	000c      	movs	r4, r1
 8003f1e:	0016      	movs	r6, r2
 8003f20:	05db      	lsls	r3, r3, #23
 8003f22:	d505      	bpl.n	8003f30 <__swrite+0x1c>
 8003f24:	230e      	movs	r3, #14
 8003f26:	5ec9      	ldrsh	r1, [r1, r3]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	f000 f874 	bl	8004018 <_lseek_r>
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	4a05      	ldr	r2, [pc, #20]	; (8003f48 <__swrite+0x34>)
 8003f34:	0028      	movs	r0, r5
 8003f36:	4013      	ands	r3, r2
 8003f38:	81a3      	strh	r3, [r4, #12]
 8003f3a:	0032      	movs	r2, r6
 8003f3c:	230e      	movs	r3, #14
 8003f3e:	5ee1      	ldrsh	r1, [r4, r3]
 8003f40:	003b      	movs	r3, r7
 8003f42:	f000 f81f 	bl	8003f84 <_write_r>
 8003f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f48:	ffffefff 	.word	0xffffefff

08003f4c <__sseek>:
 8003f4c:	b570      	push	{r4, r5, r6, lr}
 8003f4e:	000c      	movs	r4, r1
 8003f50:	250e      	movs	r5, #14
 8003f52:	5f49      	ldrsh	r1, [r1, r5]
 8003f54:	f000 f860 	bl	8004018 <_lseek_r>
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	1c42      	adds	r2, r0, #1
 8003f5c:	d103      	bne.n	8003f66 <__sseek+0x1a>
 8003f5e:	4a05      	ldr	r2, [pc, #20]	; (8003f74 <__sseek+0x28>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	bd70      	pop	{r4, r5, r6, pc}
 8003f66:	2280      	movs	r2, #128	; 0x80
 8003f68:	0152      	lsls	r2, r2, #5
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	81a3      	strh	r3, [r4, #12]
 8003f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8003f70:	e7f8      	b.n	8003f64 <__sseek+0x18>
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	ffffefff 	.word	0xffffefff

08003f78 <__sclose>:
 8003f78:	b510      	push	{r4, lr}
 8003f7a:	230e      	movs	r3, #14
 8003f7c:	5ec9      	ldrsh	r1, [r1, r3]
 8003f7e:	f000 f815 	bl	8003fac <_close_r>
 8003f82:	bd10      	pop	{r4, pc}

08003f84 <_write_r>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	0005      	movs	r5, r0
 8003f88:	0008      	movs	r0, r1
 8003f8a:	0011      	movs	r1, r2
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	4c06      	ldr	r4, [pc, #24]	; (8003fa8 <_write_r+0x24>)
 8003f90:	6022      	str	r2, [r4, #0]
 8003f92:	001a      	movs	r2, r3
 8003f94:	f000 f8ac 	bl	80040f0 <_write>
 8003f98:	1c43      	adds	r3, r0, #1
 8003f9a:	d103      	bne.n	8003fa4 <_write_r+0x20>
 8003f9c:	6823      	ldr	r3, [r4, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d000      	beq.n	8003fa4 <_write_r+0x20>
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
 8003fa6:	46c0      	nop			; (mov r8, r8)
 8003fa8:	200003fc 	.word	0x200003fc

08003fac <_close_r>:
 8003fac:	2300      	movs	r3, #0
 8003fae:	b570      	push	{r4, r5, r6, lr}
 8003fb0:	4c06      	ldr	r4, [pc, #24]	; (8003fcc <_close_r+0x20>)
 8003fb2:	0005      	movs	r5, r0
 8003fb4:	0008      	movs	r0, r1
 8003fb6:	6023      	str	r3, [r4, #0]
 8003fb8:	f000 f862 	bl	8004080 <_close>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d103      	bne.n	8003fc8 <_close_r+0x1c>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d000      	beq.n	8003fc8 <_close_r+0x1c>
 8003fc6:	602b      	str	r3, [r5, #0]
 8003fc8:	bd70      	pop	{r4, r5, r6, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	200003fc 	.word	0x200003fc

08003fd0 <_fstat_r>:
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	b570      	push	{r4, r5, r6, lr}
 8003fd4:	4c06      	ldr	r4, [pc, #24]	; (8003ff0 <_fstat_r+0x20>)
 8003fd6:	0005      	movs	r5, r0
 8003fd8:	0008      	movs	r0, r1
 8003fda:	0011      	movs	r1, r2
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	f000 f857 	bl	8004090 <_fstat>
 8003fe2:	1c43      	adds	r3, r0, #1
 8003fe4:	d103      	bne.n	8003fee <_fstat_r+0x1e>
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d000      	beq.n	8003fee <_fstat_r+0x1e>
 8003fec:	602b      	str	r3, [r5, #0]
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	200003fc 	.word	0x200003fc

08003ff4 <_isatty_r>:
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	b570      	push	{r4, r5, r6, lr}
 8003ff8:	4c06      	ldr	r4, [pc, #24]	; (8004014 <_isatty_r+0x20>)
 8003ffa:	0005      	movs	r5, r0
 8003ffc:	0008      	movs	r0, r1
 8003ffe:	6023      	str	r3, [r4, #0]
 8004000:	f000 f84e 	bl	80040a0 <_isatty>
 8004004:	1c43      	adds	r3, r0, #1
 8004006:	d103      	bne.n	8004010 <_isatty_r+0x1c>
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d000      	beq.n	8004010 <_isatty_r+0x1c>
 800400e:	602b      	str	r3, [r5, #0]
 8004010:	bd70      	pop	{r4, r5, r6, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	200003fc 	.word	0x200003fc

08004018 <_lseek_r>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	0005      	movs	r5, r0
 800401c:	0008      	movs	r0, r1
 800401e:	0011      	movs	r1, r2
 8004020:	2200      	movs	r2, #0
 8004022:	4c06      	ldr	r4, [pc, #24]	; (800403c <_lseek_r+0x24>)
 8004024:	6022      	str	r2, [r4, #0]
 8004026:	001a      	movs	r2, r3
 8004028:	f000 f842 	bl	80040b0 <_lseek>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d103      	bne.n	8004038 <_lseek_r+0x20>
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d000      	beq.n	8004038 <_lseek_r+0x20>
 8004036:	602b      	str	r3, [r5, #0]
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	200003fc 	.word	0x200003fc

08004040 <memchr>:
 8004040:	b2c9      	uxtb	r1, r1
 8004042:	1882      	adds	r2, r0, r2
 8004044:	4290      	cmp	r0, r2
 8004046:	d101      	bne.n	800404c <memchr+0xc>
 8004048:	2000      	movs	r0, #0
 800404a:	4770      	bx	lr
 800404c:	7803      	ldrb	r3, [r0, #0]
 800404e:	428b      	cmp	r3, r1
 8004050:	d0fb      	beq.n	800404a <memchr+0xa>
 8004052:	3001      	adds	r0, #1
 8004054:	e7f6      	b.n	8004044 <memchr+0x4>
	...

08004058 <_read_r>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	0005      	movs	r5, r0
 800405c:	0008      	movs	r0, r1
 800405e:	0011      	movs	r1, r2
 8004060:	2200      	movs	r2, #0
 8004062:	4c06      	ldr	r4, [pc, #24]	; (800407c <_read_r+0x24>)
 8004064:	6022      	str	r2, [r4, #0]
 8004066:	001a      	movs	r2, r3
 8004068:	f000 f82a 	bl	80040c0 <_read>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d103      	bne.n	8004078 <_read_r+0x20>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d000      	beq.n	8004078 <_read_r+0x20>
 8004076:	602b      	str	r3, [r5, #0]
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	200003fc 	.word	0x200003fc

08004080 <_close>:
 8004080:	2258      	movs	r2, #88	; 0x58
 8004082:	2001      	movs	r0, #1
 8004084:	4b01      	ldr	r3, [pc, #4]	; (800408c <_close+0xc>)
 8004086:	4240      	negs	r0, r0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	4770      	bx	lr
 800408c:	200003fc 	.word	0x200003fc

08004090 <_fstat>:
 8004090:	2258      	movs	r2, #88	; 0x58
 8004092:	2001      	movs	r0, #1
 8004094:	4b01      	ldr	r3, [pc, #4]	; (800409c <_fstat+0xc>)
 8004096:	4240      	negs	r0, r0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	4770      	bx	lr
 800409c:	200003fc 	.word	0x200003fc

080040a0 <_isatty>:
 80040a0:	2258      	movs	r2, #88	; 0x58
 80040a2:	4b02      	ldr	r3, [pc, #8]	; (80040ac <_isatty+0xc>)
 80040a4:	2000      	movs	r0, #0
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	4770      	bx	lr
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	200003fc 	.word	0x200003fc

080040b0 <_lseek>:
 80040b0:	2258      	movs	r2, #88	; 0x58
 80040b2:	2001      	movs	r0, #1
 80040b4:	4b01      	ldr	r3, [pc, #4]	; (80040bc <_lseek+0xc>)
 80040b6:	4240      	negs	r0, r0
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	4770      	bx	lr
 80040bc:	200003fc 	.word	0x200003fc

080040c0 <_read>:
 80040c0:	2258      	movs	r2, #88	; 0x58
 80040c2:	2001      	movs	r0, #1
 80040c4:	4b01      	ldr	r3, [pc, #4]	; (80040cc <_read+0xc>)
 80040c6:	4240      	negs	r0, r0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	4770      	bx	lr
 80040cc:	200003fc 	.word	0x200003fc

080040d0 <_sbrk>:
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <_sbrk+0x18>)
 80040d2:	0002      	movs	r2, r0
 80040d4:	6819      	ldr	r1, [r3, #0]
 80040d6:	2900      	cmp	r1, #0
 80040d8:	d101      	bne.n	80040de <_sbrk+0xe>
 80040da:	4904      	ldr	r1, [pc, #16]	; (80040ec <_sbrk+0x1c>)
 80040dc:	6019      	str	r1, [r3, #0]
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	1882      	adds	r2, r0, r2
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	20000094 	.word	0x20000094
 80040ec:	20000400 	.word	0x20000400

080040f0 <_write>:
 80040f0:	2258      	movs	r2, #88	; 0x58
 80040f2:	2001      	movs	r0, #1
 80040f4:	4b01      	ldr	r3, [pc, #4]	; (80040fc <_write+0xc>)
 80040f6:	4240      	negs	r0, r0
 80040f8:	601a      	str	r2, [r3, #0]
 80040fa:	4770      	bx	lr
 80040fc:	200003fc 	.word	0x200003fc

08004100 <_init>:
 8004100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004106:	bc08      	pop	{r3}
 8004108:	469e      	mov	lr, r3
 800410a:	4770      	bx	lr

0800410c <_fini>:
 800410c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004112:	bc08      	pop	{r3}
 8004114:	469e      	mov	lr, r3
 8004116:	4770      	bx	lr
